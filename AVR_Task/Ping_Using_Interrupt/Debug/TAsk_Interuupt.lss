
TAsk_Interuupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  000043ea  0000447e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000ca  008000ca  000044e8  2**0
                  ALLOC
  3 .stab         00003eb8  00000000  00000000  000044e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001494  00000000  00000000  000083a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b72d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d3c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d528  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d7b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__vector_1>
       8:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__vector_2>
       c:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3d       	cpi	r26, 0xD5	; 213
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 20 	call	0x4194	; 0x4194 <main>
      8a:	0c 94 f3 21 	jmp	0x43e6	; 0x43e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 21 	jmp	0x4378	; 0x4378 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e9       	ldi	r26, 0x91	; 145
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 21 	jmp	0x43c8	; 0x43c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 21 	jmp	0x43c8	; 0x43c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 21 	jmp	0x4378	; 0x4378 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e9       	ldi	r24, 0x91	; 145
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e4 21 	jmp	0x43c8	; 0x43c8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e4 21 	jmp	0x43c8	; 0x43c8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e4 21 	jmp	0x43c8	; 0x43c8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cc 21 	jmp	0x4398	; 0x4398 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuInit>:
#include "DIO_private.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	89 83       	std	Y+1, r24	; 0x01

	DDRA=Conc(PORTA_PIN7_DIR,PORTA_PIN6_DIR,PORTA_PIN5_DIR,PORTA_PIN4_DIR,PORTA_PIN3_DIR,PORTA_PIN2_DIR,PORTA_PIN1_DIR,PORTA_PIN0_DIR);
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8c e4       	ldi	r24, 0x4C	; 76
     b5a:	80 83       	st	Z, r24

	DDRB=Conc(PORTB_PIN7_DIR,PORTB_PIN6_DIR,PORTB_PIN5_DIR,PORTB_PIN4_DIR,PORTB_PIN3_DIR,PORTB_PIN2_DIR,PORTB_PIN1_DIR,PORTB_PIN0_DIR);
     b5c:	e7 e3       	ldi	r30, 0x37	; 55
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	8c e4       	ldi	r24, 0x4C	; 76
     b62:	80 83       	st	Z, r24

	DDRC=Conc(PORTC_PIN7_DIR,PORTC_PIN6_DIR,PORTC_PIN5_DIR,PORTC_PIN4_DIR,PORTC_PIN3_DIR,PORTC_PIN2_DIR,PORTC_PIN1_DIR,PORTC_PIN0_DIR);
     b64:	e4 e3       	ldi	r30, 0x34	; 52
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	8c e4       	ldi	r24, 0x4C	; 76
     b6a:	80 83       	st	Z, r24

	DDRD=Conc(PORTD_PIN7_DIR,PORTD_PIN6_DIR,PORTD_PIN5_DIR,PORTD_PIN4_DIR,PORTD_PIN3_DIR,PORTD_PIN2_DIR,PORTD_PIN1_DIR,PORTD_PIN0_DIR);
     b6c:	e1 e3       	ldi	r30, 0x31	; 49
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	8c e4       	ldi	r24, 0x4C	; 76
     b72:	80 83       	st	Z, r24

	PORTA=Conc(PORTA_PIN7_VAL,PORTA_PIN6_VAL,PORTA_PIN5_VAL,PORTA_PIN4_VAL,PORTA_PIN3_VAL,PORTA_PIN2_VAL,PORTA_PIN1_VAL,PORTA_PIN0_VAL);
     b74:	eb e3       	ldi	r30, 0x3B	; 59
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	84 e7       	ldi	r24, 0x74	; 116
     b7a:	80 83       	st	Z, r24

	PORTB=Conc(PORTB_PIN7_VAL,PORTB_PIN6_VAL,PORTB_PIN5_VAL,PORTB_PIN4_VAL,PORTB_PIN3_VAL,PORTB_PIN2_VAL,PORTB_PIN1_VAL,PORTB_PIN0_VAL);
     b7c:	e8 e3       	ldi	r30, 0x38	; 56
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	84 e7       	ldi	r24, 0x74	; 116
     b82:	80 83       	st	Z, r24

	PORTC=Conc(PORTC_PIN7_VAL,PORTC_PIN6_VAL,PORTC_PIN5_VAL,PORTC_PIN4_VAL,PORTC_PIN3_VAL,PORTC_PIN2_VAL,PORTC_PIN1_VAL,PORTC_PIN0_VAL);
     b84:	e5 e3       	ldi	r30, 0x35	; 53
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	84 e7       	ldi	r24, 0x74	; 116
     b8a:	80 83       	st	Z, r24

	PORTD=Conc(PORTD_PIN7_VAL,PORTD_PIN6_VAL,PORTD_PIN5_VAL,PORTD_PIN4_VAL,PORTD_PIN3_VAL,PORTD_PIN2_VAL,PORTD_PIN1_VAL,PORTD_PIN0_VAL);
     b8c:	e2 e3       	ldi	r30, 0x32	; 50
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	84 e7       	ldi	r24, 0x74	; 116
     b92:	80 83       	st	Z, r24

	Local_enuErrorState=ES_OK;
     b94:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
     b96:	89 81       	ldd	r24, Y+1	; 0x01
}
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <DIO_enuSet_PortValue>:

ES_t DIO_enuSet_PortValue(u8 copy_u8PortId,u8 copy_u8PortValue)//copy_u8PortValue-->HIGH-->LOW
{
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <DIO_enuSet_PortValue+0x6>
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <DIO_enuSet_PortValue+0x8>
     ba8:	0f 92       	push	r0
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	8a 83       	std	Y+2, r24	; 0x02
     bb0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PortId<=DIO_PORTD)
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	84 30       	cpi	r24, 0x04	; 4
     bba:	a0 f5       	brcc	.+104    	; 0xc24 <DIO_enuSet_PortValue+0x84>
	{
		switch(copy_u8PortId)
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	3d 83       	std	Y+5, r19	; 0x05
     bc4:	2c 83       	std	Y+4, r18	; 0x04
     bc6:	8c 81       	ldd	r24, Y+4	; 0x04
     bc8:	9d 81       	ldd	r25, Y+5	; 0x05
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	91 05       	cpc	r25, r1
     bce:	d1 f0       	breq	.+52     	; 0xc04 <DIO_enuSet_PortValue+0x64>
     bd0:	2c 81       	ldd	r18, Y+4	; 0x04
     bd2:	3d 81       	ldd	r19, Y+5	; 0x05
     bd4:	22 30       	cpi	r18, 0x02	; 2
     bd6:	31 05       	cpc	r19, r1
     bd8:	2c f4       	brge	.+10     	; 0xbe4 <DIO_enuSet_PortValue+0x44>
     bda:	8c 81       	ldd	r24, Y+4	; 0x04
     bdc:	9d 81       	ldd	r25, Y+5	; 0x05
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	61 f0       	breq	.+24     	; 0xbfa <DIO_enuSet_PortValue+0x5a>
     be2:	1e c0       	rjmp	.+60     	; 0xc20 <DIO_enuSet_PortValue+0x80>
     be4:	2c 81       	ldd	r18, Y+4	; 0x04
     be6:	3d 81       	ldd	r19, Y+5	; 0x05
     be8:	22 30       	cpi	r18, 0x02	; 2
     bea:	31 05       	cpc	r19, r1
     bec:	81 f0       	breq	.+32     	; 0xc0e <DIO_enuSet_PortValue+0x6e>
     bee:	8c 81       	ldd	r24, Y+4	; 0x04
     bf0:	9d 81       	ldd	r25, Y+5	; 0x05
     bf2:	83 30       	cpi	r24, 0x03	; 3
     bf4:	91 05       	cpc	r25, r1
     bf6:	81 f0       	breq	.+32     	; 0xc18 <DIO_enuSet_PortValue+0x78>
     bf8:	13 c0       	rjmp	.+38     	; 0xc20 <DIO_enuSet_PortValue+0x80>
		{
		case(DIO_PORTA):
			PORTA=copy_u8PortValue;
     bfa:	eb e3       	ldi	r30, 0x3B	; 59
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	80 83       	st	Z, r24
     c02:	0e c0       	rjmp	.+28     	; 0xc20 <DIO_enuSet_PortValue+0x80>
			break;
		case(DIO_PORTB):
			PORTB=copy_u8PortValue;
     c04:	e8 e3       	ldi	r30, 0x38	; 56
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	80 83       	st	Z, r24
     c0c:	09 c0       	rjmp	.+18     	; 0xc20 <DIO_enuSet_PortValue+0x80>
			break;
		case(DIO_PORTC):
			PORTC=copy_u8PortValue;
     c0e:	e5 e3       	ldi	r30, 0x35	; 53
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	80 83       	st	Z, r24
     c16:	04 c0       	rjmp	.+8      	; 0xc20 <DIO_enuSet_PortValue+0x80>
			break;
		case(DIO_PORTD):
			PORTD=copy_u8PortValue;
     c18:	e2 e3       	ldi	r30, 0x32	; 50
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	80 83       	st	Z, r24
		    break;
		}
		Local_enuErrorState=ES_OK;
     c20:	19 82       	std	Y+1, r1	; 0x01
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <DIO_enuSet_PortValue+0x88>

	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <DIO_enuSet_PortDirection>:


ES_t DIO_enuSet_PortDirection(u8 copy_u8PortId,u8 copy_u8PortValue)//copy_u8PortValue-->INPUT-->OUTPUT
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <DIO_enuSet_PortDirection+0x6>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <DIO_enuSet_PortDirection+0x8>
     c42:	0f 92       	push	r0
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	8a 83       	std	Y+2, r24	; 0x02
     c4a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PortId<=DIO_PORTD)
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	a0 f5       	brcc	.+104    	; 0xcbe <DIO_enuSet_PortDirection+0x84>
	{
		switch(copy_u8PortId)
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	3d 83       	std	Y+5, r19	; 0x05
     c5e:	2c 83       	std	Y+4, r18	; 0x04
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	9d 81       	ldd	r25, Y+5	; 0x05
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	91 05       	cpc	r25, r1
     c68:	d1 f0       	breq	.+52     	; 0xc9e <DIO_enuSet_PortDirection+0x64>
     c6a:	2c 81       	ldd	r18, Y+4	; 0x04
     c6c:	3d 81       	ldd	r19, Y+5	; 0x05
     c6e:	22 30       	cpi	r18, 0x02	; 2
     c70:	31 05       	cpc	r19, r1
     c72:	2c f4       	brge	.+10     	; 0xc7e <DIO_enuSet_PortDirection+0x44>
     c74:	8c 81       	ldd	r24, Y+4	; 0x04
     c76:	9d 81       	ldd	r25, Y+5	; 0x05
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	61 f0       	breq	.+24     	; 0xc94 <DIO_enuSet_PortDirection+0x5a>
     c7c:	1e c0       	rjmp	.+60     	; 0xcba <DIO_enuSet_PortDirection+0x80>
     c7e:	2c 81       	ldd	r18, Y+4	; 0x04
     c80:	3d 81       	ldd	r19, Y+5	; 0x05
     c82:	22 30       	cpi	r18, 0x02	; 2
     c84:	31 05       	cpc	r19, r1
     c86:	81 f0       	breq	.+32     	; 0xca8 <DIO_enuSet_PortDirection+0x6e>
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	9d 81       	ldd	r25, Y+5	; 0x05
     c8c:	83 30       	cpi	r24, 0x03	; 3
     c8e:	91 05       	cpc	r25, r1
     c90:	81 f0       	breq	.+32     	; 0xcb2 <DIO_enuSet_PortDirection+0x78>
     c92:	13 c0       	rjmp	.+38     	; 0xcba <DIO_enuSet_PortDirection+0x80>
		{
		case(DIO_PORTA):
			DDRA=copy_u8PortValue;
     c94:	ea e3       	ldi	r30, 0x3A	; 58
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	80 83       	st	Z, r24
     c9c:	0e c0       	rjmp	.+28     	; 0xcba <DIO_enuSet_PortDirection+0x80>
			break;
		case(DIO_PORTB):
			DDRB=copy_u8PortValue;
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	80 83       	st	Z, r24
     ca6:	09 c0       	rjmp	.+18     	; 0xcba <DIO_enuSet_PortDirection+0x80>
			break;
		case(DIO_PORTC):
			DDRC=copy_u8PortValue;
     ca8:	e4 e3       	ldi	r30, 0x34	; 52
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	80 83       	st	Z, r24
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <DIO_enuSet_PortDirection+0x80>
			break;
		case(DIO_PORTD):
			DDRD=copy_u8PortValue;
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	80 83       	st	Z, r24
		    break;
		}
		Local_enuErrorState=ES_OK;
     cba:	19 82       	std	Y+1, r1	; 0x01
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_enuSet_PortDirection+0x88>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <DIO_enuget_PortValue>:


ES_t DIO_enuget_PortValue(u8 copy_u8PortId,u8 *copy_pu8PortValue)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <DIO_enuget_PortValue+0x6>
     cda:	00 d0       	rcall	.+0      	; 0xcdc <DIO_enuget_PortValue+0x8>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <DIO_enuget_PortValue+0xa>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	8a 83       	std	Y+2, r24	; 0x02
     ce4:	7c 83       	std	Y+4, r23	; 0x04
     ce6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu8PortValue!=NULL )
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <DIO_enuget_PortValue+0x22>
     cf4:	42 c0       	rjmp	.+132    	; 0xd7a <DIO_enuget_PortValue+0xa6>
	{
		if(copy_u8PortId<=DIO_PORTD)
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	e0 f5       	brcc	.+120    	; 0xd74 <DIO_enuget_PortValue+0xa0>
			{
				switch(copy_u8PortId)
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	3e 83       	std	Y+6, r19	; 0x06
     d04:	2d 83       	std	Y+5, r18	; 0x05
     d06:	8d 81       	ldd	r24, Y+5	; 0x05
     d08:	9e 81       	ldd	r25, Y+6	; 0x06
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	91 05       	cpc	r25, r1
     d0e:	e1 f0       	breq	.+56     	; 0xd48 <DIO_enuget_PortValue+0x74>
     d10:	2d 81       	ldd	r18, Y+5	; 0x05
     d12:	3e 81       	ldd	r19, Y+6	; 0x06
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	2c f4       	brge	.+10     	; 0xd24 <DIO_enuget_PortValue+0x50>
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	61 f0       	breq	.+24     	; 0xd3a <DIO_enuget_PortValue+0x66>
     d22:	26 c0       	rjmp	.+76     	; 0xd70 <DIO_enuget_PortValue+0x9c>
     d24:	2d 81       	ldd	r18, Y+5	; 0x05
     d26:	3e 81       	ldd	r19, Y+6	; 0x06
     d28:	22 30       	cpi	r18, 0x02	; 2
     d2a:	31 05       	cpc	r19, r1
     d2c:	a1 f0       	breq	.+40     	; 0xd56 <DIO_enuget_PortValue+0x82>
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	91 05       	cpc	r25, r1
     d36:	b1 f0       	breq	.+44     	; 0xd64 <DIO_enuget_PortValue+0x90>
     d38:	1b c0       	rjmp	.+54     	; 0xd70 <DIO_enuget_PortValue+0x9c>
				{
				case(DIO_PORTA):
					*copy_pu8PortValue=PINA;
     d3a:	e9 e3       	ldi	r30, 0x39	; 57
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	eb 81       	ldd	r30, Y+3	; 0x03
     d42:	fc 81       	ldd	r31, Y+4	; 0x04
     d44:	80 83       	st	Z, r24
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <DIO_enuget_PortValue+0x9c>
					break;
				case(DIO_PORTB):
					*copy_pu8PortValue=PINB;
     d48:	e6 e3       	ldi	r30, 0x36	; 54
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	eb 81       	ldd	r30, Y+3	; 0x03
     d50:	fc 81       	ldd	r31, Y+4	; 0x04
     d52:	80 83       	st	Z, r24
     d54:	0d c0       	rjmp	.+26     	; 0xd70 <DIO_enuget_PortValue+0x9c>
					break;
				case(DIO_PORTC):
					*copy_pu8PortValue=PINC;
     d56:	e3 e3       	ldi	r30, 0x33	; 51
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	eb 81       	ldd	r30, Y+3	; 0x03
     d5e:	fc 81       	ldd	r31, Y+4	; 0x04
     d60:	80 83       	st	Z, r24
     d62:	06 c0       	rjmp	.+12     	; 0xd70 <DIO_enuget_PortValue+0x9c>
					break;
				case(DIO_PORTD):
					*copy_pu8PortValue=PIND;
     d64:	e0 e3       	ldi	r30, 0x30	; 48
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	eb 81       	ldd	r30, Y+3	; 0x03
     d6c:	fc 81       	ldd	r31, Y+4	; 0x04
     d6e:	80 83       	st	Z, r24
				    break;
				}
				Local_enuErrorState=ES_OK;
     d70:	19 82       	std	Y+1, r1	; 0x01
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <DIO_enuget_PortValue+0xaa>

			}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	89 83       	std	Y+1, r24	; 0x01
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_enuget_PortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d80:	26 96       	adiw	r28, 0x06	; 6
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <DIO_enuToggle_PortValue>:


ES_t DIO_enuToggle_PortValue(u8 copy_u8PortId)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <DIO_enuToggle_PortValue+0x6>
     d98:	00 d0       	rcall	.+0      	; 0xd9a <DIO_enuToggle_PortValue+0x8>
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId<=DIO_PORTD)
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	08 f0       	brcs	.+2      	; 0xdac <DIO_enuToggle_PortValue+0x1a>
     daa:	40 c0       	rjmp	.+128    	; 0xe2c <DIO_enuToggle_PortValue+0x9a>
		{
			switch(copy_u8PortId)
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	3c 83       	std	Y+4, r19	; 0x04
     db4:	2b 83       	std	Y+3, r18	; 0x03
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	91 05       	cpc	r25, r1
     dbe:	e9 f0       	breq	.+58     	; 0xdfa <DIO_enuToggle_PortValue+0x68>
     dc0:	2b 81       	ldd	r18, Y+3	; 0x03
     dc2:	3c 81       	ldd	r19, Y+4	; 0x04
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <DIO_enuToggle_PortValue+0x42>
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	9c 81       	ldd	r25, Y+4	; 0x04
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	61 f0       	breq	.+24     	; 0xdea <DIO_enuToggle_PortValue+0x58>
     dd2:	2a c0       	rjmp	.+84     	; 0xe28 <DIO_enuToggle_PortValue+0x96>
     dd4:	2b 81       	ldd	r18, Y+3	; 0x03
     dd6:	3c 81       	ldd	r19, Y+4	; 0x04
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	b1 f0       	breq	.+44     	; 0xe0a <DIO_enuToggle_PortValue+0x78>
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	83 30       	cpi	r24, 0x03	; 3
     de4:	91 05       	cpc	r25, r1
     de6:	c9 f0       	breq	.+50     	; 0xe1a <DIO_enuToggle_PortValue+0x88>
     de8:	1f c0       	rjmp	.+62     	; 0xe28 <DIO_enuToggle_PortValue+0x96>
			{
			case(DIO_PORTA):
				PORTA=~PORTA;
     dea:	ab e3       	ldi	r26, 0x3B	; 59
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	eb e3       	ldi	r30, 0x3B	; 59
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	80 95       	com	r24
     df6:	8c 93       	st	X, r24
     df8:	17 c0       	rjmp	.+46     	; 0xe28 <DIO_enuToggle_PortValue+0x96>
				break;
			case(DIO_PORTB):
				PORTB=~PORTB;
     dfa:	a8 e3       	ldi	r26, 0x38	; 56
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e3       	ldi	r30, 0x38	; 56
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 95       	com	r24
     e06:	8c 93       	st	X, r24
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <DIO_enuToggle_PortValue+0x96>
				break;
			case(DIO_PORTC):
				PORTC=~PORTC;
     e0a:	a5 e3       	ldi	r26, 0x35	; 53
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e3       	ldi	r30, 0x35	; 53
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 95       	com	r24
     e16:	8c 93       	st	X, r24
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <DIO_enuToggle_PortValue+0x96>
				break;
			case(DIO_PORTD):
				PORTD=~PORTD;
     e1a:	a2 e3       	ldi	r26, 0x32	; 50
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e2 e3       	ldi	r30, 0x32	; 50
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 95       	com	r24
     e26:	8c 93       	st	X, r24
			    break;
			}
			Local_enuErrorState=ES_OK;
     e28:	19 82       	std	Y+1, r1	; 0x01
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_enuToggle_PortValue+0x9e>
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
     e30:	89 81       	ldd	r24, Y+1	; 0x01
}
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <DIO_enuSet_PinValue>:



ES_t DIO_enuSet_PinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinValue)

{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	00 d0       	rcall	.+0      	; 0xe46 <DIO_enuSet_PinValue+0x6>
     e46:	00 d0       	rcall	.+0      	; 0xe48 <DIO_enuSet_PinValue+0x8>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <DIO_enuSet_PinValue+0xa>
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	8a 83       	std	Y+2, r24	; 0x02
     e50:	6b 83       	std	Y+3, r22	; 0x03
     e52:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PortId <= DIO_PORTD && copy_u8PinId <= DIO_PIN7 && copy_u8PinValue <= OUTPUT)
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <DIO_enuSet_PinValue+0x20>
     e5e:	d0 c0       	rjmp	.+416    	; 0x1000 <DIO_enuSet_PinValue+0x1c0>
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	88 30       	cpi	r24, 0x08	; 8
     e64:	08 f0       	brcs	.+2      	; 0xe68 <DIO_enuSet_PinValue+0x28>
     e66:	cc c0       	rjmp	.+408    	; 0x1000 <DIO_enuSet_PinValue+0x1c0>
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <DIO_enuSet_PinValue+0x30>
     e6e:	c8 c0       	rjmp	.+400    	; 0x1000 <DIO_enuSet_PinValue+0x1c0>
	{
		switch(copy_u8PortId)
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3e 83       	std	Y+6, r19	; 0x06
     e78:	2d 83       	std	Y+5, r18	; 0x05
     e7a:	6d 81       	ldd	r22, Y+5	; 0x05
     e7c:	7e 81       	ldd	r23, Y+6	; 0x06
     e7e:	61 30       	cpi	r22, 0x01	; 1
     e80:	71 05       	cpc	r23, r1
     e82:	09 f4       	brne	.+2      	; 0xe86 <DIO_enuSet_PinValue+0x46>
     e84:	41 c0       	rjmp	.+130    	; 0xf08 <DIO_enuSet_PinValue+0xc8>
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	91 05       	cpc	r25, r1
     e8e:	34 f4       	brge	.+12     	; 0xe9c <DIO_enuSet_PinValue+0x5c>
     e90:	2d 81       	ldd	r18, Y+5	; 0x05
     e92:	3e 81       	ldd	r19, Y+6	; 0x06
     e94:	21 15       	cp	r18, r1
     e96:	31 05       	cpc	r19, r1
     e98:	71 f0       	breq	.+28     	; 0xeb6 <DIO_enuSet_PinValue+0x76>
     e9a:	b0 c0       	rjmp	.+352    	; 0xffc <DIO_enuSet_PinValue+0x1bc>
     e9c:	6d 81       	ldd	r22, Y+5	; 0x05
     e9e:	7e 81       	ldd	r23, Y+6	; 0x06
     ea0:	62 30       	cpi	r22, 0x02	; 2
     ea2:	71 05       	cpc	r23, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <DIO_enuSet_PinValue+0x68>
     ea6:	59 c0       	rjmp	.+178    	; 0xf5a <DIO_enuSet_PinValue+0x11a>
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	83 30       	cpi	r24, 0x03	; 3
     eae:	91 05       	cpc	r25, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <DIO_enuSet_PinValue+0x74>
     eb2:	7c c0       	rjmp	.+248    	; 0xfac <DIO_enuSet_PinValue+0x16c>
     eb4:	a3 c0       	rjmp	.+326    	; 0xffc <DIO_enuSet_PinValue+0x1bc>
		{
			case(DIO_PORTA):
			PORTA&=~(DIO_BIT_MUSK<<copy_u8PinId);
     eb6:	ab e3       	ldi	r26, 0x3B	; 59
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	eb e3       	ldi	r30, 0x3B	; 59
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_enuSet_PinValue+0x92>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	2a 95       	dec	r18
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_enuSet_PinValue+0x8e>
     ed6:	80 95       	com	r24
     ed8:	84 23       	and	r24, r20
     eda:	8c 93       	st	X, r24
			PORTA|=(copy_u8PinValue<<copy_u8PinId);
     edc:	ab e3       	ldi	r26, 0x3B	; 59
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	eb e3       	ldi	r30, 0x3B	; 59
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	88 2f       	mov	r24, r24
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	b9 01       	movw	r22, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_enuSet_PinValue+0xbc>
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	8a 95       	dec	r24
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_enuSet_PinValue+0xb8>
     f00:	cb 01       	movw	r24, r22
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	7a c0       	rjmp	.+244    	; 0xffc <DIO_enuSet_PinValue+0x1bc>
			break;
			case(DIO_PORTB):
			PORTB&=~(DIO_BIT_MUSK<<copy_u8PinId);
     f08:	a8 e3       	ldi	r26, 0x38	; 56
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e8 e3       	ldi	r30, 0x38	; 56
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_enuSet_PinValue+0xe4>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	2a 95       	dec	r18
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_enuSet_PinValue+0xe0>
     f28:	80 95       	com	r24
     f2a:	84 23       	and	r24, r20
     f2c:	8c 93       	st	X, r24
			PORTB|=(copy_u8PinValue<<copy_u8PinId);
     f2e:	a8 e3       	ldi	r26, 0x38	; 56
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e8 e3       	ldi	r30, 0x38	; 56
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	b9 01       	movw	r22, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_enuSet_PinValue+0x10e>
     f4a:	66 0f       	add	r22, r22
     f4c:	77 1f       	adc	r23, r23
     f4e:	8a 95       	dec	r24
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_enuSet_PinValue+0x10a>
     f52:	cb 01       	movw	r24, r22
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	51 c0       	rjmp	.+162    	; 0xffc <DIO_enuSet_PinValue+0x1bc>
			break;
			case(DIO_PORTC):
			PORTC&=~(DIO_BIT_MUSK<<copy_u8PinId);
     f5a:	a5 e3       	ldi	r26, 0x35	; 53
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e5 e3       	ldi	r30, 0x35	; 53
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_enuSet_PinValue+0x136>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	2a 95       	dec	r18
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_enuSet_PinValue+0x132>
     f7a:	80 95       	com	r24
     f7c:	84 23       	and	r24, r20
     f7e:	8c 93       	st	X, r24
			PORTC|=(copy_u8PinValue<<copy_u8PinId);
     f80:	a5 e3       	ldi	r26, 0x35	; 53
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e5 e3       	ldi	r30, 0x35	; 53
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	b9 01       	movw	r22, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_enuSet_PinValue+0x160>
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_enuSet_PinValue+0x15c>
     fa4:	cb 01       	movw	r24, r22
     fa6:	84 2b       	or	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	28 c0       	rjmp	.+80     	; 0xffc <DIO_enuSet_PinValue+0x1bc>
			break;
			case(DIO_PORTD):
			PORTD&=~(DIO_BIT_MUSK<<copy_u8PinId);
     fac:	a2 e3       	ldi	r26, 0x32	; 50
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e2 e3       	ldi	r30, 0x32	; 50
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_enuSet_PinValue+0x188>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	2a 95       	dec	r18
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_enuSet_PinValue+0x184>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
			PORTD|=(copy_u8PinValue<<copy_u8PinId);
     fd2:	a2 e3       	ldi	r26, 0x32	; 50
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e2 e3       	ldi	r30, 0x32	; 50
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	b9 01       	movw	r22, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_enuSet_PinValue+0x1b2>
     fee:	66 0f       	add	r22, r22
     ff0:	77 1f       	adc	r23, r23
     ff2:	8a 95       	dec	r24
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_enuSet_PinValue+0x1ae>
     ff6:	cb 01       	movw	r24, r22
     ff8:	84 2b       	or	r24, r20
     ffa:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState=ES_OK;
     ffc:	19 82       	std	Y+1, r1	; 0x01
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_enuSet_PinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    1000:	83 e0       	ldi	r24, 0x03	; 3
    1002:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    1004:	89 81       	ldd	r24, Y+1	; 0x01
}
    1006:	26 96       	adiw	r28, 0x06	; 6
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <DIO_enuSet_PinDirection>:

ES_t DIO_enuSet_PinDirection(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinValue)

{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <DIO_enuSet_PinDirection+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <DIO_enuSet_PinDirection+0x8>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <DIO_enuSet_PinDirection+0xa>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	8a 83       	std	Y+2, r24	; 0x02
    1028:	6b 83       	std	Y+3, r22	; 0x03
    102a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId <= DIO_PORTD && copy_u8PinId <= DIO_PIN7 && copy_u8PinValue <= OUTPUT)
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	84 30       	cpi	r24, 0x04	; 4
    1034:	08 f0       	brcs	.+2      	; 0x1038 <DIO_enuSet_PinDirection+0x20>
    1036:	d0 c0       	rjmp	.+416    	; 0x11d8 <DIO_enuSet_PinDirection+0x1c0>
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	88 30       	cpi	r24, 0x08	; 8
    103c:	08 f0       	brcs	.+2      	; 0x1040 <DIO_enuSet_PinDirection+0x28>
    103e:	cc c0       	rjmp	.+408    	; 0x11d8 <DIO_enuSet_PinDirection+0x1c0>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	08 f0       	brcs	.+2      	; 0x1048 <DIO_enuSet_PinDirection+0x30>
    1046:	c8 c0       	rjmp	.+400    	; 0x11d8 <DIO_enuSet_PinDirection+0x1c0>
	{
		switch(copy_u8PortId)
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	3e 83       	std	Y+6, r19	; 0x06
    1050:	2d 83       	std	Y+5, r18	; 0x05
    1052:	6d 81       	ldd	r22, Y+5	; 0x05
    1054:	7e 81       	ldd	r23, Y+6	; 0x06
    1056:	61 30       	cpi	r22, 0x01	; 1
    1058:	71 05       	cpc	r23, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <DIO_enuSet_PinDirection+0x46>
    105c:	41 c0       	rjmp	.+130    	; 0x10e0 <DIO_enuSet_PinDirection+0xc8>
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	91 05       	cpc	r25, r1
    1066:	34 f4       	brge	.+12     	; 0x1074 <DIO_enuSet_PinDirection+0x5c>
    1068:	2d 81       	ldd	r18, Y+5	; 0x05
    106a:	3e 81       	ldd	r19, Y+6	; 0x06
    106c:	21 15       	cp	r18, r1
    106e:	31 05       	cpc	r19, r1
    1070:	71 f0       	breq	.+28     	; 0x108e <DIO_enuSet_PinDirection+0x76>
    1072:	b0 c0       	rjmp	.+352    	; 0x11d4 <DIO_enuSet_PinDirection+0x1bc>
    1074:	6d 81       	ldd	r22, Y+5	; 0x05
    1076:	7e 81       	ldd	r23, Y+6	; 0x06
    1078:	62 30       	cpi	r22, 0x02	; 2
    107a:	71 05       	cpc	r23, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <DIO_enuSet_PinDirection+0x68>
    107e:	59 c0       	rjmp	.+178    	; 0x1132 <DIO_enuSet_PinDirection+0x11a>
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	83 30       	cpi	r24, 0x03	; 3
    1086:	91 05       	cpc	r25, r1
    1088:	09 f4       	brne	.+2      	; 0x108c <DIO_enuSet_PinDirection+0x74>
    108a:	7c c0       	rjmp	.+248    	; 0x1184 <DIO_enuSet_PinDirection+0x16c>
    108c:	a3 c0       	rjmp	.+326    	; 0x11d4 <DIO_enuSet_PinDirection+0x1bc>
		{
			case(DIO_PORTA):
				DDRA&=~(DIO_BIT_MUSK<<copy_u8PinId);
    108e:	aa e3       	ldi	r26, 0x3A	; 58
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ea e3       	ldi	r30, 0x3A	; 58
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_enuSet_PinDirection+0x92>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	2a 95       	dec	r18
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_enuSet_PinDirection+0x8e>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
				DDRA|=(copy_u8PinValue<<copy_u8PinId);
    10b4:	aa e3       	ldi	r26, 0x3A	; 58
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	ea e3       	ldi	r30, 0x3A	; 58
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	b9 01       	movw	r22, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_enuSet_PinDirection+0xbc>
    10d0:	66 0f       	add	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	8a 95       	dec	r24
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_enuSet_PinDirection+0xb8>
    10d8:	cb 01       	movw	r24, r22
    10da:	84 2b       	or	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	7a c0       	rjmp	.+244    	; 0x11d4 <DIO_enuSet_PinDirection+0x1bc>
			break;
			case(DIO_PORTB):
				DDRB&=~(DIO_BIT_MUSK<<copy_u8PinId);
    10e0:	a7 e3       	ldi	r26, 0x37	; 55
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e7 e3       	ldi	r30, 0x37	; 55
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_enuSet_PinDirection+0xe4>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	2a 95       	dec	r18
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_enuSet_PinDirection+0xe0>
    1100:	80 95       	com	r24
    1102:	84 23       	and	r24, r20
    1104:	8c 93       	st	X, r24
				DDRB|=(copy_u8PinValue<<copy_u8PinId);
    1106:	a7 e3       	ldi	r26, 0x37	; 55
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e7 e3       	ldi	r30, 0x37	; 55
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	b9 01       	movw	r22, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_enuSet_PinDirection+0x10e>
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	8a 95       	dec	r24
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_enuSet_PinDirection+0x10a>
    112a:	cb 01       	movw	r24, r22
    112c:	84 2b       	or	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	51 c0       	rjmp	.+162    	; 0x11d4 <DIO_enuSet_PinDirection+0x1bc>
			break;
			case(DIO_PORTC):
				DDRC&=~(DIO_BIT_MUSK<<copy_u8PinId);
    1132:	a4 e3       	ldi	r26, 0x34	; 52
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e4 e3       	ldi	r30, 0x34	; 52
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_enuSet_PinDirection+0x136>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	2a 95       	dec	r18
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_enuSet_PinDirection+0x132>
    1152:	80 95       	com	r24
    1154:	84 23       	and	r24, r20
    1156:	8c 93       	st	X, r24
				DDRC|=(copy_u8PinValue<<copy_u8PinId);
    1158:	a4 e3       	ldi	r26, 0x34	; 52
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e4 e3       	ldi	r30, 0x34	; 52
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	b9 01       	movw	r22, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_enuSet_PinDirection+0x160>
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	8a 95       	dec	r24
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_enuSet_PinDirection+0x15c>
    117c:	cb 01       	movw	r24, r22
    117e:	84 2b       	or	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	28 c0       	rjmp	.+80     	; 0x11d4 <DIO_enuSet_PinDirection+0x1bc>
			break;
			case(DIO_PORTD):
				DDRD&=~(DIO_BIT_MUSK<<copy_u8PinId);
    1184:	a1 e3       	ldi	r26, 0x31	; 49
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e1 e3       	ldi	r30, 0x31	; 49
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_enuSet_PinDirection+0x188>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	2a 95       	dec	r18
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <DIO_enuSet_PinDirection+0x184>
    11a4:	80 95       	com	r24
    11a6:	84 23       	and	r24, r20
    11a8:	8c 93       	st	X, r24
				DDRD|=(copy_u8PinValue<<copy_u8PinId);
    11aa:	a1 e3       	ldi	r26, 0x31	; 49
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e1 e3       	ldi	r30, 0x31	; 49
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	b9 01       	movw	r22, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_enuSet_PinDirection+0x1b2>
    11c6:	66 0f       	add	r22, r22
    11c8:	77 1f       	adc	r23, r23
    11ca:	8a 95       	dec	r24
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_enuSet_PinDirection+0x1ae>
    11ce:	cb 01       	movw	r24, r22
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState=ES_OK;
    11d4:	19 82       	std	Y+1, r1	; 0x01
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_enuSet_PinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11de:	26 96       	adiw	r28, 0x06	; 6
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <DIO_enuget_PinValue>:

ES_t DIO_enuget_PinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 *copy_pu8PinValue)

{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	27 97       	sbiw	r28, 0x07	; 7
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	8a 83       	std	Y+2, r24	; 0x02
    1206:	6b 83       	std	Y+3, r22	; 0x03
    1208:	5d 83       	std	Y+5, r21	; 0x05
    120a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu8PinValue==NULL){
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	09 f0       	breq	.+2      	; 0x121a <DIO_enuget_PinValue+0x2a>
    1218:	7d c0       	rjmp	.+250    	; 0x1314 <DIO_enuget_PinValue+0x124>
	if(copy_u8PortId <= DIO_PORTD && copy_u8PinId <= DIO_PIN7 )
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	08 f0       	brcs	.+2      	; 0x1222 <DIO_enuget_PinValue+0x32>
    1220:	76 c0       	rjmp	.+236    	; 0x130e <DIO_enuget_PinValue+0x11e>
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	88 30       	cpi	r24, 0x08	; 8
    1226:	08 f0       	brcs	.+2      	; 0x122a <DIO_enuget_PinValue+0x3a>
    1228:	72 c0       	rjmp	.+228    	; 0x130e <DIO_enuget_PinValue+0x11e>
		{
		  switch(copy_u8PortId)
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	3f 83       	std	Y+7, r19	; 0x07
    1232:	2e 83       	std	Y+6, r18	; 0x06
    1234:	4e 81       	ldd	r20, Y+6	; 0x06
    1236:	5f 81       	ldd	r21, Y+7	; 0x07
    1238:	41 30       	cpi	r20, 0x01	; 1
    123a:	51 05       	cpc	r21, r1
    123c:	59 f1       	breq	.+86     	; 0x1294 <DIO_enuget_PinValue+0xa4>
    123e:	8e 81       	ldd	r24, Y+6	; 0x06
    1240:	9f 81       	ldd	r25, Y+7	; 0x07
    1242:	82 30       	cpi	r24, 0x02	; 2
    1244:	91 05       	cpc	r25, r1
    1246:	34 f4       	brge	.+12     	; 0x1254 <DIO_enuget_PinValue+0x64>
    1248:	2e 81       	ldd	r18, Y+6	; 0x06
    124a:	3f 81       	ldd	r19, Y+7	; 0x07
    124c:	21 15       	cp	r18, r1
    124e:	31 05       	cpc	r19, r1
    1250:	69 f0       	breq	.+26     	; 0x126c <DIO_enuget_PinValue+0x7c>
    1252:	5b c0       	rjmp	.+182    	; 0x130a <DIO_enuget_PinValue+0x11a>
    1254:	4e 81       	ldd	r20, Y+6	; 0x06
    1256:	5f 81       	ldd	r21, Y+7	; 0x07
    1258:	42 30       	cpi	r20, 0x02	; 2
    125a:	51 05       	cpc	r21, r1
    125c:	79 f1       	breq	.+94     	; 0x12bc <DIO_enuget_PinValue+0xcc>
    125e:	8e 81       	ldd	r24, Y+6	; 0x06
    1260:	9f 81       	ldd	r25, Y+7	; 0x07
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	91 05       	cpc	r25, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <DIO_enuget_PinValue+0x7a>
    1268:	3d c0       	rjmp	.+122    	; 0x12e4 <DIO_enuget_PinValue+0xf4>
    126a:	4f c0       	rjmp	.+158    	; 0x130a <DIO_enuget_PinValue+0x11a>
		{
		 case(DIO_PORTA):
			*copy_pu8PinValue=((PINA>>copy_u8PinId)&DIO_BIT_MUSK);
    126c:	e9 e3       	ldi	r30, 0x39	; 57
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a9 01       	movw	r20, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_enuget_PinValue+0x94>
    1280:	55 95       	asr	r21
    1282:	47 95       	ror	r20
    1284:	8a 95       	dec	r24
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_enuget_PinValue+0x90>
    1288:	ca 01       	movw	r24, r20
    128a:	81 70       	andi	r24, 0x01	; 1
    128c:	ec 81       	ldd	r30, Y+4	; 0x04
    128e:	fd 81       	ldd	r31, Y+5	; 0x05
    1290:	80 83       	st	Z, r24
    1292:	3b c0       	rjmp	.+118    	; 0x130a <DIO_enuget_PinValue+0x11a>
		    break;
		 case(DIO_PORTB):
			*copy_pu8PinValue=((PINB>>copy_u8PinId)&DIO_BIT_MUSK);
    1294:	e6 e3       	ldi	r30, 0x36	; 54
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a9 01       	movw	r20, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_enuget_PinValue+0xbc>
    12a8:	55 95       	asr	r21
    12aa:	47 95       	ror	r20
    12ac:	8a 95       	dec	r24
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_enuget_PinValue+0xb8>
    12b0:	ca 01       	movw	r24, r20
    12b2:	81 70       	andi	r24, 0x01	; 1
    12b4:	ec 81       	ldd	r30, Y+4	; 0x04
    12b6:	fd 81       	ldd	r31, Y+5	; 0x05
    12b8:	80 83       	st	Z, r24
    12ba:	27 c0       	rjmp	.+78     	; 0x130a <DIO_enuget_PinValue+0x11a>
		    break;
		 case(DIO_PORTC):
			*copy_pu8PinValue=((PINC>>copy_u8PinId)&DIO_BIT_MUSK);
    12bc:	e3 e3       	ldi	r30, 0x33	; 51
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_enuget_PinValue+0xe4>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_enuget_PinValue+0xe0>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	ec 81       	ldd	r30, Y+4	; 0x04
    12de:	fd 81       	ldd	r31, Y+5	; 0x05
    12e0:	80 83       	st	Z, r24
    12e2:	13 c0       	rjmp	.+38     	; 0x130a <DIO_enuget_PinValue+0x11a>
			break;
		 case(DIO_PORTD):
			*copy_pu8PinValue=((PIND>>copy_u8PinId)&DIO_BIT_MUSK);
    12e4:	e0 e3       	ldi	r30, 0x30	; 48
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a9 01       	movw	r20, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO_enuget_PinValue+0x10c>
    12f8:	55 95       	asr	r21
    12fa:	47 95       	ror	r20
    12fc:	8a 95       	dec	r24
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO_enuget_PinValue+0x108>
    1300:	ca 01       	movw	r24, r20
    1302:	81 70       	andi	r24, 0x01	; 1
    1304:	ec 81       	ldd	r30, Y+4	; 0x04
    1306:	fd 81       	ldd	r31, Y+5	; 0x05
    1308:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState=ES_OK;
    130a:	19 82       	std	Y+1, r1	; 0x01
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <DIO_enuget_PinValue+0x128>
		}
	else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_enuget_PinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
}
    131a:	27 96       	adiw	r28, 0x07	; 7
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <DIO_enuToggle_PinValue>:
ES_t DIO_enuToggle_PinValue(u8 copy_u8PortId,u8 copy_u8PinId)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_enuToggle_PinValue+0x6>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <DIO_enuToggle_PinValue+0x8>
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	8a 83       	std	Y+2, r24	; 0x02
    133c:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId <= DIO_PORTD && copy_u8PinId <= DIO_PIN7 )
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	08 f0       	brcs	.+2      	; 0x134a <DIO_enuToggle_PinValue+0x1e>
    1348:	74 c0       	rjmp	.+232    	; 0x1432 <DIO_enuToggle_PinValue+0x106>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 30       	cpi	r24, 0x08	; 8
    134e:	08 f0       	brcs	.+2      	; 0x1352 <DIO_enuToggle_PinValue+0x26>
    1350:	70 c0       	rjmp	.+224    	; 0x1432 <DIO_enuToggle_PinValue+0x106>
	{
		switch(copy_u8PortId)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3d 83       	std	Y+5, r19	; 0x05
    135a:	2c 83       	std	Y+4, r18	; 0x04
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	49 f1       	breq	.+82     	; 0x13b8 <DIO_enuToggle_PinValue+0x8c>
    1366:	2c 81       	ldd	r18, Y+4	; 0x04
    1368:	3d 81       	ldd	r19, Y+5	; 0x05
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	2c f4       	brge	.+10     	; 0x137a <DIO_enuToggle_PinValue+0x4e>
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	61 f0       	breq	.+24     	; 0x1390 <DIO_enuToggle_PinValue+0x64>
    1378:	5a c0       	rjmp	.+180    	; 0x142e <DIO_enuToggle_PinValue+0x102>
    137a:	2c 81       	ldd	r18, Y+4	; 0x04
    137c:	3d 81       	ldd	r19, Y+5	; 0x05
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	71 f1       	breq	.+92     	; 0x13e0 <DIO_enuToggle_PinValue+0xb4>
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	91 05       	cpc	r25, r1
    138c:	e9 f1       	breq	.+122    	; 0x1408 <DIO_enuToggle_PinValue+0xdc>
    138e:	4f c0       	rjmp	.+158    	; 0x142e <DIO_enuToggle_PinValue+0x102>
		{
		case(DIO_PORTA):
		  PORTA^=(DIO_BIT_MUSK<<copy_u8PinId);
    1390:	ab e3       	ldi	r26, 0x3B	; 59
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	eb e3       	ldi	r30, 0x3B	; 59
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_enuToggle_PinValue+0x82>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_enuToggle_PinValue+0x7e>
    13b2:	84 27       	eor	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	3b c0       	rjmp	.+118    	; 0x142e <DIO_enuToggle_PinValue+0x102>
		  break;
		case(DIO_PORTB):
		 PORTB^=(DIO_BIT_MUSK<<copy_u8PinId);
    13b8:	a8 e3       	ldi	r26, 0x38	; 56
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e8 e3       	ldi	r30, 0x38	; 56
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_enuToggle_PinValue+0xaa>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_enuToggle_PinValue+0xa6>
    13da:	84 27       	eor	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	27 c0       	rjmp	.+78     	; 0x142e <DIO_enuToggle_PinValue+0x102>
		  break;
		case(DIO_PORTC):
		 PORTC^=(DIO_BIT_MUSK<<copy_u8PinId);
    13e0:	a5 e3       	ldi	r26, 0x35	; 53
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e5 e3       	ldi	r30, 0x35	; 53
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_enuToggle_PinValue+0xd2>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_enuToggle_PinValue+0xce>
    1402:	84 27       	eor	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	13 c0       	rjmp	.+38     	; 0x142e <DIO_enuToggle_PinValue+0x102>
		  break;
		case(DIO_PORTD):
		 PORTD^=(DIO_BIT_MUSK<<copy_u8PinId);
    1408:	a2 e3       	ldi	r26, 0x32	; 50
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e2 e3       	ldi	r30, 0x32	; 50
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_enuToggle_PinValue+0xfa>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_enuToggle_PinValue+0xf6>
    142a:	84 27       	eor	r24, r20
    142c:	8c 93       	st	X, r24
		  break;
		}
		Local_enuErrorState=ES_OK;
    142e:	19 82       	std	Y+1, r1	; 0x01
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_enuToggle_PinValue+0x10a>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    1432:	83 e0       	ldi	r24, 0x03	; 3
    1434:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <EXTI_enuInit>:


static volatile void (*PtoFunc[3])(void)={NULL , NULL , NULL};

ES_t EXTI_enuInit(EXTI_t *Copy_PStr_StatesArray)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	2c 97       	sbiw	r28, 0x0c	; 12
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState=ES_NOK;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_PStr_StatesArray != NULL)
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	09 f4       	brne	.+2      	; 0x146e <EXTI_enuInit+0x26>
    146c:	33 c1       	rjmp	.+614    	; 0x16d4 <EXTI_enuInit+0x28c>
	{
		u8 Local_u8Itel=0;
    146e:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Itel = 0 ; Local_u8Itel <3 ; Local_u8Itel++)
    1470:	19 82       	std	Y+1, r1	; 0x01
    1472:	2b c1       	rjmp	.+598    	; 0x16ca <EXTI_enuInit+0x282>
		{
			if(Copy_PStr_StatesArray[Local_u8Itel].EXTI_u8State == ENABLE)
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	9c 01       	movw	r18, r24
    147c:	22 0f       	add	r18, r18
    147e:	33 1f       	adc	r19, r19
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	fc 01       	movw	r30, r24
    1486:	e2 0f       	add	r30, r18
    1488:	f3 1f       	adc	r31, r19
    148a:	80 81       	ld	r24, Z
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	09 f0       	breq	.+2      	; 0x1492 <EXTI_enuInit+0x4a>
    1490:	19 c1       	rjmp	.+562    	; 0x16c4 <EXTI_enuInit+0x27c>
			{
				Local_u8ErrorState=ES_OK;
    1492:	1a 82       	std	Y+2, r1	; 0x02
				switch(Local_u8Itel)
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	3c 87       	std	Y+12, r19	; 0x0c
    149c:	2b 87       	std	Y+11, r18	; 0x0b
    149e:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <EXTI_enuInit+0x62>
    14a8:	72 c0       	rjmp	.+228    	; 0x158e <EXTI_enuInit+0x146>
    14aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    14ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <EXTI_enuInit+0x6e>
    14b4:	d3 c0       	rjmp	.+422    	; 0x165c <EXTI_enuInit+0x214>
    14b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <EXTI_enuInit+0x78>
    14be:	00 c1       	rjmp	.+512    	; 0x16c0 <EXTI_enuInit+0x278>
				{
				case 0:
					GICR |= (1<< GICR_INT0);
    14c0:	ab e5       	ldi	r26, 0x5B	; 91
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	eb e5       	ldi	r30, 0x5B	; 91
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	80 64       	ori	r24, 0x40	; 64
    14cc:	8c 93       	st	X, r24
					MCUCR &=~(3<<0);
    14ce:	a5 e5       	ldi	r26, 0x55	; 85
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e5 e5       	ldi	r30, 0x55	; 85
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8c 7f       	andi	r24, 0xFC	; 252
    14da:	8c 93       	st	X, r24
					switch(Copy_PStr_StatesArray[Local_u8Itel].EXTI_u8SenseLevel )
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9c 01       	movw	r18, r24
    14e4:	22 0f       	add	r18, r18
    14e6:	33 1f       	adc	r19, r19
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	fc 01       	movw	r30, r24
    14ee:	e2 0f       	add	r30, r18
    14f0:	f3 1f       	adc	r31, r19
    14f2:	81 81       	ldd	r24, Z+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3a 87       	std	Y+10, r19	; 0x0a
    14fa:	29 87       	std	Y+9, r18	; 0x09
    14fc:	89 85       	ldd	r24, Y+9	; 0x09
    14fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	91 05       	cpc	r25, r1
    1504:	f1 f0       	breq	.+60     	; 0x1542 <EXTI_enuInit+0xfa>
    1506:	29 85       	ldd	r18, Y+9	; 0x09
    1508:	3a 85       	ldd	r19, Y+10	; 0x0a
    150a:	23 30       	cpi	r18, 0x03	; 3
    150c:	31 05       	cpc	r19, r1
    150e:	34 f4       	brge	.+12     	; 0x151c <EXTI_enuInit+0xd4>
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	61 f0       	breq	.+24     	; 0x1532 <EXTI_enuInit+0xea>
    151a:	d4 c0       	rjmp	.+424    	; 0x16c4 <EXTI_enuInit+0x27c>
    151c:	29 85       	ldd	r18, Y+9	; 0x09
    151e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1520:	23 30       	cpi	r18, 0x03	; 3
    1522:	31 05       	cpc	r19, r1
    1524:	e9 f0       	breq	.+58     	; 0x1560 <EXTI_enuInit+0x118>
    1526:	89 85       	ldd	r24, Y+9	; 0x09
    1528:	9a 85       	ldd	r25, Y+10	; 0x0a
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	91 05       	cpc	r25, r1
    152e:	39 f1       	breq	.+78     	; 0x157e <EXTI_enuInit+0x136>
    1530:	c9 c0       	rjmp	.+402    	; 0x16c4 <EXTI_enuInit+0x27c>
					{
					case FALLING_EDGE:
						MCUCR |= (1<< MCUCR_ISC01);
    1532:	a5 e5       	ldi	r26, 0x55	; 85
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e5 e5       	ldi	r30, 0x55	; 85
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	82 60       	ori	r24, 0x02	; 2
    153e:	8c 93       	st	X, r24
    1540:	c1 c0       	rjmp	.+386    	; 0x16c4 <EXTI_enuInit+0x27c>
						break;
					case RISING_EDGE:
						MCUCR |= (1<< MCUCR_ISC01);
    1542:	a5 e5       	ldi	r26, 0x55	; 85
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e5       	ldi	r30, 0x55	; 85
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	82 60       	ori	r24, 0x02	; 2
    154e:	8c 93       	st	X, r24
						MCUCR |= (1<< MCUCR_ISC00);
    1550:	a5 e5       	ldi	r26, 0x55	; 85
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e5 e5       	ldi	r30, 0x55	; 85
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	81 60       	ori	r24, 0x01	; 1
    155c:	8c 93       	st	X, r24
    155e:	b2 c0       	rjmp	.+356    	; 0x16c4 <EXTI_enuInit+0x27c>
						break;
					case ONCHANGE:
						MCUCR &=~(1<< MCUCR_ISC01);
    1560:	a5 e5       	ldi	r26, 0x55	; 85
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e5       	ldi	r30, 0x55	; 85
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8d 7f       	andi	r24, 0xFD	; 253
    156c:	8c 93       	st	X, r24
						MCUCR |= (1<< MCUCR_ISC00);
    156e:	a5 e5       	ldi	r26, 0x55	; 85
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e5 e5       	ldi	r30, 0x55	; 85
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	81 60       	ori	r24, 0x01	; 1
    157a:	8c 93       	st	X, r24
    157c:	a3 c0       	rjmp	.+326    	; 0x16c4 <EXTI_enuInit+0x27c>
						break;
					case LOW_LEVEL:
						MCUCR &=~(1<< MCUCR_ISC01);
    157e:	a5 e5       	ldi	r26, 0x55	; 85
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 e5       	ldi	r30, 0x55	; 85
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8d 7f       	andi	r24, 0xFD	; 253
    158a:	8c 93       	st	X, r24
    158c:	9b c0       	rjmp	.+310    	; 0x16c4 <EXTI_enuInit+0x27c>
						break;
					}
					break;
					case 1:
						GICR |= (1<< GICR_INT1);
    158e:	ab e5       	ldi	r26, 0x5B	; 91
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	eb e5       	ldi	r30, 0x5B	; 91
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 68       	ori	r24, 0x80	; 128
    159a:	8c 93       	st	X, r24
						MCUCR &=~(3<<0);
    159c:	a5 e5       	ldi	r26, 0x55	; 85
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e5 e5       	ldi	r30, 0x55	; 85
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	8c 7f       	andi	r24, 0xFC	; 252
    15a8:	8c 93       	st	X, r24
						switch(Copy_PStr_StatesArray[Local_u8Itel].EXTI_u8SenseLevel )
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9c 01       	movw	r18, r24
    15b2:	22 0f       	add	r18, r18
    15b4:	33 1f       	adc	r19, r19
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	fc 01       	movw	r30, r24
    15bc:	e2 0f       	add	r30, r18
    15be:	f3 1f       	adc	r31, r19
    15c0:	81 81       	ldd	r24, Z+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	38 87       	std	Y+8, r19	; 0x08
    15c8:	2f 83       	std	Y+7, r18	; 0x07
    15ca:	8f 81       	ldd	r24, Y+7	; 0x07
    15cc:	98 85       	ldd	r25, Y+8	; 0x08
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	91 05       	cpc	r25, r1
    15d2:	f1 f0       	breq	.+60     	; 0x1610 <EXTI_enuInit+0x1c8>
    15d4:	2f 81       	ldd	r18, Y+7	; 0x07
    15d6:	38 85       	ldd	r19, Y+8	; 0x08
    15d8:	23 30       	cpi	r18, 0x03	; 3
    15da:	31 05       	cpc	r19, r1
    15dc:	34 f4       	brge	.+12     	; 0x15ea <EXTI_enuInit+0x1a2>
    15de:	8f 81       	ldd	r24, Y+7	; 0x07
    15e0:	98 85       	ldd	r25, Y+8	; 0x08
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	91 05       	cpc	r25, r1
    15e6:	61 f0       	breq	.+24     	; 0x1600 <EXTI_enuInit+0x1b8>
    15e8:	6d c0       	rjmp	.+218    	; 0x16c4 <EXTI_enuInit+0x27c>
    15ea:	2f 81       	ldd	r18, Y+7	; 0x07
    15ec:	38 85       	ldd	r19, Y+8	; 0x08
    15ee:	23 30       	cpi	r18, 0x03	; 3
    15f0:	31 05       	cpc	r19, r1
    15f2:	e9 f0       	breq	.+58     	; 0x162e <EXTI_enuInit+0x1e6>
    15f4:	8f 81       	ldd	r24, Y+7	; 0x07
    15f6:	98 85       	ldd	r25, Y+8	; 0x08
    15f8:	84 30       	cpi	r24, 0x04	; 4
    15fa:	91 05       	cpc	r25, r1
    15fc:	39 f1       	breq	.+78     	; 0x164c <EXTI_enuInit+0x204>
    15fe:	62 c0       	rjmp	.+196    	; 0x16c4 <EXTI_enuInit+0x27c>
						{
						case FALLING_EDGE:
							MCUCR |= (1<< MCUCR_ISC11);
    1600:	a5 e5       	ldi	r26, 0x55	; 85
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e5 e5       	ldi	r30, 0x55	; 85
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	88 60       	ori	r24, 0x08	; 8
    160c:	8c 93       	st	X, r24
    160e:	5a c0       	rjmp	.+180    	; 0x16c4 <EXTI_enuInit+0x27c>
							break;
						case RISING_EDGE:
							MCUCR |= (1<< MCUCR_ISC11);
    1610:	a5 e5       	ldi	r26, 0x55	; 85
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e5 e5       	ldi	r30, 0x55	; 85
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	88 60       	ori	r24, 0x08	; 8
    161c:	8c 93       	st	X, r24
							MCUCR |= (1<< MCUCR_ISC10);
    161e:	a5 e5       	ldi	r26, 0x55	; 85
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e5 e5       	ldi	r30, 0x55	; 85
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	84 60       	ori	r24, 0x04	; 4
    162a:	8c 93       	st	X, r24
    162c:	4b c0       	rjmp	.+150    	; 0x16c4 <EXTI_enuInit+0x27c>
							break;
						case ONCHANGE:
							MCUCR &=~(1<< MCUCR_ISC11);
    162e:	a5 e5       	ldi	r26, 0x55	; 85
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e5 e5       	ldi	r30, 0x55	; 85
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	87 7f       	andi	r24, 0xF7	; 247
    163a:	8c 93       	st	X, r24
							MCUCR |= (1<< MCUCR_ISC10);
    163c:	a5 e5       	ldi	r26, 0x55	; 85
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e5 e5       	ldi	r30, 0x55	; 85
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	84 60       	ori	r24, 0x04	; 4
    1648:	8c 93       	st	X, r24
    164a:	3c c0       	rjmp	.+120    	; 0x16c4 <EXTI_enuInit+0x27c>
							break;
						case LOW_LEVEL:
							MCUCR &=~(1<< MCUCR_ISC11);
    164c:	a5 e5       	ldi	r26, 0x55	; 85
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e5 e5       	ldi	r30, 0x55	; 85
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	87 7f       	andi	r24, 0xF7	; 247
    1658:	8c 93       	st	X, r24
    165a:	34 c0       	rjmp	.+104    	; 0x16c4 <EXTI_enuInit+0x27c>
							break;
						}
						break;
						case 2:
							GICR |= (1<< GICR_INT2);
    165c:	ab e5       	ldi	r26, 0x5B	; 91
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	eb e5       	ldi	r30, 0x5B	; 91
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 62       	ori	r24, 0x20	; 32
    1668:	8c 93       	st	X, r24
							switch(Copy_PStr_StatesArray[Local_u8Itel].EXTI_u8SenseLevel )
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9c 01       	movw	r18, r24
    1672:	22 0f       	add	r18, r18
    1674:	33 1f       	adc	r19, r19
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	fc 01       	movw	r30, r24
    167c:	e2 0f       	add	r30, r18
    167e:	f3 1f       	adc	r31, r19
    1680:	81 81       	ldd	r24, Z+1	; 0x01
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	3e 83       	std	Y+6, r19	; 0x06
    1688:	2d 83       	std	Y+5, r18	; 0x05
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	91 05       	cpc	r25, r1
    1692:	31 f0       	breq	.+12     	; 0x16a0 <EXTI_enuInit+0x258>
    1694:	2d 81       	ldd	r18, Y+5	; 0x05
    1696:	3e 81       	ldd	r19, Y+6	; 0x06
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	49 f0       	breq	.+18     	; 0x16b0 <EXTI_enuInit+0x268>
    169e:	12 c0       	rjmp	.+36     	; 0x16c4 <EXTI_enuInit+0x27c>
							{
							case FALLING_EDGE:
								MCUCSR &=~(1<<MCUCSR_ISC2);
    16a0:	a4 e5       	ldi	r26, 0x54	; 84
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e4 e5       	ldi	r30, 0x54	; 84
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	8f 7b       	andi	r24, 0xBF	; 191
    16ac:	8c 93       	st	X, r24
    16ae:	0a c0       	rjmp	.+20     	; 0x16c4 <EXTI_enuInit+0x27c>
								break;
							case RISING_EDGE:
								MCUCSR |= (1<< MCUCSR_ISC2);
    16b0:	a4 e5       	ldi	r26, 0x54	; 84
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e4 e5       	ldi	r30, 0x54	; 84
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	80 64       	ori	r24, 0x40	; 64
    16bc:	8c 93       	st	X, r24
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <EXTI_enuInit+0x27c>
								break;
							}
							break;
							default:
								Local_u8ErrorState=ES_OUT_OF_RANGE;
    16c0:	83 e0       	ldi	r24, 0x03	; 3
    16c2:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 Local_u8ErrorState=ES_NOK;
	if(Copy_PStr_StatesArray != NULL)
	{
		u8 Local_u8Itel=0;
		for(Local_u8Itel = 0 ; Local_u8Itel <3 ; Local_u8Itel++)
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	8f 5f       	subi	r24, 0xFF	; 255
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	08 f4       	brcc	.+2      	; 0x16d2 <EXTI_enuInit+0x28a>
    16d0:	d1 ce       	rjmp	.-606    	; 0x1474 <EXTI_enuInit+0x2c>
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <EXTI_enuInit+0x290>
		}

	}
	else
	{
		Local_u8ErrorState=ES_NULL_POINTER;
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16da:	2c 96       	adiw	r28, 0x0c	; 12
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <EXTI_enuChangeSense>:
ES_t EXTI_enuChangeSense(u8 Copy_u8Interrupt_ID,u8 Copy_u8SenseLevel)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	29 97       	sbiw	r28, 0x09	; 9
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	8a 83       	std	Y+2, r24	; 0x02
    1702:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=ES_NOK;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Interrupt_ID < 3)
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	83 30       	cpi	r24, 0x03	; 3
    170c:	08 f0       	brcs	.+2      	; 0x1710 <EXTI_enuChangeSense+0x24>
    170e:	e6 c0       	rjmp	.+460    	; 0x18dc <EXTI_enuChangeSense+0x1f0>
	{
		Local_u8ErrorState=ES_OK;
    1710:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_u8Interrupt_ID == 0)
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	88 23       	and	r24, r24
    1716:	09 f0       	breq	.+2      	; 0x171a <EXTI_enuChangeSense+0x2e>
    1718:	58 c0       	rjmp	.+176    	; 0x17ca <EXTI_enuChangeSense+0xde>
		{

			GICR=(1<< GICR_INT0);
    171a:	eb e5       	ldi	r30, 0x5B	; 91
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 e4       	ldi	r24, 0x40	; 64
    1720:	80 83       	st	Z, r24
			MCUCR &=~(3<<0);
    1722:	a5 e5       	ldi	r26, 0x55	; 85
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e5 e5       	ldi	r30, 0x55	; 85
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	8c 7f       	andi	r24, 0xFC	; 252
    172e:	8c 93       	st	X, r24
			switch(Copy_u8SenseLevel )
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	39 87       	std	Y+9, r19	; 0x09
    1738:	28 87       	std	Y+8, r18	; 0x08
    173a:	88 85       	ldd	r24, Y+8	; 0x08
    173c:	99 85       	ldd	r25, Y+9	; 0x09
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	91 05       	cpc	r25, r1
    1742:	f1 f0       	breq	.+60     	; 0x1780 <EXTI_enuChangeSense+0x94>
    1744:	28 85       	ldd	r18, Y+8	; 0x08
    1746:	39 85       	ldd	r19, Y+9	; 0x09
    1748:	23 30       	cpi	r18, 0x03	; 3
    174a:	31 05       	cpc	r19, r1
    174c:	34 f4       	brge	.+12     	; 0x175a <EXTI_enuChangeSense+0x6e>
    174e:	88 85       	ldd	r24, Y+8	; 0x08
    1750:	99 85       	ldd	r25, Y+9	; 0x09
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	91 05       	cpc	r25, r1
    1756:	61 f0       	breq	.+24     	; 0x1770 <EXTI_enuChangeSense+0x84>
    1758:	38 c0       	rjmp	.+112    	; 0x17ca <EXTI_enuChangeSense+0xde>
    175a:	28 85       	ldd	r18, Y+8	; 0x08
    175c:	39 85       	ldd	r19, Y+9	; 0x09
    175e:	23 30       	cpi	r18, 0x03	; 3
    1760:	31 05       	cpc	r19, r1
    1762:	e9 f0       	breq	.+58     	; 0x179e <EXTI_enuChangeSense+0xb2>
    1764:	88 85       	ldd	r24, Y+8	; 0x08
    1766:	99 85       	ldd	r25, Y+9	; 0x09
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	91 05       	cpc	r25, r1
    176c:	39 f1       	breq	.+78     	; 0x17bc <EXTI_enuChangeSense+0xd0>
    176e:	2d c0       	rjmp	.+90     	; 0x17ca <EXTI_enuChangeSense+0xde>
			{
			case FALLING_EDGE:
				MCUCR |= (1<< MCUCR_ISC01);
    1770:	a5 e5       	ldi	r26, 0x55	; 85
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e5 e5       	ldi	r30, 0x55	; 85
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	82 60       	ori	r24, 0x02	; 2
    177c:	8c 93       	st	X, r24
    177e:	25 c0       	rjmp	.+74     	; 0x17ca <EXTI_enuChangeSense+0xde>
				break;
			case RISING_EDGE:
				MCUCR |= (1<< MCUCR_ISC01);
    1780:	a5 e5       	ldi	r26, 0x55	; 85
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e5 e5       	ldi	r30, 0x55	; 85
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	82 60       	ori	r24, 0x02	; 2
    178c:	8c 93       	st	X, r24
				MCUCR |= (1<< MCUCR_ISC00);
    178e:	a5 e5       	ldi	r26, 0x55	; 85
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e5 e5       	ldi	r30, 0x55	; 85
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	81 60       	ori	r24, 0x01	; 1
    179a:	8c 93       	st	X, r24
    179c:	16 c0       	rjmp	.+44     	; 0x17ca <EXTI_enuChangeSense+0xde>
				break;
			case ONCHANGE:
				MCUCR &=~(1<< MCUCR_ISC01);
    179e:	a5 e5       	ldi	r26, 0x55	; 85
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e5 e5       	ldi	r30, 0x55	; 85
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8d 7f       	andi	r24, 0xFD	; 253
    17aa:	8c 93       	st	X, r24
				MCUCR |= (1<< MCUCR_ISC00);
    17ac:	a5 e5       	ldi	r26, 0x55	; 85
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e5 e5       	ldi	r30, 0x55	; 85
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	81 60       	ori	r24, 0x01	; 1
    17b8:	8c 93       	st	X, r24
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <EXTI_enuChangeSense+0xde>
				break;
			case LOW_LEVEL:
				MCUCR &=~(1<< MCUCR_ISC01);
    17bc:	a5 e5       	ldi	r26, 0x55	; 85
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e5 e5       	ldi	r30, 0x55	; 85
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8d 7f       	andi	r24, 0xFD	; 253
    17c8:	8c 93       	st	X, r24
				break;

			}
		}
		if(Copy_u8Interrupt_ID == 1)
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <EXTI_enuChangeSense+0xe6>
    17d0:	5b c0       	rjmp	.+182    	; 0x1888 <EXTI_enuChangeSense+0x19c>
		{

			GICR |= (1<< GICR_INT1);
    17d2:	ab e5       	ldi	r26, 0x5B	; 91
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	eb e5       	ldi	r30, 0x5B	; 91
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	80 68       	ori	r24, 0x80	; 128
    17de:	8c 93       	st	X, r24
			MCUCR &=~(3<<0);
    17e0:	a5 e5       	ldi	r26, 0x55	; 85
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e5 e5       	ldi	r30, 0x55	; 85
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8c 7f       	andi	r24, 0xFC	; 252
    17ec:	8c 93       	st	X, r24
			switch(Copy_u8SenseLevel )
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	3f 83       	std	Y+7, r19	; 0x07
    17f6:	2e 83       	std	Y+6, r18	; 0x06
    17f8:	8e 81       	ldd	r24, Y+6	; 0x06
    17fa:	9f 81       	ldd	r25, Y+7	; 0x07
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	91 05       	cpc	r25, r1
    1800:	f1 f0       	breq	.+60     	; 0x183e <EXTI_enuChangeSense+0x152>
    1802:	2e 81       	ldd	r18, Y+6	; 0x06
    1804:	3f 81       	ldd	r19, Y+7	; 0x07
    1806:	23 30       	cpi	r18, 0x03	; 3
    1808:	31 05       	cpc	r19, r1
    180a:	34 f4       	brge	.+12     	; 0x1818 <EXTI_enuChangeSense+0x12c>
    180c:	8e 81       	ldd	r24, Y+6	; 0x06
    180e:	9f 81       	ldd	r25, Y+7	; 0x07
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	91 05       	cpc	r25, r1
    1814:	61 f0       	breq	.+24     	; 0x182e <EXTI_enuChangeSense+0x142>
    1816:	38 c0       	rjmp	.+112    	; 0x1888 <EXTI_enuChangeSense+0x19c>
    1818:	2e 81       	ldd	r18, Y+6	; 0x06
    181a:	3f 81       	ldd	r19, Y+7	; 0x07
    181c:	23 30       	cpi	r18, 0x03	; 3
    181e:	31 05       	cpc	r19, r1
    1820:	e9 f0       	breq	.+58     	; 0x185c <EXTI_enuChangeSense+0x170>
    1822:	8e 81       	ldd	r24, Y+6	; 0x06
    1824:	9f 81       	ldd	r25, Y+7	; 0x07
    1826:	84 30       	cpi	r24, 0x04	; 4
    1828:	91 05       	cpc	r25, r1
    182a:	39 f1       	breq	.+78     	; 0x187a <EXTI_enuChangeSense+0x18e>
    182c:	2d c0       	rjmp	.+90     	; 0x1888 <EXTI_enuChangeSense+0x19c>
			{
			case FALLING_EDGE:
				MCUCR |= (1<< MCUCR_ISC11);
    182e:	a5 e5       	ldi	r26, 0x55	; 85
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e5       	ldi	r30, 0x55	; 85
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	88 60       	ori	r24, 0x08	; 8
    183a:	8c 93       	st	X, r24
    183c:	25 c0       	rjmp	.+74     	; 0x1888 <EXTI_enuChangeSense+0x19c>
				break;
			case RISING_EDGE:
				MCUCR |= (1<< MCUCR_ISC11);
    183e:	a5 e5       	ldi	r26, 0x55	; 85
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e5 e5       	ldi	r30, 0x55	; 85
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	88 60       	ori	r24, 0x08	; 8
    184a:	8c 93       	st	X, r24
				MCUCR |= (1<< MCUCR_ISC10);
    184c:	a5 e5       	ldi	r26, 0x55	; 85
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e5 e5       	ldi	r30, 0x55	; 85
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	84 60       	ori	r24, 0x04	; 4
    1858:	8c 93       	st	X, r24
    185a:	16 c0       	rjmp	.+44     	; 0x1888 <EXTI_enuChangeSense+0x19c>
				break;
			case ONCHANGE:
				MCUCR &=~(1<< MCUCR_ISC11);
    185c:	a5 e5       	ldi	r26, 0x55	; 85
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e5 e5       	ldi	r30, 0x55	; 85
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	87 7f       	andi	r24, 0xF7	; 247
    1868:	8c 93       	st	X, r24
				MCUCR |= (1<< MCUCR_ISC10);
    186a:	a5 e5       	ldi	r26, 0x55	; 85
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e5 e5       	ldi	r30, 0x55	; 85
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	84 60       	ori	r24, 0x04	; 4
    1876:	8c 93       	st	X, r24
    1878:	07 c0       	rjmp	.+14     	; 0x1888 <EXTI_enuChangeSense+0x19c>
				break;
			case LOW_LEVEL:
				MCUCR &=~(1<< MCUCR_ISC11);
    187a:	a5 e5       	ldi	r26, 0x55	; 85
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e5 e5       	ldi	r30, 0x55	; 85
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	87 7f       	andi	r24, 0xF7	; 247
    1886:	8c 93       	st	X, r24
				break;
			}

		}

		if(Copy_u8Interrupt_ID == 2)
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	82 30       	cpi	r24, 0x02	; 2
    188c:	49 f5       	brne	.+82     	; 0x18e0 <EXTI_enuChangeSense+0x1f4>
		{

			GICR |= (1<< GICR_INT2);
    188e:	ab e5       	ldi	r26, 0x5B	; 91
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	eb e5       	ldi	r30, 0x5B	; 91
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	80 62       	ori	r24, 0x20	; 32
    189a:	8c 93       	st	X, r24
			switch(Copy_u8SenseLevel )
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3d 83       	std	Y+5, r19	; 0x05
    18a4:	2c 83       	std	Y+4, r18	; 0x04
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	9d 81       	ldd	r25, Y+5	; 0x05
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	91 05       	cpc	r25, r1
    18ae:	31 f0       	breq	.+12     	; 0x18bc <EXTI_enuChangeSense+0x1d0>
    18b0:	2c 81       	ldd	r18, Y+4	; 0x04
    18b2:	3d 81       	ldd	r19, Y+5	; 0x05
    18b4:	22 30       	cpi	r18, 0x02	; 2
    18b6:	31 05       	cpc	r19, r1
    18b8:	49 f0       	breq	.+18     	; 0x18cc <EXTI_enuChangeSense+0x1e0>
    18ba:	12 c0       	rjmp	.+36     	; 0x18e0 <EXTI_enuChangeSense+0x1f4>
			{
			case FALLING_EDGE:
				MCUCSR &=~(1<<MCUCSR_ISC2);
    18bc:	a4 e5       	ldi	r26, 0x54	; 84
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e4 e5       	ldi	r30, 0x54	; 84
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	8f 7b       	andi	r24, 0xBF	; 191
    18c8:	8c 93       	st	X, r24
    18ca:	0a c0       	rjmp	.+20     	; 0x18e0 <EXTI_enuChangeSense+0x1f4>
				break;
			case RISING_EDGE:
				MCUCSR |= (1<< MCUCSR_ISC2);
    18cc:	a4 e5       	ldi	r26, 0x54	; 84
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e4 e5       	ldi	r30, 0x54	; 84
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	80 64       	ori	r24, 0x40	; 64
    18d8:	8c 93       	st	X, r24
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <EXTI_enuChangeSense+0x1f4>
		}
	}

	else
	{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
    18dc:	83 e0       	ldi	r24, 0x03	; 3
    18de:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e2:	29 96       	adiw	r28, 0x09	; 9
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <EXTI_enuEnable>:
ES_t EXTI_enuEnable(u8 Copy_u8Interrupt_ID)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <EXTI_enuEnable+0x6>
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <EXTI_enuEnable+0x8>
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=ES_NOK;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Interrupt_ID)
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3c 83       	std	Y+4, r19	; 0x04
    190e:	2b 83       	std	Y+3, r18	; 0x03
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	89 f0       	breq	.+34     	; 0x193c <EXTI_enuEnable+0x48>
    191a:	2b 81       	ldd	r18, Y+3	; 0x03
    191c:	3c 81       	ldd	r19, Y+4	; 0x04
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	a1 f0       	breq	.+40     	; 0x194c <EXTI_enuEnable+0x58>
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	c1 f4       	brne	.+48     	; 0x195c <EXTI_enuEnable+0x68>
	{
	Local_u8ErrorState = ES_OK;
	case 0:
		GICR |=(1<<GICR_INT0);
    192c:	ab e5       	ldi	r26, 0x5B	; 91
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	eb e5       	ldi	r30, 0x5B	; 91
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 64       	ori	r24, 0x40	; 64
    1938:	8c 93       	st	X, r24
    193a:	12 c0       	rjmp	.+36     	; 0x1960 <EXTI_enuEnable+0x6c>
		break;
	case 1:
		GICR |=(1<<GICR_INT1);
    193c:	ab e5       	ldi	r26, 0x5B	; 91
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	eb e5       	ldi	r30, 0x5B	; 91
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 68       	ori	r24, 0x80	; 128
    1948:	8c 93       	st	X, r24
    194a:	0a c0       	rjmp	.+20     	; 0x1960 <EXTI_enuEnable+0x6c>
		break;
	case 2:
		GICR |=(1<<GICR_INT2);
    194c:	ab e5       	ldi	r26, 0x5B	; 91
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	eb e5       	ldi	r30, 0x5B	; 91
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	80 62       	ori	r24, 0x20	; 32
    1958:	8c 93       	st	X, r24
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <EXTI_enuEnable+0x6c>
		break;
	default:
		Local_u8ErrorState=ES_OUT_OF_RANGE;
    195c:	83 e0       	ldi	r24, 0x03	; 3
    195e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}


	return Local_u8ErrorState;
    1960:	89 81       	ldd	r24, Y+1	; 0x01
}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <EXTI_enuDisable>:
ES_t EXTI_enuDisable(u8 Copy_u8Interrupt_ID)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	00 d0       	rcall	.+0      	; 0x1976 <EXTI_enuDisable+0x6>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <EXTI_enuDisable+0x8>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=ES_NOK;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Interrupt_ID)
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	3c 83       	std	Y+4, r19	; 0x04
    198a:	2b 83       	std	Y+3, r18	; 0x03
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	91 05       	cpc	r25, r1
    1994:	89 f0       	breq	.+34     	; 0x19b8 <EXTI_enuDisable+0x48>
    1996:	2b 81       	ldd	r18, Y+3	; 0x03
    1998:	3c 81       	ldd	r19, Y+4	; 0x04
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	a1 f0       	breq	.+40     	; 0x19c8 <EXTI_enuDisable+0x58>
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	c1 f4       	brne	.+48     	; 0x19d8 <EXTI_enuDisable+0x68>
	{
	Local_u8ErrorState = ES_OK;
	case 0:
		GICR &= ~(1<<GICR_INT0);
    19a8:	ab e5       	ldi	r26, 0x5B	; 91
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb e5       	ldi	r30, 0x5B	; 91
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 7b       	andi	r24, 0xBF	; 191
    19b4:	8c 93       	st	X, r24
    19b6:	12 c0       	rjmp	.+36     	; 0x19dc <EXTI_enuDisable+0x6c>
		break;
	case 1:
		GICR &= ~(1<<GICR_INT1);
    19b8:	ab e5       	ldi	r26, 0x5B	; 91
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	eb e5       	ldi	r30, 0x5B	; 91
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8f 77       	andi	r24, 0x7F	; 127
    19c4:	8c 93       	st	X, r24
    19c6:	0a c0       	rjmp	.+20     	; 0x19dc <EXTI_enuDisable+0x6c>
		break;
	case 2:
		GICR &= ~(1<<GICR_INT2);
    19c8:	ab e5       	ldi	r26, 0x5B	; 91
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	eb e5       	ldi	r30, 0x5B	; 91
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	8f 7d       	andi	r24, 0xDF	; 223
    19d4:	8c 93       	st	X, r24
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <EXTI_enuDisable+0x6c>
		break;
	default:
		Local_u8ErrorState=ES_OUT_OF_RANGE;
    19d8:	83 e0       	ldi	r24, 0x03	; 3
    19da:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return Local_u8ErrorState;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <EXTI_enuCall_Back>:
ES_t EXTI_enuCall_Back(void (*Copy_PtoFunAPP)(void *),u8 Copy_u8Interrupt_ID)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <EXTI_enuCall_Back+0x6>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <EXTI_enuCall_Back+0x8>
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	9b 83       	std	Y+3, r25	; 0x03
    19fa:	8a 83       	std	Y+2, r24	; 0x02
    19fc:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=ES_NOK;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PtoFunAPP != NULL)
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	9b 81       	ldd	r25, Y+3	; 0x03
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	a1 f0       	breq	.+40     	; 0x1a32 <EXTI_enuCall_Back+0x46>
	{
		if(Copy_u8Interrupt_ID<3)
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	83 30       	cpi	r24, 0x03	; 3
    1a0e:	70 f4       	brcc	.+28     	; 0x1a2c <EXTI_enuCall_Back+0x40>
		{
			Local_u8ErrorState = ES_OK;
    1a10:	19 82       	std	Y+1, r1	; 0x01

			PtoFunc[Copy_u8Interrupt_ID] =  Copy_PtoFunAPP;
    1a12:	8c 81       	ldd	r24, Y+4	; 0x04
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	2a 81       	ldd	r18, Y+2	; 0x02
    1a1a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	fc 01       	movw	r30, r24
    1a22:	e6 53       	subi	r30, 0x36	; 54
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	31 83       	std	Z+1, r19	; 0x01
    1a28:	20 83       	st	Z, r18
    1a2a:	05 c0       	rjmp	.+10     	; 0x1a36 <EXTI_enuCall_Back+0x4a>
		}
		else
		{
			Local_u8ErrorState = ES_OUT_OF_RANGE;
    1a2c:	83 e0       	ldi	r24, 0x03	; 3
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <EXTI_enuCall_Back+0x4a>
		}
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <__vector_1>:
ISR(INT0)
{
    1a46:	1f 92       	push	r1
    1a48:	0f 92       	push	r0
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	0f 92       	push	r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	2f 93       	push	r18
    1a52:	3f 93       	push	r19
    1a54:	4f 93       	push	r20
    1a56:	5f 93       	push	r21
    1a58:	6f 93       	push	r22
    1a5a:	7f 93       	push	r23
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	af 93       	push	r26
    1a62:	bf 93       	push	r27
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	if(PtoFunc[0] != NULL)
    1a70:	80 91 ca 00 	lds	r24, 0x00CA
    1a74:	90 91 cb 00 	lds	r25, 0x00CB
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	29 f0       	breq	.+10     	; 0x1a86 <__vector_1+0x40>
	{
		PtoFunc[0]();
    1a7c:	e0 91 ca 00 	lds	r30, 0x00CA
    1a80:	f0 91 cb 00 	lds	r31, 0x00CB
    1a84:	09 95       	icall
	}
}
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	ff 91       	pop	r31
    1a8c:	ef 91       	pop	r30
    1a8e:	bf 91       	pop	r27
    1a90:	af 91       	pop	r26
    1a92:	9f 91       	pop	r25
    1a94:	8f 91       	pop	r24
    1a96:	7f 91       	pop	r23
    1a98:	6f 91       	pop	r22
    1a9a:	5f 91       	pop	r21
    1a9c:	4f 91       	pop	r20
    1a9e:	3f 91       	pop	r19
    1aa0:	2f 91       	pop	r18
    1aa2:	0f 90       	pop	r0
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	0f 90       	pop	r0
    1aa8:	1f 90       	pop	r1
    1aaa:	18 95       	reti

00001aac <__vector_2>:
ISR(INT1)
{
    1aac:	1f 92       	push	r1
    1aae:	0f 92       	push	r0
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	0f 92       	push	r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	2f 93       	push	r18
    1ab8:	3f 93       	push	r19
    1aba:	4f 93       	push	r20
    1abc:	5f 93       	push	r21
    1abe:	6f 93       	push	r22
    1ac0:	7f 93       	push	r23
    1ac2:	8f 93       	push	r24
    1ac4:	9f 93       	push	r25
    1ac6:	af 93       	push	r26
    1ac8:	bf 93       	push	r27
    1aca:	ef 93       	push	r30
    1acc:	ff 93       	push	r31
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
	if(PtoFunc[1] != NULL)
    1ad6:	80 91 cc 00 	lds	r24, 0x00CC
    1ada:	90 91 cd 00 	lds	r25, 0x00CD
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	29 f0       	breq	.+10     	; 0x1aec <__vector_2+0x40>
	{
		PtoFunc[1]();
    1ae2:	e0 91 cc 00 	lds	r30, 0x00CC
    1ae6:	f0 91 cd 00 	lds	r31, 0x00CD
    1aea:	09 95       	icall
	}
}
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	ff 91       	pop	r31
    1af2:	ef 91       	pop	r30
    1af4:	bf 91       	pop	r27
    1af6:	af 91       	pop	r26
    1af8:	9f 91       	pop	r25
    1afa:	8f 91       	pop	r24
    1afc:	7f 91       	pop	r23
    1afe:	6f 91       	pop	r22
    1b00:	5f 91       	pop	r21
    1b02:	4f 91       	pop	r20
    1b04:	3f 91       	pop	r19
    1b06:	2f 91       	pop	r18
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	0f 90       	pop	r0
    1b0e:	1f 90       	pop	r1
    1b10:	18 95       	reti

00001b12 <__vector_3>:
ISR(INT2)
{
    1b12:	1f 92       	push	r1
    1b14:	0f 92       	push	r0
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	0f 92       	push	r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	2f 93       	push	r18
    1b1e:	3f 93       	push	r19
    1b20:	4f 93       	push	r20
    1b22:	5f 93       	push	r21
    1b24:	6f 93       	push	r22
    1b26:	7f 93       	push	r23
    1b28:	8f 93       	push	r24
    1b2a:	9f 93       	push	r25
    1b2c:	af 93       	push	r26
    1b2e:	bf 93       	push	r27
    1b30:	ef 93       	push	r30
    1b32:	ff 93       	push	r31
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
	if(PtoFunc[2] != NULL)
    1b3c:	80 91 ce 00 	lds	r24, 0x00CE
    1b40:	90 91 cf 00 	lds	r25, 0x00CF
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	29 f0       	breq	.+10     	; 0x1b52 <__vector_3+0x40>
	{
		PtoFunc[2]();
    1b48:	e0 91 ce 00 	lds	r30, 0x00CE
    1b4c:	f0 91 cf 00 	lds	r31, 0x00CF
    1b50:	09 95       	icall
	}

}
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	ff 91       	pop	r31
    1b58:	ef 91       	pop	r30
    1b5a:	bf 91       	pop	r27
    1b5c:	af 91       	pop	r26
    1b5e:	9f 91       	pop	r25
    1b60:	8f 91       	pop	r24
    1b62:	7f 91       	pop	r23
    1b64:	6f 91       	pop	r22
    1b66:	5f 91       	pop	r21
    1b68:	4f 91       	pop	r20
    1b6a:	3f 91       	pop	r19
    1b6c:	2f 91       	pop	r18
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0f 90       	pop	r0
    1b74:	1f 90       	pop	r1
    1b76:	18 95       	reti

00001b78 <GIE_enuEnable>:
#include "../LIBERARY/Error_State.h"
#include "GIE_priv.h"
#include "GIE_int.h"

ES_t GIE_enuEnable(void)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	0f 92       	push	r0
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState = ES_OK;
    1b82:	19 82       	std	Y+1, r1	; 0x01

	SREG |=(1<<SREG_I);
    1b84:	af e5       	ldi	r26, 0x5F	; 95
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	ef e5       	ldi	r30, 0x5F	; 95
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 68       	ori	r24, 0x80	; 128
    1b90:	8c 93       	st	X, r24
	return Local_u8ErrorState;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <GIE_enuDisable>:
ES_t GIE_enuDisable(void)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState = ES_OK;
    1ba6:	19 82       	std	Y+1, r1	; 0x01
	SREG &= ~(1<< SREG_I);
    1ba8:	af e5       	ldi	r26, 0x5F	; 95
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ef e5       	ldi	r30, 0x5F	; 95
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8f 77       	andi	r24, 0x7F	; 127
    1bb4:	8c 93       	st	X, r24
	return Local_u8ErrorState;
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <Keypad_enuInit>:

#include "Keypad_priv.h"
#include "Keypad_config.h"

ES_t Keypad_enuInit(void)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	27 97       	sbiw	r28, 0x07	; 7
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_NOK;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32ErrorCheck=0;
    1bd8:	1a 82       	std	Y+2, r1	; 0x02
    1bda:	1b 82       	std	Y+3, r1	; 0x03
    1bdc:	1c 82       	std	Y+4, r1	; 0x04
    1bde:	1d 82       	std	Y+5, r1	; 0x05
	Local_u32ErrorCheck=(DIO_enuSet_PinDirection(KPD_C1_PORT,KPD_C1_PIN, DIO_u8INPUT)<<2);
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	aa 27       	eor	r26, r26
    1bf8:	97 fd       	sbrc	r25, 7
    1bfa:	a0 95       	com	r26
    1bfc:	ba 2f       	mov	r27, r26
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
    1c00:	9b 83       	std	Y+3, r25	; 0x03
    1c02:	ac 83       	std	Y+4, r26	; 0x04
    1c04:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinDirection(KPD_C2_PORT,KPD_C2_PIN, DIO_u8INPUT)<<4);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	61 e0       	ldi	r22, 0x01	; 1
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    1c10:	88 2f       	mov	r24, r24
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	82 95       	swap	r24
    1c16:	92 95       	swap	r25
    1c18:	90 7f       	andi	r25, 0xF0	; 240
    1c1a:	98 27       	eor	r25, r24
    1c1c:	80 7f       	andi	r24, 0xF0	; 240
    1c1e:	98 27       	eor	r25, r24
    1c20:	9c 01       	movw	r18, r24
    1c22:	44 27       	eor	r20, r20
    1c24:	37 fd       	sbrc	r19, 7
    1c26:	40 95       	com	r20
    1c28:	54 2f       	mov	r21, r20
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2e:	ac 81       	ldd	r26, Y+4	; 0x04
    1c30:	bd 81       	ldd	r27, Y+5	; 0x05
    1c32:	82 2b       	or	r24, r18
    1c34:	93 2b       	or	r25, r19
    1c36:	a4 2b       	or	r26, r20
    1c38:	b5 2b       	or	r27, r21
    1c3a:	8a 83       	std	Y+2, r24	; 0x02
    1c3c:	9b 83       	std	Y+3, r25	; 0x03
    1c3e:	ac 83       	std	Y+4, r26	; 0x04
    1c40:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinDirection(KPD_C3_PORT,KPD_C3_PIN, DIO_u8INPUT)<<6);
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	62 e0       	ldi	r22, 0x02	; 2
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    1c4c:	88 2f       	mov	r24, r24
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	00 24       	eor	r0, r0
    1c52:	96 95       	lsr	r25
    1c54:	87 95       	ror	r24
    1c56:	07 94       	ror	r0
    1c58:	96 95       	lsr	r25
    1c5a:	87 95       	ror	r24
    1c5c:	07 94       	ror	r0
    1c5e:	98 2f       	mov	r25, r24
    1c60:	80 2d       	mov	r24, r0
    1c62:	9c 01       	movw	r18, r24
    1c64:	44 27       	eor	r20, r20
    1c66:	37 fd       	sbrc	r19, 7
    1c68:	40 95       	com	r20
    1c6a:	54 2f       	mov	r21, r20
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c70:	ac 81       	ldd	r26, Y+4	; 0x04
    1c72:	bd 81       	ldd	r27, Y+5	; 0x05
    1c74:	82 2b       	or	r24, r18
    1c76:	93 2b       	or	r25, r19
    1c78:	a4 2b       	or	r26, r20
    1c7a:	b5 2b       	or	r27, r21
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	9b 83       	std	Y+3, r25	; 0x03
    1c80:	ac 83       	std	Y+4, r26	; 0x04
    1c82:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinDirection(KPD_C4_PORT,KPD_C4_PIN, DIO_u8INPUT)<<8);
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	98 2f       	mov	r25, r24
    1c94:	88 27       	eor	r24, r24
    1c96:	9c 01       	movw	r18, r24
    1c98:	44 27       	eor	r20, r20
    1c9a:	37 fd       	sbrc	r19, 7
    1c9c:	40 95       	com	r20
    1c9e:	54 2f       	mov	r21, r20
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca4:	ac 81       	ldd	r26, Y+4	; 0x04
    1ca6:	bd 81       	ldd	r27, Y+5	; 0x05
    1ca8:	82 2b       	or	r24, r18
    1caa:	93 2b       	or	r25, r19
    1cac:	a4 2b       	or	r26, r20
    1cae:	b5 2b       	or	r27, r21
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
    1cb2:	9b 83       	std	Y+3, r25	; 0x03
    1cb4:	ac 83       	std	Y+4, r26	; 0x04
    1cb6:	bd 83       	std	Y+5, r27	; 0x05

	Local_u32ErrorCheck|=(DIO_enuSet_PinDirection(KPD_R1_PORT,KPD_R1_PIN, DIO_u8OUTPUT)<<10);
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	98 2f       	mov	r25, r24
    1cc8:	88 27       	eor	r24, r24
    1cca:	99 0f       	add	r25, r25
    1ccc:	99 0f       	add	r25, r25
    1cce:	9c 01       	movw	r18, r24
    1cd0:	44 27       	eor	r20, r20
    1cd2:	37 fd       	sbrc	r19, 7
    1cd4:	40 95       	com	r20
    1cd6:	54 2f       	mov	r21, r20
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	9b 81       	ldd	r25, Y+3	; 0x03
    1cdc:	ac 81       	ldd	r26, Y+4	; 0x04
    1cde:	bd 81       	ldd	r27, Y+5	; 0x05
    1ce0:	82 2b       	or	r24, r18
    1ce2:	93 2b       	or	r25, r19
    1ce4:	a4 2b       	or	r26, r20
    1ce6:	b5 2b       	or	r27, r21
    1ce8:	8a 83       	std	Y+2, r24	; 0x02
    1cea:	9b 83       	std	Y+3, r25	; 0x03
    1cec:	ac 83       	std	Y+4, r26	; 0x04
    1cee:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinDirection(KPD_R2_PORT,KPD_R2_PIN, DIO_u8OUTPUT)<<12);
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	62 e0       	ldi	r22, 0x02	; 2
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	98 2f       	mov	r25, r24
    1d00:	88 27       	eor	r24, r24
    1d02:	92 95       	swap	r25
    1d04:	90 7f       	andi	r25, 0xF0	; 240
    1d06:	9c 01       	movw	r18, r24
    1d08:	44 27       	eor	r20, r20
    1d0a:	37 fd       	sbrc	r19, 7
    1d0c:	40 95       	com	r20
    1d0e:	54 2f       	mov	r21, r20
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	9b 81       	ldd	r25, Y+3	; 0x03
    1d14:	ac 81       	ldd	r26, Y+4	; 0x04
    1d16:	bd 81       	ldd	r27, Y+5	; 0x05
    1d18:	82 2b       	or	r24, r18
    1d1a:	93 2b       	or	r25, r19
    1d1c:	a4 2b       	or	r26, r20
    1d1e:	b5 2b       	or	r27, r21
    1d20:	8a 83       	std	Y+2, r24	; 0x02
    1d22:	9b 83       	std	Y+3, r25	; 0x03
    1d24:	ac 83       	std	Y+4, r26	; 0x04
    1d26:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinDirection(KPD_R3_PORT,KPD_R3_PIN, DIO_u8OUTPUT)<<14);
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	41 e0       	ldi	r20, 0x01	; 1
    1d2e:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    1d32:	88 2f       	mov	r24, r24
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	90 e4       	ldi	r25, 0x40	; 64
    1d38:	89 9f       	mul	r24, r25
    1d3a:	90 2d       	mov	r25, r0
    1d3c:	88 27       	eor	r24, r24
    1d3e:	11 24       	eor	r1, r1
    1d40:	9c 01       	movw	r18, r24
    1d42:	44 27       	eor	r20, r20
    1d44:	37 fd       	sbrc	r19, 7
    1d46:	40 95       	com	r20
    1d48:	54 2f       	mov	r21, r20
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4e:	ac 81       	ldd	r26, Y+4	; 0x04
    1d50:	bd 81       	ldd	r27, Y+5	; 0x05
    1d52:	82 2b       	or	r24, r18
    1d54:	93 2b       	or	r25, r19
    1d56:	a4 2b       	or	r26, r20
    1d58:	b5 2b       	or	r27, r21
    1d5a:	8a 83       	std	Y+2, r24	; 0x02
    1d5c:	9b 83       	std	Y+3, r25	; 0x03
    1d5e:	ac 83       	std	Y+4, r26	; 0x04
    1d60:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinDirection(KPD_R4_PORT,KPD_R4_PIN, DIO_u8OUTPUT)<<16);
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	41 e0       	ldi	r20, 0x01	; 1
    1d68:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    1d6c:	88 2f       	mov	r24, r24
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	99 27       	eor	r25, r25
    1d72:	88 27       	eor	r24, r24
    1d74:	9c 01       	movw	r18, r24
    1d76:	44 27       	eor	r20, r20
    1d78:	37 fd       	sbrc	r19, 7
    1d7a:	40 95       	com	r20
    1d7c:	54 2f       	mov	r21, r20
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	9b 81       	ldd	r25, Y+3	; 0x03
    1d82:	ac 81       	ldd	r26, Y+4	; 0x04
    1d84:	bd 81       	ldd	r27, Y+5	; 0x05
    1d86:	82 2b       	or	r24, r18
    1d88:	93 2b       	or	r25, r19
    1d8a:	a4 2b       	or	r26, r20
    1d8c:	b5 2b       	or	r27, r21
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
    1d90:	9b 83       	std	Y+3, r25	; 0x03
    1d92:	ac 83       	std	Y+4, r26	; 0x04
    1d94:	bd 83       	std	Y+5, r27	; 0x05

	Local_u32ErrorCheck|=(DIO_enuSet_PinValue(KPD_C1_PORT,KPD_C1_PIN, DIO_u8PULLUP)<<18);
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	99 27       	eor	r25, r25
    1da6:	88 27       	eor	r24, r24
    1da8:	9c 01       	movw	r18, r24
    1daa:	44 27       	eor	r20, r20
    1dac:	37 fd       	sbrc	r19, 7
    1dae:	40 95       	com	r20
    1db0:	54 2f       	mov	r21, r20
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	9b 81       	ldd	r25, Y+3	; 0x03
    1db6:	ac 81       	ldd	r26, Y+4	; 0x04
    1db8:	bd 81       	ldd	r27, Y+5	; 0x05
    1dba:	82 2b       	or	r24, r18
    1dbc:	93 2b       	or	r25, r19
    1dbe:	a4 2b       	or	r26, r20
    1dc0:	b5 2b       	or	r27, r21
    1dc2:	8a 83       	std	Y+2, r24	; 0x02
    1dc4:	9b 83       	std	Y+3, r25	; 0x03
    1dc6:	ac 83       	std	Y+4, r26	; 0x04
    1dc8:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinValue(KPD_C2_PORT,KPD_C2_PIN, DIO_u8PULLUP)<<20);
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	99 27       	eor	r25, r25
    1dda:	88 27       	eor	r24, r24
    1ddc:	9c 01       	movw	r18, r24
    1dde:	44 27       	eor	r20, r20
    1de0:	37 fd       	sbrc	r19, 7
    1de2:	40 95       	com	r20
    1de4:	54 2f       	mov	r21, r20
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dea:	ac 81       	ldd	r26, Y+4	; 0x04
    1dec:	bd 81       	ldd	r27, Y+5	; 0x05
    1dee:	82 2b       	or	r24, r18
    1df0:	93 2b       	or	r25, r19
    1df2:	a4 2b       	or	r26, r20
    1df4:	b5 2b       	or	r27, r21
    1df6:	8a 83       	std	Y+2, r24	; 0x02
    1df8:	9b 83       	std	Y+3, r25	; 0x03
    1dfa:	ac 83       	std	Y+4, r26	; 0x04
    1dfc:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinValue(KPD_C3_PORT,KPD_C3_PIN, DIO_u8PULLUP)<<22);
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	62 e0       	ldi	r22, 0x02	; 2
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	99 27       	eor	r25, r25
    1e0e:	88 27       	eor	r24, r24
    1e10:	9c 01       	movw	r18, r24
    1e12:	44 27       	eor	r20, r20
    1e14:	37 fd       	sbrc	r19, 7
    1e16:	40 95       	com	r20
    1e18:	54 2f       	mov	r21, r20
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1e:	ac 81       	ldd	r26, Y+4	; 0x04
    1e20:	bd 81       	ldd	r27, Y+5	; 0x05
    1e22:	82 2b       	or	r24, r18
    1e24:	93 2b       	or	r25, r19
    1e26:	a4 2b       	or	r26, r20
    1e28:	b5 2b       	or	r27, r21
    1e2a:	8a 83       	std	Y+2, r24	; 0x02
    1e2c:	9b 83       	std	Y+3, r25	; 0x03
    1e2e:	ac 83       	std	Y+4, r26	; 0x04
    1e30:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinValue(KPD_C4_PORT,KPD_C4_PIN, DIO_u8PULLUP)<<24);
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    1e3c:	88 2f       	mov	r24, r24
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	99 27       	eor	r25, r25
    1e42:	88 27       	eor	r24, r24
    1e44:	9c 01       	movw	r18, r24
    1e46:	44 27       	eor	r20, r20
    1e48:	37 fd       	sbrc	r19, 7
    1e4a:	40 95       	com	r20
    1e4c:	54 2f       	mov	r21, r20
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	9b 81       	ldd	r25, Y+3	; 0x03
    1e52:	ac 81       	ldd	r26, Y+4	; 0x04
    1e54:	bd 81       	ldd	r27, Y+5	; 0x05
    1e56:	82 2b       	or	r24, r18
    1e58:	93 2b       	or	r25, r19
    1e5a:	a4 2b       	or	r26, r20
    1e5c:	b5 2b       	or	r27, r21
    1e5e:	8a 83       	std	Y+2, r24	; 0x02
    1e60:	9b 83       	std	Y+3, r25	; 0x03
    1e62:	ac 83       	std	Y+4, r26	; 0x04
    1e64:	bd 83       	std	Y+5, r27	; 0x05

	Local_u32ErrorCheck|=(DIO_enuSet_PinValue(KPD_R1_PORT,KPD_R1_PIN, DIO_u8HIGH)<<26);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	99 27       	eor	r25, r25
    1e76:	88 27       	eor	r24, r24
    1e78:	9c 01       	movw	r18, r24
    1e7a:	44 27       	eor	r20, r20
    1e7c:	37 fd       	sbrc	r19, 7
    1e7e:	40 95       	com	r20
    1e80:	54 2f       	mov	r21, r20
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	9b 81       	ldd	r25, Y+3	; 0x03
    1e86:	ac 81       	ldd	r26, Y+4	; 0x04
    1e88:	bd 81       	ldd	r27, Y+5	; 0x05
    1e8a:	82 2b       	or	r24, r18
    1e8c:	93 2b       	or	r25, r19
    1e8e:	a4 2b       	or	r26, r20
    1e90:	b5 2b       	or	r27, r21
    1e92:	8a 83       	std	Y+2, r24	; 0x02
    1e94:	9b 83       	std	Y+3, r25	; 0x03
    1e96:	ac 83       	std	Y+4, r26	; 0x04
    1e98:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinValue(KPD_R2_PORT,KPD_R2_PIN, DIO_u8HIGH)<<28);
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	62 e0       	ldi	r22, 0x02	; 2
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	99 27       	eor	r25, r25
    1eaa:	88 27       	eor	r24, r24
    1eac:	9c 01       	movw	r18, r24
    1eae:	44 27       	eor	r20, r20
    1eb0:	37 fd       	sbrc	r19, 7
    1eb2:	40 95       	com	r20
    1eb4:	54 2f       	mov	r21, r20
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eba:	ac 81       	ldd	r26, Y+4	; 0x04
    1ebc:	bd 81       	ldd	r27, Y+5	; 0x05
    1ebe:	82 2b       	or	r24, r18
    1ec0:	93 2b       	or	r25, r19
    1ec2:	a4 2b       	or	r26, r20
    1ec4:	b5 2b       	or	r27, r21
    1ec6:	8a 83       	std	Y+2, r24	; 0x02
    1ec8:	9b 83       	std	Y+3, r25	; 0x03
    1eca:	ac 83       	std	Y+4, r26	; 0x04
    1ecc:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinValue(KPD_R3_PORT,KPD_R3_PIN, DIO_u8HIGH)<<30);
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	99 27       	eor	r25, r25
    1ede:	88 27       	eor	r24, r24
    1ee0:	9c 01       	movw	r18, r24
    1ee2:	44 27       	eor	r20, r20
    1ee4:	37 fd       	sbrc	r19, 7
    1ee6:	40 95       	com	r20
    1ee8:	54 2f       	mov	r21, r20
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	9b 81       	ldd	r25, Y+3	; 0x03
    1eee:	ac 81       	ldd	r26, Y+4	; 0x04
    1ef0:	bd 81       	ldd	r27, Y+5	; 0x05
    1ef2:	82 2b       	or	r24, r18
    1ef4:	93 2b       	or	r25, r19
    1ef6:	a4 2b       	or	r26, r20
    1ef8:	b5 2b       	or	r27, r21
    1efa:	8a 83       	std	Y+2, r24	; 0x02
    1efc:	9b 83       	std	Y+3, r25	; 0x03
    1efe:	ac 83       	std	Y+4, r26	; 0x04
    1f00:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32ErrorCheck|=(DIO_enuSet_PinValue(KPD_R4_PORT,KPD_R4_PIN, DIO_u8HIGH)<<32);
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	61 e0       	ldi	r22, 0x01	; 1
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	99 27       	eor	r25, r25
    1f12:	88 27       	eor	r24, r24
    1f14:	9c 01       	movw	r18, r24
    1f16:	44 27       	eor	r20, r20
    1f18:	37 fd       	sbrc	r19, 7
    1f1a:	40 95       	com	r20
    1f1c:	54 2f       	mov	r21, r20
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	9b 81       	ldd	r25, Y+3	; 0x03
    1f22:	ac 81       	ldd	r26, Y+4	; 0x04
    1f24:	bd 81       	ldd	r27, Y+5	; 0x05
    1f26:	82 2b       	or	r24, r18
    1f28:	93 2b       	or	r25, r19
    1f2a:	a4 2b       	or	r26, r20
    1f2c:	b5 2b       	or	r27, r21
    1f2e:	8a 83       	std	Y+2, r24	; 0x02
    1f30:	9b 83       	std	Y+3, r25	; 0x03
    1f32:	ac 83       	std	Y+4, r26	; 0x04
    1f34:	bd 83       	std	Y+5, r27	; 0x05

	u8 Local_u8Itre=0;
    1f36:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Itre=0 ; (Local_u8Itre<=sizeof(Local_u32ErrorCheck)*8) ; Local_u8Itre+=2)
    1f38:	19 82       	std	Y+1, r1	; 0x01
    1f3a:	1e c0       	rjmp	.+60     	; 0x1f78 <Keypad_enuInit+0x3b8>
	{
		if( ( ( ( Local_u32ErrorCheck ) >>Local_u8Itre ) &7 )!=ES_OK )
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	9b 81       	ldd	r25, Y+3	; 0x03
    1f46:	ac 81       	ldd	r26, Y+4	; 0x04
    1f48:	bd 81       	ldd	r27, Y+5	; 0x05
    1f4a:	02 2e       	mov	r0, r18
    1f4c:	04 c0       	rjmp	.+8      	; 0x1f56 <Keypad_enuInit+0x396>
    1f4e:	b6 95       	lsr	r27
    1f50:	a7 95       	ror	r26
    1f52:	97 95       	ror	r25
    1f54:	87 95       	ror	r24
    1f56:	0a 94       	dec	r0
    1f58:	d2 f7       	brpl	.-12     	; 0x1f4e <Keypad_enuInit+0x38e>
    1f5a:	87 70       	andi	r24, 0x07	; 7
    1f5c:	90 70       	andi	r25, 0x00	; 0
    1f5e:	a0 70       	andi	r26, 0x00	; 0
    1f60:	b0 70       	andi	r27, 0x00	; 0
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	a1 05       	cpc	r26, r1
    1f66:	b1 05       	cpc	r27, r1
    1f68:	19 f0       	breq	.+6      	; 0x1f70 <Keypad_enuInit+0x3b0>
		{
			return Local_enuErrorState;
    1f6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6c:	8f 83       	std	Y+7, r24	; 0x07
    1f6e:	09 c0       	rjmp	.+18     	; 0x1f82 <Keypad_enuInit+0x3c2>
		}
		else
		{
			Local_enuErrorState=ES_OK;
    1f70:	1e 82       	std	Y+6, r1	; 0x06
	Local_u32ErrorCheck|=(DIO_enuSet_PinValue(KPD_R2_PORT,KPD_R2_PIN, DIO_u8HIGH)<<28);
	Local_u32ErrorCheck|=(DIO_enuSet_PinValue(KPD_R3_PORT,KPD_R3_PIN, DIO_u8HIGH)<<30);
	Local_u32ErrorCheck|=(DIO_enuSet_PinValue(KPD_R4_PORT,KPD_R4_PIN, DIO_u8HIGH)<<32);

	u8 Local_u8Itre=0;
	for(Local_u8Itre=0 ; (Local_u8Itre<=sizeof(Local_u32ErrorCheck)*8) ; Local_u8Itre+=2)
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	8e 5f       	subi	r24, 0xFE	; 254
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	81 32       	cpi	r24, 0x21	; 33
    1f7c:	f8 f2       	brcs	.-66     	; 0x1f3c <Keypad_enuInit+0x37c>
		{
			Local_enuErrorState=ES_OK;
		}
	}

	return Local_enuErrorState;
    1f7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f80:	8f 83       	std	Y+7, r24	; 0x07
    1f82:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1f84:	27 96       	adiw	r28, 0x07	; 7
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <Keypad_enuGetPressedKey>:


ES_t Keypad_enuGetPressedKey(u8 *Copy_u8pKPD_PrssedKey)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	27 97       	sbiw	r28, 0x07	; 7
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8StKPDArr[Row_Num][Col_Num]=KPD_Arr_Val;
	u8 Local_u8ColItre=0;
    1fb2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8RowIter=0;
    1fb4:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8PinState;
	*Copy_u8pKPD_PrssedKey=KPD_NotPress;
    1fb6:	ed 81       	ldd	r30, Y+5	; 0x05
    1fb8:	fe 81       	ldd	r31, Y+6	; 0x06
    1fba:	8f ef       	ldi	r24, 0xFF	; 255
    1fbc:	80 83       	st	Z, r24
	static u8 Local_u8StKPDRowArr_Port[Row_Num]=  {KPD_R1_PORT,KPD_R2_PORT,KPD_R3_PORT,KPD_R4_PORT};

	static u8 Local_u8StKPDColumArr_Pin[Col_Num]={KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN,KPD_C4_PIN};
	static u8 Local_u8StKPDRowArr_Pin[Row_Num]=  {KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN,KPD_R4_PIN};

	for(Local_u8ColItre=0; Local_u8ColItre<Col_Num ; Local_u8ColItre++)
    1fbe:	1a 82       	std	Y+2, r1	; 0x02
    1fc0:	80 c0       	rjmp	.+256    	; 0x20c2 <Keypad_enuGetPressedKey+0x12c>
	{
		Local_enuErrorState=DIO_enuSet_PinValue(Local_u8StKPDColumArr_Port[Local_u8ColItre],Local_u8StKPDColumArr_Pin[Local_u8ColItre],DIO_u8LOW);
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	88 2f       	mov	r24, r24
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	fc 01       	movw	r30, r24
    1fca:	e5 55       	subi	r30, 0x55	; 85
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	20 81       	ld	r18, Z
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	ed 55       	subi	r30, 0x5D	; 93
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	90 81       	ld	r25, Z
    1fde:	82 2f       	mov	r24, r18
    1fe0:	69 2f       	mov	r22, r25
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
		for(Local_u8RowIter=0 ; Local_u8RowIter <Row_Num ; Local_u8RowIter++)
    1fea:	19 82       	std	Y+1, r1	; 0x01
    1fec:	4f c0       	rjmp	.+158    	; 0x208c <Keypad_enuGetPressedKey+0xf6>
		{
			Local_enuErrorState=DIO_enuget_PinValue(Local_u8StKPDRowArr_Port[Local_u8RowIter] ,Local_u8StKPDRowArr_Pin[Local_u8RowIter], &Local_u8PinState);
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	e9 55       	subi	r30, 0x59	; 89
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	40 81       	ld	r20, Z
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	fc 01       	movw	r30, r24
    2004:	e1 56       	subi	r30, 0x61	; 97
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	90 81       	ld	r25, Z
    200a:	9e 01       	movw	r18, r28
    200c:	2c 5f       	subi	r18, 0xFC	; 252
    200e:	3f 4f       	sbci	r19, 0xFF	; 255
    2010:	84 2f       	mov	r24, r20
    2012:	69 2f       	mov	r22, r25
    2014:	a9 01       	movw	r20, r18
    2016:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enuget_PinValue>
    201a:	8b 83       	std	Y+3, r24	; 0x03
			if(DIO_u8LOW == Local_u8PinState)
    201c:	8c 81       	ldd	r24, Y+4	; 0x04
    201e:	88 23       	and	r24, r24
    2020:	91 f5       	brne	.+100    	; 0x2086 <Keypad_enuGetPressedKey+0xf0>
    2022:	17 c0       	rjmp	.+46     	; 0x2052 <Keypad_enuGetPressedKey+0xbc>
			{

				while(DIO_u8LOW == Local_u8PinState)/*polling for busy waiting until precsseing release*/
				{
					Local_enuErrorState=DIO_enuget_PinValue(Local_u8StKPDRowArr_Port[Local_u8RowIter] ,Local_u8StKPDRowArr_Pin[Local_u8RowIter], &Local_u8PinState);
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	fc 01       	movw	r30, r24
    202c:	e9 55       	subi	r30, 0x59	; 89
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	40 81       	ld	r20, Z
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	fc 01       	movw	r30, r24
    203a:	e1 56       	subi	r30, 0x61	; 97
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	90 81       	ld	r25, Z
    2040:	9e 01       	movw	r18, r28
    2042:	2c 5f       	subi	r18, 0xFC	; 252
    2044:	3f 4f       	sbci	r19, 0xFF	; 255
    2046:	84 2f       	mov	r24, r20
    2048:	69 2f       	mov	r22, r25
    204a:	a9 01       	movw	r20, r18
    204c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enuget_PinValue>
    2050:	8b 83       	std	Y+3, r24	; 0x03
		{
			Local_enuErrorState=DIO_enuget_PinValue(Local_u8StKPDRowArr_Port[Local_u8RowIter] ,Local_u8StKPDRowArr_Pin[Local_u8RowIter], &Local_u8PinState);
			if(DIO_u8LOW == Local_u8PinState)
			{

				while(DIO_u8LOW == Local_u8PinState)/*polling for busy waiting until precsseing release*/
    2052:	8c 81       	ldd	r24, Y+4	; 0x04
    2054:	88 23       	and	r24, r24
    2056:	31 f3       	breq	.-52     	; 0x2024 <Keypad_enuGetPressedKey+0x8e>
				{
					Local_enuErrorState=DIO_enuget_PinValue(Local_u8StKPDRowArr_Port[Local_u8RowIter] ,Local_u8StKPDRowArr_Pin[Local_u8RowIter], &Local_u8PinState);
				}
				*Copy_u8pKPD_PrssedKey=Local_u8StKPDArr[Local_u8RowIter][Local_u8ColItre];
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	48 2f       	mov	r20, r24
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	ca 01       	movw	r24, r20
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	82 0f       	add	r24, r18
    2070:	93 1f       	adc	r25, r19
    2072:	fc 01       	movw	r30, r24
    2074:	e1 55       	subi	r30, 0x51	; 81
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	ed 81       	ldd	r30, Y+5	; 0x05
    207c:	fe 81       	ldd	r31, Y+6	; 0x06
    207e:	80 83       	st	Z, r24
				return Local_enuErrorState ;
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	8f 83       	std	Y+7, r24	; 0x07
    2084:	24 c0       	rjmp	.+72     	; 0x20ce <Keypad_enuGetPressedKey+0x138>
	static u8 Local_u8StKPDRowArr_Pin[Row_Num]=  {KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN,KPD_R4_PIN};

	for(Local_u8ColItre=0; Local_u8ColItre<Col_Num ; Local_u8ColItre++)
	{
		Local_enuErrorState=DIO_enuSet_PinValue(Local_u8StKPDColumArr_Port[Local_u8ColItre],Local_u8StKPDColumArr_Pin[Local_u8ColItre],DIO_u8LOW);
		for(Local_u8RowIter=0 ; Local_u8RowIter <Row_Num ; Local_u8RowIter++)
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	8f 5f       	subi	r24, 0xFF	; 255
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	84 30       	cpi	r24, 0x04	; 4
    2090:	08 f4       	brcc	.+2      	; 0x2094 <Keypad_enuGetPressedKey+0xfe>
    2092:	ad cf       	rjmp	.-166    	; 0x1fee <Keypad_enuGetPressedKey+0x58>
				*Copy_u8pKPD_PrssedKey=Local_u8StKPDArr[Local_u8RowIter][Local_u8ColItre];
				return Local_enuErrorState ;
			}

		}
		Local_enuErrorState=DIO_enuSet_PinValue(Local_u8StKPDColumArr_Port[Local_u8ColItre],Local_u8StKPDColumArr_Pin[Local_u8ColItre],DIO_u8HIGH);
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	fc 01       	movw	r30, r24
    209c:	e5 55       	subi	r30, 0x55	; 85
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	20 81       	ld	r18, Z
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	fc 01       	movw	r30, r24
    20aa:	ed 55       	subi	r30, 0x5D	; 93
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	90 81       	ld	r25, Z
    20b0:	82 2f       	mov	r24, r18
    20b2:	69 2f       	mov	r22, r25
    20b4:	41 e0       	ldi	r20, 0x01	; 1
    20b6:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    20ba:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8StKPDRowArr_Port[Row_Num]=  {KPD_R1_PORT,KPD_R2_PORT,KPD_R3_PORT,KPD_R4_PORT};

	static u8 Local_u8StKPDColumArr_Pin[Col_Num]={KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN,KPD_C4_PIN};
	static u8 Local_u8StKPDRowArr_Pin[Row_Num]=  {KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN,KPD_R4_PIN};

	for(Local_u8ColItre=0; Local_u8ColItre<Col_Num ; Local_u8ColItre++)
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	8f 5f       	subi	r24, 0xFF	; 255
    20c0:	8a 83       	std	Y+2, r24	; 0x02
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	84 30       	cpi	r24, 0x04	; 4
    20c6:	08 f4       	brcc	.+2      	; 0x20ca <Keypad_enuGetPressedKey+0x134>
    20c8:	7c cf       	rjmp	.-264    	; 0x1fc2 <Keypad_enuGetPressedKey+0x2c>
		Local_enuErrorState=DIO_enuSet_PinValue(Local_u8StKPDColumArr_Port[Local_u8ColItre],Local_u8StKPDColumArr_Pin[Local_u8ColItre],DIO_u8HIGH);

	}


	return Local_enuErrorState;
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	8f 83       	std	Y+7, r24	; 0x07
    20ce:	8f 81       	ldd	r24, Y+7	; 0x07
}
    20d0:	27 96       	adiw	r28, 0x07	; 7
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <LCD_enuInit>:

#include "util/delay.h"


ES_t LCD_enuInit(void)
{
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	c5 55       	subi	r28, 0x55	; 85
    20f0:	d0 40       	sbci	r29, 0x00	; 0
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_errorState=ES_NOK;
    20fc:	fe 01       	movw	r30, r28
    20fe:	eb 5a       	subi	r30, 0xAB	; 171
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	80 83       	st	Z, r24
    2106:	fe 01       	movw	r30, r28
    2108:	ef 5a       	subi	r30, 0xAF	; 175
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	ac e0       	ldi	r26, 0x0C	; 12
    2112:	b2 e4       	ldi	r27, 0x42	; 66
    2114:	80 83       	st	Z, r24
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	a2 83       	std	Z+2, r26	; 0x02
    211a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211c:	8e 01       	movw	r16, r28
    211e:	03 5b       	subi	r16, 0xB3	; 179
    2120:	1f 4f       	sbci	r17, 0xFF	; 255
    2122:	fe 01       	movw	r30, r28
    2124:	ef 5a       	subi	r30, 0xAF	; 175
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a e7       	ldi	r20, 0x7A	; 122
    2136:	53 e4       	ldi	r21, 0x43	; 67
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	f8 01       	movw	r30, r16
    2142:	80 83       	st	Z, r24
    2144:	91 83       	std	Z+1, r25	; 0x01
    2146:	a2 83       	std	Z+2, r26	; 0x02
    2148:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    214a:	fe 01       	movw	r30, r28
    214c:	e3 5b       	subi	r30, 0xB3	; 179
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	44 f4       	brge	.+16     	; 0x2178 <LCD_enuInit+0x96>
		__ticks = 1;
    2168:	fe 01       	movw	r30, r28
    216a:	e5 5b       	subi	r30, 0xB5	; 181
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
    2176:	64 c0       	rjmp	.+200    	; 0x2240 <LCD_enuInit+0x15e>
	else if (__tmp > 65535)
    2178:	fe 01       	movw	r30, r28
    217a:	e3 5b       	subi	r30, 0xB3	; 179
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	60 81       	ld	r22, Z
    2180:	71 81       	ldd	r23, Z+1	; 0x01
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	3f ef       	ldi	r19, 0xFF	; 255
    218a:	4f e7       	ldi	r20, 0x7F	; 127
    218c:	57 e4       	ldi	r21, 0x47	; 71
    218e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2192:	18 16       	cp	r1, r24
    2194:	0c f0       	brlt	.+2      	; 0x2198 <LCD_enuInit+0xb6>
    2196:	43 c0       	rjmp	.+134    	; 0x221e <LCD_enuInit+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	fe 01       	movw	r30, r28
    219a:	ef 5a       	subi	r30, 0xAF	; 175
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	8e 01       	movw	r16, r28
    21b8:	05 5b       	subi	r16, 0xB5	; 181
    21ba:	1f 4f       	sbci	r17, 0xFF	; 255
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	f8 01       	movw	r30, r16
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	80 83       	st	Z, r24
    21ce:	1f c0       	rjmp	.+62     	; 0x220e <LCD_enuInit+0x12c>
    21d0:	fe 01       	movw	r30, r28
    21d2:	e7 5b       	subi	r30, 0xB7	; 183
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	89 e1       	ldi	r24, 0x19	; 25
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21de:	fe 01       	movw	r30, r28
    21e0:	e7 5b       	subi	r30, 0xB7	; 183
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	80 81       	ld	r24, Z
    21e6:	91 81       	ldd	r25, Z+1	; 0x01
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <LCD_enuInit+0x106>
    21ec:	fe 01       	movw	r30, r28
    21ee:	e7 5b       	subi	r30, 0xB7	; 183
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f6:	de 01       	movw	r26, r28
    21f8:	a5 5b       	subi	r26, 0xB5	; 181
    21fa:	bf 4f       	sbci	r27, 0xFF	; 255
    21fc:	fe 01       	movw	r30, r28
    21fe:	e5 5b       	subi	r30, 0xB5	; 181
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	11 96       	adiw	r26, 0x01	; 1
    220a:	9c 93       	st	X, r25
    220c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220e:	fe 01       	movw	r30, r28
    2210:	e5 5b       	subi	r30, 0xB5	; 181
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	d1 f6       	brne	.-76     	; 0x21d0 <LCD_enuInit+0xee>
    221c:	27 c0       	rjmp	.+78     	; 0x226c <LCD_enuInit+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221e:	8e 01       	movw	r16, r28
    2220:	05 5b       	subi	r16, 0xB5	; 181
    2222:	1f 4f       	sbci	r17, 0xFF	; 255
    2224:	fe 01       	movw	r30, r28
    2226:	e3 5b       	subi	r30, 0xB3	; 179
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	f8 01       	movw	r30, r16
    223c:	91 83       	std	Z+1, r25	; 0x01
    223e:	80 83       	st	Z, r24
    2240:	de 01       	movw	r26, r28
    2242:	a9 5b       	subi	r26, 0xB9	; 185
    2244:	bf 4f       	sbci	r27, 0xFF	; 255
    2246:	fe 01       	movw	r30, r28
    2248:	e5 5b       	subi	r30, 0xB5	; 181
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	8d 93       	st	X+, r24
    2252:	9c 93       	st	X, r25
    2254:	fe 01       	movw	r30, r28
    2256:	e9 5b       	subi	r30, 0xB9	; 185
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_enuInit+0x17c>
    2262:	fe 01       	movw	r30, r28
    2264:	e9 5b       	subi	r30, 0xB9	; 185
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
	/*wait for more than 30 ms to rise voltage up to 4.5 volt*/
	_delay_ms(35);

	DIO_enuSet_PinDirection(RS_PORT , RS_PIN ,DIO_u8OUTPUT);
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	41 e0       	ldi	r20, 0x01	; 1
    2272:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>

	DIO_enuSet_PinDirection(RW_PORT , RW_PIN ,DIO_u8OUTPUT);
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	65 e0       	ldi	r22, 0x05	; 5
    227a:	41 e0       	ldi	r20, 0x01	; 1
    227c:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>

	DIO_enuSet_PinDirection(EN_PORT , EN_PIN ,DIO_u8OUTPUT);
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	67 e0       	ldi	r22, 0x07	; 7
    2284:	41 e0       	ldi	r20, 0x01	; 1
    2286:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>

	DIO_enuSet_PinDirection(D7_PORT , D7_PIN ,DIO_u8OUTPUT);
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	41 e0       	ldi	r20, 0x01	; 1
    2290:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(D6_PORT , D6_PIN ,DIO_u8OUTPUT);
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	63 e0       	ldi	r22, 0x03	; 3
    2298:	41 e0       	ldi	r20, 0x01	; 1
    229a:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(D5_PORT , D5_PIN ,DIO_u8OUTPUT);
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(D4_PORT , D4_PIN ,DIO_u8OUTPUT);
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	65 e0       	ldi	r22, 0x05	; 5
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    22b2:	fe 01       	movw	r30, r28
    22b4:	ed 5b       	subi	r30, 0xBD	; 189
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	ac e0       	ldi	r26, 0x0C	; 12
    22be:	b2 e4       	ldi	r27, 0x42	; 66
    22c0:	80 83       	st	Z, r24
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	a2 83       	std	Z+2, r26	; 0x02
    22c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	8e 01       	movw	r16, r28
    22ca:	01 5c       	subi	r16, 0xC1	; 193
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	fe 01       	movw	r30, r28
    22d0:	ed 5b       	subi	r30, 0xBD	; 189
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	82 81       	ldd	r24, Z+2	; 0x02
    22da:	93 81       	ldd	r25, Z+3	; 0x03
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	4a e7       	ldi	r20, 0x7A	; 122
    22e2:	53 e4       	ldi	r21, 0x43	; 67
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	f8 01       	movw	r30, r16
    22ee:	80 83       	st	Z, r24
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	a2 83       	std	Z+2, r26	; 0x02
    22f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22f6:	fe 01       	movw	r30, r28
    22f8:	ff 96       	adiw	r30, 0x3f	; 63
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	2c f4       	brge	.+10     	; 0x231c <LCD_enuInit+0x23a>
		__ticks = 1;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	9e af       	std	Y+62, r25	; 0x3e
    2318:	8d af       	std	Y+61, r24	; 0x3d
    231a:	46 c0       	rjmp	.+140    	; 0x23a8 <LCD_enuInit+0x2c6>
	else if (__tmp > 65535)
    231c:	fe 01       	movw	r30, r28
    231e:	ff 96       	adiw	r30, 0x3f	; 63
    2320:	60 81       	ld	r22, Z
    2322:	71 81       	ldd	r23, Z+1	; 0x01
    2324:	82 81       	ldd	r24, Z+2	; 0x02
    2326:	93 81       	ldd	r25, Z+3	; 0x03
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	3f ef       	ldi	r19, 0xFF	; 255
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	57 e4       	ldi	r21, 0x47	; 71
    2330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	64 f5       	brge	.+88     	; 0x2390 <LCD_enuInit+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2338:	fe 01       	movw	r30, r28
    233a:	ed 5b       	subi	r30, 0xBD	; 189
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e2       	ldi	r20, 0x20	; 32
    234c:	51 e4       	ldi	r21, 0x41	; 65
    234e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	bc 01       	movw	r22, r24
    2358:	cd 01       	movw	r24, r26
    235a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	9e af       	std	Y+62, r25	; 0x3e
    2364:	8d af       	std	Y+61, r24	; 0x3d
    2366:	0f c0       	rjmp	.+30     	; 0x2386 <LCD_enuInit+0x2a4>
    2368:	89 e1       	ldi	r24, 0x19	; 25
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9c af       	std	Y+60, r25	; 0x3c
    236e:	8b af       	std	Y+59, r24	; 0x3b
    2370:	8b ad       	ldd	r24, Y+59	; 0x3b
    2372:	9c ad       	ldd	r25, Y+60	; 0x3c
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <LCD_enuInit+0x292>
    2378:	9c af       	std	Y+60, r25	; 0x3c
    237a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237c:	8d ad       	ldd	r24, Y+61	; 0x3d
    237e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	9e af       	std	Y+62, r25	; 0x3e
    2384:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2386:	8d ad       	ldd	r24, Y+61	; 0x3d
    2388:	9e ad       	ldd	r25, Y+62	; 0x3e
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	69 f7       	brne	.-38     	; 0x2368 <LCD_enuInit+0x286>
    238e:	16 c0       	rjmp	.+44     	; 0x23bc <LCD_enuInit+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2390:	fe 01       	movw	r30, r28
    2392:	ff 96       	adiw	r30, 0x3f	; 63
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9e af       	std	Y+62, r25	; 0x3e
    23a6:	8d af       	std	Y+61, r24	; 0x3d
    23a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    23aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    23ac:	9a af       	std	Y+58, r25	; 0x3a
    23ae:	89 af       	std	Y+57, r24	; 0x39
    23b0:	89 ad       	ldd	r24, Y+57	; 0x39
    23b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <LCD_enuInit+0x2d2>
    23b8:	9a af       	std	Y+58, r25	; 0x3a
    23ba:	89 af       	std	Y+57, r24	; 0x39
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	ac e0       	ldi	r26, 0x0C	; 12
    23c2:	b2 e4       	ldi	r27, 0x42	; 66
    23c4:	8d ab       	std	Y+53, r24	; 0x35
    23c6:	9e ab       	std	Y+54, r25	; 0x36
    23c8:	af ab       	std	Y+55, r26	; 0x37
    23ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23cc:	6d a9       	ldd	r22, Y+53	; 0x35
    23ce:	7e a9       	ldd	r23, Y+54	; 0x36
    23d0:	8f a9       	ldd	r24, Y+55	; 0x37
    23d2:	98 ad       	ldd	r25, Y+56	; 0x38
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a e7       	ldi	r20, 0x7A	; 122
    23da:	53 e4       	ldi	r21, 0x43	; 67
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	89 ab       	std	Y+49, r24	; 0x31
    23e6:	9a ab       	std	Y+50, r25	; 0x32
    23e8:	ab ab       	std	Y+51, r26	; 0x33
    23ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23ec:	69 a9       	ldd	r22, Y+49	; 0x31
    23ee:	7a a9       	ldd	r23, Y+50	; 0x32
    23f0:	8b a9       	ldd	r24, Y+51	; 0x33
    23f2:	9c a9       	ldd	r25, Y+52	; 0x34
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e8       	ldi	r20, 0x80	; 128
    23fa:	5f e3       	ldi	r21, 0x3F	; 63
    23fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2400:	88 23       	and	r24, r24
    2402:	2c f4       	brge	.+10     	; 0x240e <LCD_enuInit+0x32c>
		__ticks = 1;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	98 ab       	std	Y+48, r25	; 0x30
    240a:	8f a7       	std	Y+47, r24	; 0x2f
    240c:	3f c0       	rjmp	.+126    	; 0x248c <LCD_enuInit+0x3aa>
	else if (__tmp > 65535)
    240e:	69 a9       	ldd	r22, Y+49	; 0x31
    2410:	7a a9       	ldd	r23, Y+50	; 0x32
    2412:	8b a9       	ldd	r24, Y+51	; 0x33
    2414:	9c a9       	ldd	r25, Y+52	; 0x34
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	57 e4       	ldi	r21, 0x47	; 71
    241e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2422:	18 16       	cp	r1, r24
    2424:	4c f5       	brge	.+82     	; 0x2478 <LCD_enuInit+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	6d a9       	ldd	r22, Y+53	; 0x35
    2428:	7e a9       	ldd	r23, Y+54	; 0x36
    242a:	8f a9       	ldd	r24, Y+55	; 0x37
    242c:	98 ad       	ldd	r25, Y+56	; 0x38
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	98 ab       	std	Y+48, r25	; 0x30
    244c:	8f a7       	std	Y+47, r24	; 0x2f
    244e:	0f c0       	rjmp	.+30     	; 0x246e <LCD_enuInit+0x38c>
    2450:	89 e1       	ldi	r24, 0x19	; 25
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9e a7       	std	Y+46, r25	; 0x2e
    2456:	8d a7       	std	Y+45, r24	; 0x2d
    2458:	8d a5       	ldd	r24, Y+45	; 0x2d
    245a:	9e a5       	ldd	r25, Y+46	; 0x2e
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <LCD_enuInit+0x37a>
    2460:	9e a7       	std	Y+46, r25	; 0x2e
    2462:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2464:	8f a5       	ldd	r24, Y+47	; 0x2f
    2466:	98 a9       	ldd	r25, Y+48	; 0x30
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	98 ab       	std	Y+48, r25	; 0x30
    246c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2470:	98 a9       	ldd	r25, Y+48	; 0x30
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	69 f7       	brne	.-38     	; 0x2450 <LCD_enuInit+0x36e>
    2476:	14 c0       	rjmp	.+40     	; 0x24a0 <LCD_enuInit+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2478:	69 a9       	ldd	r22, Y+49	; 0x31
    247a:	7a a9       	ldd	r23, Y+50	; 0x32
    247c:	8b a9       	ldd	r24, Y+51	; 0x33
    247e:	9c a9       	ldd	r25, Y+52	; 0x34
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	98 ab       	std	Y+48, r25	; 0x30
    248a:	8f a7       	std	Y+47, r24	; 0x2f
    248c:	8f a5       	ldd	r24, Y+47	; 0x2f
    248e:	98 a9       	ldd	r25, Y+48	; 0x30
    2490:	9c a7       	std	Y+44, r25	; 0x2c
    2492:	8b a7       	std	Y+43, r24	; 0x2b
    2494:	8b a5       	ldd	r24, Y+43	; 0x2b
    2496:	9c a5       	ldd	r25, Y+44	; 0x2c
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <LCD_enuInit+0x3b6>
    249c:	9c a7       	std	Y+44, r25	; 0x2c
    249e:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_invidSendCommond(Fun_Set_8b);

#elif LCD_MODE == FOUR_BIT
	_delay_ms(35);
	/*for function set --> 4 mode 2 line 5*8*/
	LCD_invidSendCommond(Fun_Set_4b );
    24a0:	88 e2       	ldi	r24, 0x28	; 40
    24a2:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_invidSendCommond>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e8       	ldi	r26, 0x80	; 128
    24ac:	bf e3       	ldi	r27, 0x3F	; 63
    24ae:	8f a3       	std	Y+39, r24	; 0x27
    24b0:	98 a7       	std	Y+40, r25	; 0x28
    24b2:	a9 a7       	std	Y+41, r26	; 0x29
    24b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6f a1       	ldd	r22, Y+39	; 0x27
    24b8:	78 a5       	ldd	r23, Y+40	; 0x28
    24ba:	89 a5       	ldd	r24, Y+41	; 0x29
    24bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a e7       	ldi	r20, 0x7A	; 122
    24c4:	53 e4       	ldi	r21, 0x43	; 67
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8b a3       	std	Y+35, r24	; 0x23
    24d0:	9c a3       	std	Y+36, r25	; 0x24
    24d2:	ad a3       	std	Y+37, r26	; 0x25
    24d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24d6:	6b a1       	ldd	r22, Y+35	; 0x23
    24d8:	7c a1       	ldd	r23, Y+36	; 0x24
    24da:	8d a1       	ldd	r24, Y+37	; 0x25
    24dc:	9e a1       	ldd	r25, Y+38	; 0x26
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_enuInit+0x416>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9a a3       	std	Y+34, r25	; 0x22
    24f4:	89 a3       	std	Y+33, r24	; 0x21
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_enuInit+0x494>
	else if (__tmp > 65535)
    24f8:	6b a1       	ldd	r22, Y+35	; 0x23
    24fa:	7c a1       	ldd	r23, Y+36	; 0x24
    24fc:	8d a1       	ldd	r24, Y+37	; 0x25
    24fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_enuInit+0x480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6f a1       	ldd	r22, Y+39	; 0x27
    2512:	78 a5       	ldd	r23, Y+40	; 0x28
    2514:	89 a5       	ldd	r24, Y+41	; 0x29
    2516:	9a a5       	ldd	r25, Y+42	; 0x2a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9a a3       	std	Y+34, r25	; 0x22
    2536:	89 a3       	std	Y+33, r24	; 0x21
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_enuInit+0x476>
    253a:	89 e1       	ldi	r24, 0x19	; 25
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	98 a3       	std	Y+32, r25	; 0x20
    2540:	8f 8f       	std	Y+31, r24	; 0x1f
    2542:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2544:	98 a1       	ldd	r25, Y+32	; 0x20
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_enuInit+0x464>
    254a:	98 a3       	std	Y+32, r25	; 0x20
    254c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	89 a1       	ldd	r24, Y+33	; 0x21
    2550:	9a a1       	ldd	r25, Y+34	; 0x22
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9a a3       	std	Y+34, r25	; 0x22
    2556:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	89 a1       	ldd	r24, Y+33	; 0x21
    255a:	9a a1       	ldd	r25, Y+34	; 0x22
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_enuInit+0x458>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <LCD_enuInit+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	6b a1       	ldd	r22, Y+35	; 0x23
    2564:	7c a1       	ldd	r23, Y+36	; 0x24
    2566:	8d a1       	ldd	r24, Y+37	; 0x25
    2568:	9e a1       	ldd	r25, Y+38	; 0x26
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9a a3       	std	Y+34, r25	; 0x22
    2574:	89 a3       	std	Y+33, r24	; 0x21
    2576:	89 a1       	ldd	r24, Y+33	; 0x21
    2578:	9a a1       	ldd	r25, Y+34	; 0x22
    257a:	9e 8f       	std	Y+30, r25	; 0x1e
    257c:	8d 8f       	std	Y+29, r24	; 0x1d
    257e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2580:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_enuInit+0x4a0>
    2586:	9e 8f       	std	Y+30, r25	; 0x1e
    2588:	8d 8f       	std	Y+29, r24	; 0x1d
#else
#error "Error Invalid LCD Mode"
#endif
	_delay_ms(1);
	/*Display on off control*/
	LCD_invidSendCommond(Display_On);
    258a:	8c e0       	ldi	r24, 0x0C	; 12
    258c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_invidSendCommond>
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a0 e8       	ldi	r26, 0x80	; 128
    2596:	bf e3       	ldi	r27, 0x3F	; 63
    2598:	89 8f       	std	Y+25, r24	; 0x19
    259a:	9a 8f       	std	Y+26, r25	; 0x1a
    259c:	ab 8f       	std	Y+27, r26	; 0x1b
    259e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a0:	69 8d       	ldd	r22, Y+25	; 0x19
    25a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	4a e7       	ldi	r20, 0x7A	; 122
    25ae:	53 e4       	ldi	r21, 0x43	; 67
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	8d 8b       	std	Y+21, r24	; 0x15
    25ba:	9e 8b       	std	Y+22, r25	; 0x16
    25bc:	af 8b       	std	Y+23, r26	; 0x17
    25be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25c0:	6d 89       	ldd	r22, Y+21	; 0x15
    25c2:	7e 89       	ldd	r23, Y+22	; 0x16
    25c4:	8f 89       	ldd	r24, Y+23	; 0x17
    25c6:	98 8d       	ldd	r25, Y+24	; 0x18
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e8       	ldi	r20, 0x80	; 128
    25ce:	5f e3       	ldi	r21, 0x3F	; 63
    25d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d4:	88 23       	and	r24, r24
    25d6:	2c f4       	brge	.+10     	; 0x25e2 <LCD_enuInit+0x500>
		__ticks = 1;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	9c 8b       	std	Y+20, r25	; 0x14
    25de:	8b 8b       	std	Y+19, r24	; 0x13
    25e0:	3f c0       	rjmp	.+126    	; 0x2660 <LCD_enuInit+0x57e>
	else if (__tmp > 65535)
    25e2:	6d 89       	ldd	r22, Y+21	; 0x15
    25e4:	7e 89       	ldd	r23, Y+22	; 0x16
    25e6:	8f 89       	ldd	r24, Y+23	; 0x17
    25e8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	3f ef       	ldi	r19, 0xFF	; 255
    25ee:	4f e7       	ldi	r20, 0x7F	; 127
    25f0:	57 e4       	ldi	r21, 0x47	; 71
    25f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f6:	18 16       	cp	r1, r24
    25f8:	4c f5       	brge	.+82     	; 0x264c <LCD_enuInit+0x56a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fa:	69 8d       	ldd	r22, Y+25	; 0x19
    25fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2600:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e2       	ldi	r20, 0x20	; 32
    2608:	51 e4       	ldi	r21, 0x41	; 65
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	9c 8b       	std	Y+20, r25	; 0x14
    2620:	8b 8b       	std	Y+19, r24	; 0x13
    2622:	0f c0       	rjmp	.+30     	; 0x2642 <LCD_enuInit+0x560>
    2624:	89 e1       	ldi	r24, 0x19	; 25
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9a 8b       	std	Y+18, r25	; 0x12
    262a:	89 8b       	std	Y+17, r24	; 0x11
    262c:	89 89       	ldd	r24, Y+17	; 0x11
    262e:	9a 89       	ldd	r25, Y+18	; 0x12
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <LCD_enuInit+0x54e>
    2634:	9a 8b       	std	Y+18, r25	; 0x12
    2636:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2638:	8b 89       	ldd	r24, Y+19	; 0x13
    263a:	9c 89       	ldd	r25, Y+20	; 0x14
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	9c 8b       	std	Y+20, r25	; 0x14
    2640:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2642:	8b 89       	ldd	r24, Y+19	; 0x13
    2644:	9c 89       	ldd	r25, Y+20	; 0x14
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	69 f7       	brne	.-38     	; 0x2624 <LCD_enuInit+0x542>
    264a:	14 c0       	rjmp	.+40     	; 0x2674 <LCD_enuInit+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264c:	6d 89       	ldd	r22, Y+21	; 0x15
    264e:	7e 89       	ldd	r23, Y+22	; 0x16
    2650:	8f 89       	ldd	r24, Y+23	; 0x17
    2652:	98 8d       	ldd	r25, Y+24	; 0x18
    2654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	9c 8b       	std	Y+20, r25	; 0x14
    265e:	8b 8b       	std	Y+19, r24	; 0x13
    2660:	8b 89       	ldd	r24, Y+19	; 0x13
    2662:	9c 89       	ldd	r25, Y+20	; 0x14
    2664:	98 8b       	std	Y+16, r25	; 0x10
    2666:	8f 87       	std	Y+15, r24	; 0x0f
    2668:	8f 85       	ldd	r24, Y+15	; 0x0f
    266a:	98 89       	ldd	r25, Y+16	; 0x10
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <LCD_enuInit+0x58a>
    2670:	98 8b       	std	Y+16, r25	; 0x10
    2672:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Clear Display */
	LCD_invidSendCommond(Clear_Display);
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_invidSendCommond>
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a0 e0       	ldi	r26, 0x00	; 0
    2680:	b0 e4       	ldi	r27, 0x40	; 64
    2682:	8b 87       	std	Y+11, r24	; 0x0b
    2684:	9c 87       	std	Y+12, r25	; 0x0c
    2686:	ad 87       	std	Y+13, r26	; 0x0d
    2688:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268a:	6b 85       	ldd	r22, Y+11	; 0x0b
    268c:	7c 85       	ldd	r23, Y+12	; 0x0c
    268e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2690:	9e 85       	ldd	r25, Y+14	; 0x0e
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	4a e7       	ldi	r20, 0x7A	; 122
    2698:	53 e4       	ldi	r21, 0x43	; 67
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	8f 83       	std	Y+7, r24	; 0x07
    26a4:	98 87       	std	Y+8, r25	; 0x08
    26a6:	a9 87       	std	Y+9, r26	; 0x09
    26a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26aa:	6f 81       	ldd	r22, Y+7	; 0x07
    26ac:	78 85       	ldd	r23, Y+8	; 0x08
    26ae:	89 85       	ldd	r24, Y+9	; 0x09
    26b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	5f e3       	ldi	r21, 0x3F	; 63
    26ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26be:	88 23       	and	r24, r24
    26c0:	2c f4       	brge	.+10     	; 0x26cc <LCD_enuInit+0x5ea>
		__ticks = 1;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	3f c0       	rjmp	.+126    	; 0x274a <LCD_enuInit+0x668>
	else if (__tmp > 65535)
    26cc:	6f 81       	ldd	r22, Y+7	; 0x07
    26ce:	78 85       	ldd	r23, Y+8	; 0x08
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	3f ef       	ldi	r19, 0xFF	; 255
    26d8:	4f e7       	ldi	r20, 0x7F	; 127
    26da:	57 e4       	ldi	r21, 0x47	; 71
    26dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e0:	18 16       	cp	r1, r24
    26e2:	4c f5       	brge	.+82     	; 0x2736 <LCD_enuInit+0x654>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e2       	ldi	r20, 0x20	; 32
    26f2:	51 e4       	ldi	r21, 0x41	; 65
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9e 83       	std	Y+6, r25	; 0x06
    270a:	8d 83       	std	Y+5, r24	; 0x05
    270c:	0f c0       	rjmp	.+30     	; 0x272c <LCD_enuInit+0x64a>
    270e:	89 e1       	ldi	r24, 0x19	; 25
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9c 83       	std	Y+4, r25	; 0x04
    2714:	8b 83       	std	Y+3, r24	; 0x03
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	9c 81       	ldd	r25, Y+4	; 0x04
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCD_enuInit+0x638>
    271e:	9c 83       	std	Y+4, r25	; 0x04
    2720:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272c:	8d 81       	ldd	r24, Y+5	; 0x05
    272e:	9e 81       	ldd	r25, Y+6	; 0x06
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	69 f7       	brne	.-38     	; 0x270e <LCD_enuInit+0x62c>
    2734:	14 c0       	rjmp	.+40     	; 0x275e <LCD_enuInit+0x67c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	9e 83       	std	Y+6, r25	; 0x06
    2748:	8d 83       	std	Y+5, r24	; 0x05
    274a:	8d 81       	ldd	r24, Y+5	; 0x05
    274c:	9e 81       	ldd	r25, Y+6	; 0x06
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <LCD_enuInit+0x674>
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Entry mode --> increase cursor -- no shift */
	LCD_invidSendCommond(Entry_Mode);
    275e:	86 e0       	ldi	r24, 0x06	; 6
    2760:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_invidSendCommond>
	Local_errorState=ES_OK;
    2764:	fe 01       	movw	r30, r28
    2766:	eb 5a       	subi	r30, 0xAB	; 171
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	10 82       	st	Z, r1
	return Local_errorState;
    276c:	fe 01       	movw	r30, r28
    276e:	eb 5a       	subi	r30, 0xAB	; 171
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
}
    2774:	cb 5a       	subi	r28, 0xAB	; 171
    2776:	df 4f       	sbci	r29, 0xFF	; 255
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	1f 91       	pop	r17
    2788:	0f 91       	pop	r16
    278a:	08 95       	ret

0000278c <LCD_voidLatch>:

static void LCD_voidLatch(u8 Copy_u8Data )
{
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	c5 55       	subi	r28, 0x55	; 85
    279a:	d0 40       	sbci	r29, 0x00	; 0
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	fe 01       	movw	r30, r28
    27a8:	eb 5a       	subi	r30, 0xAB	; 171
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 83       	st	Z, r24


	/* Set RW pin low for write*/

	DIO_enuSet_PinValue(RW_PORT , RW_PIN ,DIO_u8LOW);
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	65 e0       	ldi	r22, 0x05	; 5
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	/*to start the pulse of send command or data*/
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	67 e0       	ldi	r22, 0x07	; 7
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>

	DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8Data>>D_D7)&GetMusk)));
    27c2:	fe 01       	movw	r30, r28
    27c4:	eb 5a       	subi	r30, 0xAB	; 171
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	98 2f       	mov	r25, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	99 27       	eor	r25, r25
    27d0:	99 1f       	adc	r25, r25
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	49 2f       	mov	r20, r25
    27d8:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8Data>>D_D6)&GetMusk))) ;
    27dc:	fe 01       	movw	r30, r28
    27de:	eb 5a       	subi	r30, 0xAB	; 171
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 81       	ld	r24, Z
    27e4:	82 95       	swap	r24
    27e6:	86 95       	lsr	r24
    27e8:	86 95       	lsr	r24
    27ea:	83 70       	andi	r24, 0x03	; 3
    27ec:	98 2f       	mov	r25, r24
    27ee:	91 70       	andi	r25, 0x01	; 1
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	63 e0       	ldi	r22, 0x03	; 3
    27f4:	49 2f       	mov	r20, r25
    27f6:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8Data>>D_D5)&GetMusk))) ;
    27fa:	fe 01       	movw	r30, r28
    27fc:	eb 5a       	subi	r30, 0xAB	; 171
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	80 81       	ld	r24, Z
    2802:	82 95       	swap	r24
    2804:	86 95       	lsr	r24
    2806:	87 70       	andi	r24, 0x07	; 7
    2808:	98 2f       	mov	r25, r24
    280a:	91 70       	andi	r25, 0x01	; 1
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	61 e0       	ldi	r22, 0x01	; 1
    2810:	49 2f       	mov	r20, r25
    2812:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8Data>>D_D4)&GetMusk))) ;
    2816:	fe 01       	movw	r30, r28
    2818:	eb 5a       	subi	r30, 0xAB	; 171
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	82 95       	swap	r24
    2820:	8f 70       	andi	r24, 0x0F	; 15
    2822:	98 2f       	mov	r25, r24
    2824:	91 70       	andi	r25, 0x01	; 1
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	65 e0       	ldi	r22, 0x05	; 5
    282a:	49 2f       	mov	r20, r25
    282c:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D1_PORT , D1_PIN ,(((Copy_u8Data>>D_D1)&GetMusk)));
	DIO_enuSet_PinValue(D0_PORT , D0_PIN ,(((Copy_u8Data>>D_D0)&GetMusk)));


#elif	LCD_MODE == FOUR_BIT
	if(Copy_u8Data==Fun_Set_4b)
    2830:	fe 01       	movw	r30, r28
    2832:	eb 5a       	subi	r30, 0xAB	; 171
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	88 32       	cpi	r24, 0x28	; 40
    283a:	09 f0       	breq	.+2      	; 0x283e <LCD_voidLatch+0xb2>
    283c:	79 c1       	rjmp	.+754    	; 0x2b30 <LCD_voidLatch+0x3a4>
	{
		/* give enable high to start duration of pulse*/
		DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	67 e0       	ldi	r22, 0x07	; 7
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    2848:	fe 01       	movw	r30, r28
    284a:	ef 5a       	subi	r30, 0xAF	; 175
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	a0 e2       	ldi	r26, 0x20	; 32
    2854:	b1 e4       	ldi	r27, 0x41	; 65
    2856:	80 83       	st	Z, r24
    2858:	91 83       	std	Z+1, r25	; 0x01
    285a:	a2 83       	std	Z+2, r26	; 0x02
    285c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285e:	8e 01       	movw	r16, r28
    2860:	03 5b       	subi	r16, 0xB3	; 179
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
    2864:	fe 01       	movw	r30, r28
    2866:	ef 5a       	subi	r30, 0xAF	; 175
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	60 81       	ld	r22, Z
    286c:	71 81       	ldd	r23, Z+1	; 0x01
    286e:	82 81       	ldd	r24, Z+2	; 0x02
    2870:	93 81       	ldd	r25, Z+3	; 0x03
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4a e7       	ldi	r20, 0x7A	; 122
    2878:	53 e4       	ldi	r21, 0x43	; 67
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	f8 01       	movw	r30, r16
    2884:	80 83       	st	Z, r24
    2886:	91 83       	std	Z+1, r25	; 0x01
    2888:	a2 83       	std	Z+2, r26	; 0x02
    288a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    288c:	fe 01       	movw	r30, r28
    288e:	e3 5b       	subi	r30, 0xB3	; 179
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	60 81       	ld	r22, Z
    2894:	71 81       	ldd	r23, Z+1	; 0x01
    2896:	82 81       	ldd	r24, Z+2	; 0x02
    2898:	93 81       	ldd	r25, Z+3	; 0x03
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e8       	ldi	r20, 0x80	; 128
    28a0:	5f e3       	ldi	r21, 0x3F	; 63
    28a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a6:	88 23       	and	r24, r24
    28a8:	44 f4       	brge	.+16     	; 0x28ba <LCD_voidLatch+0x12e>
		__ticks = 1;
    28aa:	fe 01       	movw	r30, r28
    28ac:	e5 5b       	subi	r30, 0xB5	; 181
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	91 83       	std	Z+1, r25	; 0x01
    28b6:	80 83       	st	Z, r24
    28b8:	64 c0       	rjmp	.+200    	; 0x2982 <LCD_voidLatch+0x1f6>
	else if (__tmp > 65535)
    28ba:	fe 01       	movw	r30, r28
    28bc:	e3 5b       	subi	r30, 0xB3	; 179
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	60 81       	ld	r22, Z
    28c2:	71 81       	ldd	r23, Z+1	; 0x01
    28c4:	82 81       	ldd	r24, Z+2	; 0x02
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	3f ef       	ldi	r19, 0xFF	; 255
    28cc:	4f e7       	ldi	r20, 0x7F	; 127
    28ce:	57 e4       	ldi	r21, 0x47	; 71
    28d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d4:	18 16       	cp	r1, r24
    28d6:	0c f0       	brlt	.+2      	; 0x28da <LCD_voidLatch+0x14e>
    28d8:	43 c0       	rjmp	.+134    	; 0x2960 <LCD_voidLatch+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28da:	fe 01       	movw	r30, r28
    28dc:	ef 5a       	subi	r30, 0xAF	; 175
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	8e 01       	movw	r16, r28
    28fa:	05 5b       	subi	r16, 0xB5	; 181
    28fc:	1f 4f       	sbci	r17, 0xFF	; 255
    28fe:	bc 01       	movw	r22, r24
    2900:	cd 01       	movw	r24, r26
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	f8 01       	movw	r30, r16
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
    2910:	1f c0       	rjmp	.+62     	; 0x2950 <LCD_voidLatch+0x1c4>
    2912:	fe 01       	movw	r30, r28
    2914:	e7 5b       	subi	r30, 0xB7	; 183
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	89 e1       	ldi	r24, 0x19	; 25
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	80 83       	st	Z, r24
    2920:	fe 01       	movw	r30, r28
    2922:	e7 5b       	subi	r30, 0xB7	; 183
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 81       	ld	r24, Z
    2928:	91 81       	ldd	r25, Z+1	; 0x01
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <LCD_voidLatch+0x19e>
    292e:	fe 01       	movw	r30, r28
    2930:	e7 5b       	subi	r30, 0xB7	; 183
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2938:	de 01       	movw	r26, r28
    293a:	a5 5b       	subi	r26, 0xB5	; 181
    293c:	bf 4f       	sbci	r27, 0xFF	; 255
    293e:	fe 01       	movw	r30, r28
    2940:	e5 5b       	subi	r30, 0xB5	; 181
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	80 81       	ld	r24, Z
    2946:	91 81       	ldd	r25, Z+1	; 0x01
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	11 96       	adiw	r26, 0x01	; 1
    294c:	9c 93       	st	X, r25
    294e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2950:	fe 01       	movw	r30, r28
    2952:	e5 5b       	subi	r30, 0xB5	; 181
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	d1 f6       	brne	.-76     	; 0x2912 <LCD_voidLatch+0x186>
    295e:	27 c0       	rjmp	.+78     	; 0x29ae <LCD_voidLatch+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2960:	8e 01       	movw	r16, r28
    2962:	05 5b       	subi	r16, 0xB5	; 181
    2964:	1f 4f       	sbci	r17, 0xFF	; 255
    2966:	fe 01       	movw	r30, r28
    2968:	e3 5b       	subi	r30, 0xB3	; 179
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	f8 01       	movw	r30, r16
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
    2982:	de 01       	movw	r26, r28
    2984:	a9 5b       	subi	r26, 0xB9	; 185
    2986:	bf 4f       	sbci	r27, 0xFF	; 255
    2988:	fe 01       	movw	r30, r28
    298a:	e5 5b       	subi	r30, 0xB5	; 181
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	8d 93       	st	X+, r24
    2994:	9c 93       	st	X, r25
    2996:	fe 01       	movw	r30, r28
    2998:	e9 5b       	subi	r30, 0xB9	; 185
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	80 81       	ld	r24, Z
    299e:	91 81       	ldd	r25, Z+1	; 0x01
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <LCD_voidLatch+0x214>
    29a4:	fe 01       	movw	r30, r28
    29a6:	e9 5b       	subi	r30, 0xB9	; 185
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	91 83       	std	Z+1, r25	; 0x01
    29ac:	80 83       	st	Z, r24
		_delay_ms(10);
		/*give zero to end the pulse */
		DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	67 e0       	ldi	r22, 0x07	; 7
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    29b8:	fe 01       	movw	r30, r28
    29ba:	ed 5b       	subi	r30, 0xBD	; 189
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	a8 e4       	ldi	r26, 0x48	; 72
    29c4:	b2 e4       	ldi	r27, 0x42	; 66
    29c6:	80 83       	st	Z, r24
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	a2 83       	std	Z+2, r26	; 0x02
    29cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ce:	8e 01       	movw	r16, r28
    29d0:	01 5c       	subi	r16, 0xC1	; 193
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	fe 01       	movw	r30, r28
    29d6:	ed 5b       	subi	r30, 0xBD	; 189
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	60 81       	ld	r22, Z
    29dc:	71 81       	ldd	r23, Z+1	; 0x01
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	4a e7       	ldi	r20, 0x7A	; 122
    29e8:	53 e4       	ldi	r21, 0x43	; 67
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	f8 01       	movw	r30, r16
    29f4:	80 83       	st	Z, r24
    29f6:	91 83       	std	Z+1, r25	; 0x01
    29f8:	a2 83       	std	Z+2, r26	; 0x02
    29fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29fc:	fe 01       	movw	r30, r28
    29fe:	ff 96       	adiw	r30, 0x3f	; 63
    2a00:	60 81       	ld	r22, Z
    2a02:	71 81       	ldd	r23, Z+1	; 0x01
    2a04:	82 81       	ldd	r24, Z+2	; 0x02
    2a06:	93 81       	ldd	r25, Z+3	; 0x03
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e8       	ldi	r20, 0x80	; 128
    2a0e:	5f e3       	ldi	r21, 0x3F	; 63
    2a10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a14:	88 23       	and	r24, r24
    2a16:	2c f4       	brge	.+10     	; 0x2a22 <LCD_voidLatch+0x296>
		__ticks = 1;
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	9e af       	std	Y+62, r25	; 0x3e
    2a1e:	8d af       	std	Y+61, r24	; 0x3d
    2a20:	46 c0       	rjmp	.+140    	; 0x2aae <LCD_voidLatch+0x322>
	else if (__tmp > 65535)
    2a22:	fe 01       	movw	r30, r28
    2a24:	ff 96       	adiw	r30, 0x3f	; 63
    2a26:	60 81       	ld	r22, Z
    2a28:	71 81       	ldd	r23, Z+1	; 0x01
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	93 81       	ldd	r25, Z+3	; 0x03
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	3f ef       	ldi	r19, 0xFF	; 255
    2a32:	4f e7       	ldi	r20, 0x7F	; 127
    2a34:	57 e4       	ldi	r21, 0x47	; 71
    2a36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a3a:	18 16       	cp	r1, r24
    2a3c:	64 f5       	brge	.+88     	; 0x2a96 <LCD_voidLatch+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a3e:	fe 01       	movw	r30, r28
    2a40:	ed 5b       	subi	r30, 0xBD	; 189
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	60 81       	ld	r22, Z
    2a46:	71 81       	ldd	r23, Z+1	; 0x01
    2a48:	82 81       	ldd	r24, Z+2	; 0x02
    2a4a:	93 81       	ldd	r25, Z+3	; 0x03
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e2       	ldi	r20, 0x20	; 32
    2a52:	51 e4       	ldi	r21, 0x41	; 65
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	bc 01       	movw	r22, r24
    2a5e:	cd 01       	movw	r24, r26
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	9e af       	std	Y+62, r25	; 0x3e
    2a6a:	8d af       	std	Y+61, r24	; 0x3d
    2a6c:	0f c0       	rjmp	.+30     	; 0x2a8c <LCD_voidLatch+0x300>
    2a6e:	89 e1       	ldi	r24, 0x19	; 25
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	9c af       	std	Y+60, r25	; 0x3c
    2a74:	8b af       	std	Y+59, r24	; 0x3b
    2a76:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a78:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <LCD_voidLatch+0x2ee>
    2a7e:	9c af       	std	Y+60, r25	; 0x3c
    2a80:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a82:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a84:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	9e af       	std	Y+62, r25	; 0x3e
    2a8a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	69 f7       	brne	.-38     	; 0x2a6e <LCD_voidLatch+0x2e2>
    2a94:	16 c0       	rjmp	.+44     	; 0x2ac2 <LCD_voidLatch+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a96:	fe 01       	movw	r30, r28
    2a98:	ff 96       	adiw	r30, 0x3f	; 63
    2a9a:	60 81       	ld	r22, Z
    2a9c:	71 81       	ldd	r23, Z+1	; 0x01
    2a9e:	82 81       	ldd	r24, Z+2	; 0x02
    2aa0:	93 81       	ldd	r25, Z+3	; 0x03
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9e af       	std	Y+62, r25	; 0x3e
    2aac:	8d af       	std	Y+61, r24	; 0x3d
    2aae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ab0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ab2:	9a af       	std	Y+58, r25	; 0x3a
    2ab4:	89 af       	std	Y+57, r24	; 0x39
    2ab6:	89 ad       	ldd	r24, Y+57	; 0x39
    2ab8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <LCD_voidLatch+0x32e>
    2abe:	9a af       	std	Y+58, r25	; 0x3a
    2ac0:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);

		DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8Data>>D_D7)&GetMusk)));
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	eb 5a       	subi	r30, 0xAB	; 171
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	80 81       	ld	r24, Z
    2aca:	98 2f       	mov	r25, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	99 27       	eor	r25, r25
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	60 e0       	ldi	r22, 0x00	; 0
    2ad6:	49 2f       	mov	r20, r25
    2ad8:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8Data>>D_D6)&GetMusk))) ;
    2adc:	fe 01       	movw	r30, r28
    2ade:	eb 5a       	subi	r30, 0xAB	; 171
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 81       	ld	r24, Z
    2ae4:	82 95       	swap	r24
    2ae6:	86 95       	lsr	r24
    2ae8:	86 95       	lsr	r24
    2aea:	83 70       	andi	r24, 0x03	; 3
    2aec:	98 2f       	mov	r25, r24
    2aee:	91 70       	andi	r25, 0x01	; 1
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	63 e0       	ldi	r22, 0x03	; 3
    2af4:	49 2f       	mov	r20, r25
    2af6:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8Data>>D_D5)&GetMusk))) ;
    2afa:	fe 01       	movw	r30, r28
    2afc:	eb 5a       	subi	r30, 0xAB	; 171
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	80 81       	ld	r24, Z
    2b02:	82 95       	swap	r24
    2b04:	86 95       	lsr	r24
    2b06:	87 70       	andi	r24, 0x07	; 7
    2b08:	98 2f       	mov	r25, r24
    2b0a:	91 70       	andi	r25, 0x01	; 1
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	61 e0       	ldi	r22, 0x01	; 1
    2b10:	49 2f       	mov	r20, r25
    2b12:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8Data>>D_D4)&GetMusk))) ;
    2b16:	fe 01       	movw	r30, r28
    2b18:	eb 5a       	subi	r30, 0xAB	; 171
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	82 95       	swap	r24
    2b20:	8f 70       	andi	r24, 0x0F	; 15
    2b22:	98 2f       	mov	r25, r24
    2b24:	91 70       	andi	r25, 0x01	; 1
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	65 e0       	ldi	r22, 0x05	; 5
    2b2a:	49 2f       	mov	r20, r25
    2b2c:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	}
	/* give enable high to start duration of pulse*/
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	67 e0       	ldi	r22, 0x07	; 7
    2b34:	41 e0       	ldi	r20, 0x01	; 1
    2b36:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a0 e2       	ldi	r26, 0x20	; 32
    2b40:	b1 e4       	ldi	r27, 0x41	; 65
    2b42:	8d ab       	std	Y+53, r24	; 0x35
    2b44:	9e ab       	std	Y+54, r25	; 0x36
    2b46:	af ab       	std	Y+55, r26	; 0x37
    2b48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b4c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b4e:	8f a9       	ldd	r24, Y+55	; 0x37
    2b50:	98 ad       	ldd	r25, Y+56	; 0x38
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	4a e7       	ldi	r20, 0x7A	; 122
    2b58:	53 e4       	ldi	r21, 0x43	; 67
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	89 ab       	std	Y+49, r24	; 0x31
    2b64:	9a ab       	std	Y+50, r25	; 0x32
    2b66:	ab ab       	std	Y+51, r26	; 0x33
    2b68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b6a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b6c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b6e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b70:	9c a9       	ldd	r25, Y+52	; 0x34
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e8       	ldi	r20, 0x80	; 128
    2b78:	5f e3       	ldi	r21, 0x3F	; 63
    2b7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b7e:	88 23       	and	r24, r24
    2b80:	2c f4       	brge	.+10     	; 0x2b8c <LCD_voidLatch+0x400>
		__ticks = 1;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	98 ab       	std	Y+48, r25	; 0x30
    2b88:	8f a7       	std	Y+47, r24	; 0x2f
    2b8a:	3f c0       	rjmp	.+126    	; 0x2c0a <LCD_voidLatch+0x47e>
	else if (__tmp > 65535)
    2b8c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b8e:	7a a9       	ldd	r23, Y+50	; 0x32
    2b90:	8b a9       	ldd	r24, Y+51	; 0x33
    2b92:	9c a9       	ldd	r25, Y+52	; 0x34
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	3f ef       	ldi	r19, 0xFF	; 255
    2b98:	4f e7       	ldi	r20, 0x7F	; 127
    2b9a:	57 e4       	ldi	r21, 0x47	; 71
    2b9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba0:	18 16       	cp	r1, r24
    2ba2:	4c f5       	brge	.+82     	; 0x2bf6 <LCD_voidLatch+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ba6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ba8:	8f a9       	ldd	r24, Y+55	; 0x37
    2baa:	98 ad       	ldd	r25, Y+56	; 0x38
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e2       	ldi	r20, 0x20	; 32
    2bb2:	51 e4       	ldi	r21, 0x41	; 65
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	98 ab       	std	Y+48, r25	; 0x30
    2bca:	8f a7       	std	Y+47, r24	; 0x2f
    2bcc:	0f c0       	rjmp	.+30     	; 0x2bec <LCD_voidLatch+0x460>
    2bce:	89 e1       	ldi	r24, 0x19	; 25
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	9e a7       	std	Y+46, r25	; 0x2e
    2bd4:	8d a7       	std	Y+45, r24	; 0x2d
    2bd6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bd8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <LCD_voidLatch+0x44e>
    2bde:	9e a7       	std	Y+46, r25	; 0x2e
    2be0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2be4:	98 a9       	ldd	r25, Y+48	; 0x30
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	98 ab       	std	Y+48, r25	; 0x30
    2bea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bee:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	69 f7       	brne	.-38     	; 0x2bce <LCD_voidLatch+0x442>
    2bf4:	14 c0       	rjmp	.+40     	; 0x2c1e <LCD_voidLatch+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf6:	69 a9       	ldd	r22, Y+49	; 0x31
    2bf8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bfa:	8b a9       	ldd	r24, Y+51	; 0x33
    2bfc:	9c a9       	ldd	r25, Y+52	; 0x34
    2bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	98 ab       	std	Y+48, r25	; 0x30
    2c08:	8f a7       	std	Y+47, r24	; 0x2f
    2c0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c0c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c0e:	9c a7       	std	Y+44, r25	; 0x2c
    2c10:	8b a7       	std	Y+43, r24	; 0x2b
    2c12:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c14:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <LCD_voidLatch+0x48a>
    2c1a:	9c a7       	std	Y+44, r25	; 0x2c
    2c1c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	/*give zero to end the pulse */
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	67 e0       	ldi	r22, 0x07	; 7
    2c22:	40 e0       	ldi	r20, 0x00	; 0
    2c24:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e2       	ldi	r26, 0x20	; 32
    2c2e:	b1 e4       	ldi	r27, 0x41	; 65
    2c30:	8f a3       	std	Y+39, r24	; 0x27
    2c32:	98 a7       	std	Y+40, r25	; 0x28
    2c34:	a9 a7       	std	Y+41, r26	; 0x29
    2c36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	6f a1       	ldd	r22, Y+39	; 0x27
    2c3a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	4a e7       	ldi	r20, 0x7A	; 122
    2c46:	53 e4       	ldi	r21, 0x43	; 67
    2c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	8b a3       	std	Y+35, r24	; 0x23
    2c52:	9c a3       	std	Y+36, r25	; 0x24
    2c54:	ad a3       	std	Y+37, r26	; 0x25
    2c56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c58:	6b a1       	ldd	r22, Y+35	; 0x23
    2c5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e8       	ldi	r20, 0x80	; 128
    2c66:	5f e3       	ldi	r21, 0x3F	; 63
    2c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c6c:	88 23       	and	r24, r24
    2c6e:	2c f4       	brge	.+10     	; 0x2c7a <LCD_voidLatch+0x4ee>
		__ticks = 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	9a a3       	std	Y+34, r25	; 0x22
    2c76:	89 a3       	std	Y+33, r24	; 0x21
    2c78:	3f c0       	rjmp	.+126    	; 0x2cf8 <LCD_voidLatch+0x56c>
	else if (__tmp > 65535)
    2c7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c80:	9e a1       	ldd	r25, Y+38	; 0x26
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	3f ef       	ldi	r19, 0xFF	; 255
    2c86:	4f e7       	ldi	r20, 0x7F	; 127
    2c88:	57 e4       	ldi	r21, 0x47	; 71
    2c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8e:	18 16       	cp	r1, r24
    2c90:	4c f5       	brge	.+82     	; 0x2ce4 <LCD_voidLatch+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c92:	6f a1       	ldd	r22, Y+39	; 0x27
    2c94:	78 a5       	ldd	r23, Y+40	; 0x28
    2c96:	89 a5       	ldd	r24, Y+41	; 0x29
    2c98:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e2       	ldi	r20, 0x20	; 32
    2ca0:	51 e4       	ldi	r21, 0x41	; 65
    2ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9a a3       	std	Y+34, r25	; 0x22
    2cb8:	89 a3       	std	Y+33, r24	; 0x21
    2cba:	0f c0       	rjmp	.+30     	; 0x2cda <LCD_voidLatch+0x54e>
    2cbc:	89 e1       	ldi	r24, 0x19	; 25
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	98 a3       	std	Y+32, r25	; 0x20
    2cc2:	8f 8f       	std	Y+31, r24	; 0x1f
    2cc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cc6:	98 a1       	ldd	r25, Y+32	; 0x20
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <LCD_voidLatch+0x53c>
    2ccc:	98 a3       	std	Y+32, r25	; 0x20
    2cce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cd2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	9a a3       	std	Y+34, r25	; 0x22
    2cd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cda:	89 a1       	ldd	r24, Y+33	; 0x21
    2cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	69 f7       	brne	.-38     	; 0x2cbc <LCD_voidLatch+0x530>
    2ce2:	14 c0       	rjmp	.+40     	; 0x2d0c <LCD_voidLatch+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cea:	9e a1       	ldd	r25, Y+38	; 0x26
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	9a a3       	std	Y+34, r25	; 0x22
    2cf6:	89 a3       	std	Y+33, r24	; 0x21
    2cf8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2cfc:	9e 8f       	std	Y+30, r25	; 0x1e
    2cfe:	8d 8f       	std	Y+29, r24	; 0x1d
    2d00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_voidLatch+0x578>
    2d08:	9e 8f       	std	Y+30, r25	; 0x1e
    2d0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8Data>>D_D3)&GetMusk)));
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	eb 5a       	subi	r30, 0xAB	; 171
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 81       	ld	r24, Z
    2d14:	86 95       	lsr	r24
    2d16:	86 95       	lsr	r24
    2d18:	86 95       	lsr	r24
    2d1a:	98 2f       	mov	r25, r24
    2d1c:	91 70       	andi	r25, 0x01	; 1
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	49 2f       	mov	r20, r25
    2d24:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8Data>>D_D2)&GetMusk))) ;
    2d28:	fe 01       	movw	r30, r28
    2d2a:	eb 5a       	subi	r30, 0xAB	; 171
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 81       	ld	r24, Z
    2d30:	86 95       	lsr	r24
    2d32:	86 95       	lsr	r24
    2d34:	98 2f       	mov	r25, r24
    2d36:	91 70       	andi	r25, 0x01	; 1
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	63 e0       	ldi	r22, 0x03	; 3
    2d3c:	49 2f       	mov	r20, r25
    2d3e:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8Data>>D_D1)&GetMusk))) ;
    2d42:	fe 01       	movw	r30, r28
    2d44:	eb 5a       	subi	r30, 0xAB	; 171
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 81       	ld	r24, Z
    2d4a:	86 95       	lsr	r24
    2d4c:	98 2f       	mov	r25, r24
    2d4e:	91 70       	andi	r25, 0x01	; 1
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	61 e0       	ldi	r22, 0x01	; 1
    2d54:	49 2f       	mov	r20, r25
    2d56:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8Data>>D_D0)&GetMusk))) ;
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	eb 5a       	subi	r30, 0xAB	; 171
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	80 81       	ld	r24, Z
    2d62:	98 2f       	mov	r25, r24
    2d64:	91 70       	andi	r25, 0x01	; 1
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	65 e0       	ldi	r22, 0x05	; 5
    2d6a:	49 2f       	mov	r20, r25
    2d6c:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
#endif

	/* give enable high to start duration of pulse*/
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	67 e0       	ldi	r22, 0x07	; 7
    2d74:	41 e0       	ldi	r20, 0x01	; 1
    2d76:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a0 e2       	ldi	r26, 0x20	; 32
    2d80:	b1 e4       	ldi	r27, 0x41	; 65
    2d82:	89 8f       	std	Y+25, r24	; 0x19
    2d84:	9a 8f       	std	Y+26, r25	; 0x1a
    2d86:	ab 8f       	std	Y+27, r26	; 0x1b
    2d88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	4a e7       	ldi	r20, 0x7A	; 122
    2d98:	53 e4       	ldi	r21, 0x43	; 67
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	8d 8b       	std	Y+21, r24	; 0x15
    2da4:	9e 8b       	std	Y+22, r25	; 0x16
    2da6:	af 8b       	std	Y+23, r26	; 0x17
    2da8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2daa:	6d 89       	ldd	r22, Y+21	; 0x15
    2dac:	7e 89       	ldd	r23, Y+22	; 0x16
    2dae:	8f 89       	ldd	r24, Y+23	; 0x17
    2db0:	98 8d       	ldd	r25, Y+24	; 0x18
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e8       	ldi	r20, 0x80	; 128
    2db8:	5f e3       	ldi	r21, 0x3F	; 63
    2dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dbe:	88 23       	and	r24, r24
    2dc0:	2c f4       	brge	.+10     	; 0x2dcc <LCD_voidLatch+0x640>
		__ticks = 1;
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	9c 8b       	std	Y+20, r25	; 0x14
    2dc8:	8b 8b       	std	Y+19, r24	; 0x13
    2dca:	3f c0       	rjmp	.+126    	; 0x2e4a <LCD_voidLatch+0x6be>
	else if (__tmp > 65535)
    2dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dce:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	3f ef       	ldi	r19, 0xFF	; 255
    2dd8:	4f e7       	ldi	r20, 0x7F	; 127
    2dda:	57 e4       	ldi	r21, 0x47	; 71
    2ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2de0:	18 16       	cp	r1, r24
    2de2:	4c f5       	brge	.+82     	; 0x2e36 <LCD_voidLatch+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de4:	69 8d       	ldd	r22, Y+25	; 0x19
    2de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e2       	ldi	r20, 0x20	; 32
    2df2:	51 e4       	ldi	r21, 0x41	; 65
    2df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	9c 8b       	std	Y+20, r25	; 0x14
    2e0a:	8b 8b       	std	Y+19, r24	; 0x13
    2e0c:	0f c0       	rjmp	.+30     	; 0x2e2c <LCD_voidLatch+0x6a0>
    2e0e:	89 e1       	ldi	r24, 0x19	; 25
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	9a 8b       	std	Y+18, r25	; 0x12
    2e14:	89 8b       	std	Y+17, r24	; 0x11
    2e16:	89 89       	ldd	r24, Y+17	; 0x11
    2e18:	9a 89       	ldd	r25, Y+18	; 0x12
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <LCD_voidLatch+0x68e>
    2e1e:	9a 8b       	std	Y+18, r25	; 0x12
    2e20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e22:	8b 89       	ldd	r24, Y+19	; 0x13
    2e24:	9c 89       	ldd	r25, Y+20	; 0x14
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	9c 8b       	std	Y+20, r25	; 0x14
    2e2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e30:	00 97       	sbiw	r24, 0x00	; 0
    2e32:	69 f7       	brne	.-38     	; 0x2e0e <LCD_voidLatch+0x682>
    2e34:	14 c0       	rjmp	.+40     	; 0x2e5e <LCD_voidLatch+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e36:	6d 89       	ldd	r22, Y+21	; 0x15
    2e38:	7e 89       	ldd	r23, Y+22	; 0x16
    2e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9c 8b       	std	Y+20, r25	; 0x14
    2e48:	8b 8b       	std	Y+19, r24	; 0x13
    2e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4e:	98 8b       	std	Y+16, r25	; 0x10
    2e50:	8f 87       	std	Y+15, r24	; 0x0f
    2e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e54:	98 89       	ldd	r25, Y+16	; 0x10
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <LCD_voidLatch+0x6ca>
    2e5a:	98 8b       	std	Y+16, r25	; 0x10
    2e5c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	/*give zero to end the pulse */
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	67 e0       	ldi	r22, 0x07	; 7
    2e62:	40 e0       	ldi	r20, 0x00	; 0
    2e64:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	a0 e2       	ldi	r26, 0x20	; 32
    2e6e:	b1 e4       	ldi	r27, 0x41	; 65
    2e70:	8b 87       	std	Y+11, r24	; 0x0b
    2e72:	9c 87       	std	Y+12, r25	; 0x0c
    2e74:	ad 87       	std	Y+13, r26	; 0x0d
    2e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	4a e7       	ldi	r20, 0x7A	; 122
    2e86:	53 e4       	ldi	r21, 0x43	; 67
    2e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	8f 83       	std	Y+7, r24	; 0x07
    2e92:	98 87       	std	Y+8, r25	; 0x08
    2e94:	a9 87       	std	Y+9, r26	; 0x09
    2e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e98:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9a:	78 85       	ldd	r23, Y+8	; 0x08
    2e9c:	89 85       	ldd	r24, Y+9	; 0x09
    2e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e8       	ldi	r20, 0x80	; 128
    2ea6:	5f e3       	ldi	r21, 0x3F	; 63
    2ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eac:	88 23       	and	r24, r24
    2eae:	2c f4       	brge	.+10     	; 0x2eba <LCD_voidLatch+0x72e>
		__ticks = 1;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	9e 83       	std	Y+6, r25	; 0x06
    2eb6:	8d 83       	std	Y+5, r24	; 0x05
    2eb8:	3f c0       	rjmp	.+126    	; 0x2f38 <LCD_voidLatch+0x7ac>
	else if (__tmp > 65535)
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	3f ef       	ldi	r19, 0xFF	; 255
    2ec6:	4f e7       	ldi	r20, 0x7F	; 127
    2ec8:	57 e4       	ldi	r21, 0x47	; 71
    2eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ece:	18 16       	cp	r1, r24
    2ed0:	4c f5       	brge	.+82     	; 0x2f24 <LCD_voidLatch+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	40 e2       	ldi	r20, 0x20	; 32
    2ee0:	51 e4       	ldi	r21, 0x41	; 65
    2ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	bc 01       	movw	r22, r24
    2eec:	cd 01       	movw	r24, r26
    2eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
    2efa:	0f c0       	rjmp	.+30     	; 0x2f1a <LCD_voidLatch+0x78e>
    2efc:	89 e1       	ldi	r24, 0x19	; 25
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	9c 83       	std	Y+4, r25	; 0x04
    2f02:	8b 83       	std	Y+3, r24	; 0x03
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	9c 81       	ldd	r25, Y+4	; 0x04
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <LCD_voidLatch+0x77c>
    2f0c:	9c 83       	std	Y+4, r25	; 0x04
    2f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f10:	8d 81       	ldd	r24, Y+5	; 0x05
    2f12:	9e 81       	ldd	r25, Y+6	; 0x06
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1e:	00 97       	sbiw	r24, 0x00	; 0
    2f20:	69 f7       	brne	.-38     	; 0x2efc <LCD_voidLatch+0x770>
    2f22:	14 c0       	rjmp	.+40     	; 0x2f4c <LCD_voidLatch+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f24:	6f 81       	ldd	r22, Y+7	; 0x07
    2f26:	78 85       	ldd	r23, Y+8	; 0x08
    2f28:	89 85       	ldd	r24, Y+9	; 0x09
    2f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	9e 83       	std	Y+6, r25	; 0x06
    2f36:	8d 83       	std	Y+5, r24	; 0x05
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	9a 81       	ldd	r25, Y+2	; 0x02
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <LCD_voidLatch+0x7b8>
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);


}
    2f4c:	cb 5a       	subi	r28, 0xAB	; 171
    2f4e:	df 4f       	sbci	r29, 0xFF	; 255
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	f8 94       	cli
    2f54:	de bf       	out	0x3e, r29	; 62
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	cd bf       	out	0x3d, r28	; 61
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	1f 91       	pop	r17
    2f60:	0f 91       	pop	r16
    2f62:	08 95       	ret

00002f64 <LCD_enuDisplayCharacter>:
ES_t LCD_enuDisplayCharacter(u8 Copy_u8character)
{
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <LCD_enuDisplayCharacter+0x6>
    2f6a:	00 d0       	rcall	.+0      	; 0x2f6c <LCD_enuDisplayCharacter+0x8>
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_errorState=ES_NOK;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	8a 83       	std	Y+2, r24	; 0x02
	DIO_enuSet_PinValue(RS_PORT , RS_PIN ,DIO_u8HIGH);
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	60 e0       	ldi	r22, 0x00	; 0
    2f7a:	41 e0       	ldi	r20, 0x01	; 1
    2f7c:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	u8 Local_u8errorCheck=0;
    2f80:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidLatch( Copy_u8character );
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	0e 94 c6 13 	call	0x278c	; 0x278c <LCD_voidLatch>
	if(Local_u8errorCheck==1)
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	81 30       	cpi	r24, 0x01	; 1
    2f8c:	19 f4       	brne	.+6      	; 0x2f94 <LCD_enuDisplayCharacter+0x30>
	{
		return Local_errorState;
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	8c 83       	std	Y+4, r24	; 0x04
    2f92:	03 c0       	rjmp	.+6      	; 0x2f9a <LCD_enuDisplayCharacter+0x36>
	}
	else
	{
		Local_errorState=ES_OK;
    2f94:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_errorState;
    2f96:	8a 81       	ldd	r24, Y+2	; 0x02
    2f98:	8c 83       	std	Y+4, r24	; 0x04
    2f9a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <LCD_enuSendCommond>:

ES_t LCD_enuSendCommond(u8 Copy_u8commond)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <LCD_enuSendCommond+0x6>
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <LCD_enuSendCommond+0x8>
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	8b 83       	std	Y+3, r24	; 0x03
	/* for check on error of functions */
	ES_t Local_errorState=ES_NOK;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errorCheck=0;
    2fbc:	19 82       	std	Y+1, r1	; 0x01

	/* set RS pin low for command */

	DIO_enuSet_PinValue(RS_PORT , RS_PIN ,DIO_u8LOW);
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>

	LCD_voidLatch( Copy_u8commond  );
    2fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fca:	0e 94 c6 13 	call	0x278c	; 0x278c <LCD_voidLatch>

	if(Local_u8errorCheck==1)
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	81 30       	cpi	r24, 0x01	; 1
    2fd2:	19 f4       	brne	.+6      	; 0x2fda <LCD_enuSendCommond+0x30>
	{
		return Local_errorState;
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	8c 83       	std	Y+4, r24	; 0x04
    2fd8:	03 c0       	rjmp	.+6      	; 0x2fe0 <LCD_enuSendCommond+0x36>
	}
	else
	{
		Local_errorState=ES_OK;
    2fda:	1a 82       	std	Y+2, r1	; 0x02
	}


	return Local_errorState;
    2fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fde:	8c 83       	std	Y+4, r24	; 0x04
    2fe0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <LCD_invidSendCommond>:

static inline void LCD_invidSendCommond(u8 Copy_u8commond)
{
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	ab 97       	sbiw	r28, 0x2b	; 43
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_enuSet_PinValue(RS_PORT , RS_PIN ,DIO_u8LOW);
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	40 e0       	ldi	r20, 0x00	; 0
    300c:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>

	DIO_enuSet_PinValue(RW_PORT , RW_PIN ,DIO_u8LOW);
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	65 e0       	ldi	r22, 0x05	; 5
    3014:	40 e0       	ldi	r20, 0x00	; 0
    3016:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>

	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	67 e0       	ldi	r22, 0x07	; 7
    301e:	40 e0       	ldi	r20, 0x00	; 0
    3020:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>

	DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8commond>>D_D7)&GetMusk)));
    3024:	8b a5       	ldd	r24, Y+43	; 0x2b
    3026:	98 2f       	mov	r25, r24
    3028:	99 1f       	adc	r25, r25
    302a:	99 27       	eor	r25, r25
    302c:	99 1f       	adc	r25, r25
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	60 e0       	ldi	r22, 0x00	; 0
    3032:	49 2f       	mov	r20, r25
    3034:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8commond>>D_D6)&GetMusk)));
    3038:	8b a5       	ldd	r24, Y+43	; 0x2b
    303a:	82 95       	swap	r24
    303c:	86 95       	lsr	r24
    303e:	86 95       	lsr	r24
    3040:	83 70       	andi	r24, 0x03	; 3
    3042:	98 2f       	mov	r25, r24
    3044:	91 70       	andi	r25, 0x01	; 1
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	63 e0       	ldi	r22, 0x03	; 3
    304a:	49 2f       	mov	r20, r25
    304c:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8commond>>D_D5)&GetMusk)));
    3050:	8b a5       	ldd	r24, Y+43	; 0x2b
    3052:	82 95       	swap	r24
    3054:	86 95       	lsr	r24
    3056:	87 70       	andi	r24, 0x07	; 7
    3058:	98 2f       	mov	r25, r24
    305a:	91 70       	andi	r25, 0x01	; 1
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	49 2f       	mov	r20, r25
    3062:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8commond>>D_D4)&GetMusk)));
    3066:	8b a5       	ldd	r24, Y+43	; 0x2b
    3068:	82 95       	swap	r24
    306a:	8f 70       	andi	r24, 0x0F	; 15
    306c:	98 2f       	mov	r25, r24
    306e:	91 70       	andi	r25, 0x01	; 1
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	65 e0       	ldi	r22, 0x05	; 5
    3074:	49 2f       	mov	r20, r25
    3076:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
	_delay_ms(10);

	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
#elif LCD_MODE==FOUR_BIT
	if(Copy_u8commond==Fun_Set_4b)
    307a:	8b a5       	ldd	r24, Y+43	; 0x2b
    307c:	88 32       	cpi	r24, 0x28	; 40
    307e:	09 f0       	breq	.+2      	; 0x3082 <LCD_invidSendCommond+0x92>
    3080:	a7 c0       	rjmp	.+334    	; 0x31d0 <LCD_invidSendCommond+0x1e0>
	{
		DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	67 e0       	ldi	r22, 0x07	; 7
    3086:	41 e0       	ldi	r20, 0x01	; 1
    3088:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	a0 e2       	ldi	r26, 0x20	; 32
    3092:	b1 e4       	ldi	r27, 0x41	; 65
    3094:	8f a3       	std	Y+39, r24	; 0x27
    3096:	98 a7       	std	Y+40, r25	; 0x28
    3098:	a9 a7       	std	Y+41, r26	; 0x29
    309a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309c:	6f a1       	ldd	r22, Y+39	; 0x27
    309e:	78 a5       	ldd	r23, Y+40	; 0x28
    30a0:	89 a5       	ldd	r24, Y+41	; 0x29
    30a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	4a e7       	ldi	r20, 0x7A	; 122
    30aa:	53 e4       	ldi	r21, 0x43	; 67
    30ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	8b a3       	std	Y+35, r24	; 0x23
    30b6:	9c a3       	std	Y+36, r25	; 0x24
    30b8:	ad a3       	std	Y+37, r26	; 0x25
    30ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30bc:	6b a1       	ldd	r22, Y+35	; 0x23
    30be:	7c a1       	ldd	r23, Y+36	; 0x24
    30c0:	8d a1       	ldd	r24, Y+37	; 0x25
    30c2:	9e a1       	ldd	r25, Y+38	; 0x26
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	40 e8       	ldi	r20, 0x80	; 128
    30ca:	5f e3       	ldi	r21, 0x3F	; 63
    30cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30d0:	88 23       	and	r24, r24
    30d2:	2c f4       	brge	.+10     	; 0x30de <LCD_invidSendCommond+0xee>
		__ticks = 1;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	9a a3       	std	Y+34, r25	; 0x22
    30da:	89 a3       	std	Y+33, r24	; 0x21
    30dc:	3f c0       	rjmp	.+126    	; 0x315c <LCD_invidSendCommond+0x16c>
	else if (__tmp > 65535)
    30de:	6b a1       	ldd	r22, Y+35	; 0x23
    30e0:	7c a1       	ldd	r23, Y+36	; 0x24
    30e2:	8d a1       	ldd	r24, Y+37	; 0x25
    30e4:	9e a1       	ldd	r25, Y+38	; 0x26
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	3f ef       	ldi	r19, 0xFF	; 255
    30ea:	4f e7       	ldi	r20, 0x7F	; 127
    30ec:	57 e4       	ldi	r21, 0x47	; 71
    30ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30f2:	18 16       	cp	r1, r24
    30f4:	4c f5       	brge	.+82     	; 0x3148 <LCD_invidSendCommond+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f6:	6f a1       	ldd	r22, Y+39	; 0x27
    30f8:	78 a5       	ldd	r23, Y+40	; 0x28
    30fa:	89 a5       	ldd	r24, Y+41	; 0x29
    30fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e2       	ldi	r20, 0x20	; 32
    3104:	51 e4       	ldi	r21, 0x41	; 65
    3106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	bc 01       	movw	r22, r24
    3110:	cd 01       	movw	r24, r26
    3112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	9a a3       	std	Y+34, r25	; 0x22
    311c:	89 a3       	std	Y+33, r24	; 0x21
    311e:	0f c0       	rjmp	.+30     	; 0x313e <LCD_invidSendCommond+0x14e>
    3120:	89 e1       	ldi	r24, 0x19	; 25
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	98 a3       	std	Y+32, r25	; 0x20
    3126:	8f 8f       	std	Y+31, r24	; 0x1f
    3128:	8f 8d       	ldd	r24, Y+31	; 0x1f
    312a:	98 a1       	ldd	r25, Y+32	; 0x20
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <LCD_invidSendCommond+0x13c>
    3130:	98 a3       	std	Y+32, r25	; 0x20
    3132:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3134:	89 a1       	ldd	r24, Y+33	; 0x21
    3136:	9a a1       	ldd	r25, Y+34	; 0x22
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	9a a3       	std	Y+34, r25	; 0x22
    313c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313e:	89 a1       	ldd	r24, Y+33	; 0x21
    3140:	9a a1       	ldd	r25, Y+34	; 0x22
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	69 f7       	brne	.-38     	; 0x3120 <LCD_invidSendCommond+0x130>
    3146:	14 c0       	rjmp	.+40     	; 0x3170 <LCD_invidSendCommond+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3148:	6b a1       	ldd	r22, Y+35	; 0x23
    314a:	7c a1       	ldd	r23, Y+36	; 0x24
    314c:	8d a1       	ldd	r24, Y+37	; 0x25
    314e:	9e a1       	ldd	r25, Y+38	; 0x26
    3150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	9a a3       	std	Y+34, r25	; 0x22
    315a:	89 a3       	std	Y+33, r24	; 0x21
    315c:	89 a1       	ldd	r24, Y+33	; 0x21
    315e:	9a a1       	ldd	r25, Y+34	; 0x22
    3160:	9e 8f       	std	Y+30, r25	; 0x1e
    3162:	8d 8f       	std	Y+29, r24	; 0x1d
    3164:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3166:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	f1 f7       	brne	.-4      	; 0x3168 <LCD_invidSendCommond+0x178>
    316c:	9e 8f       	std	Y+30, r25	; 0x1e
    316e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	67 e0       	ldi	r22, 0x07	; 7
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>

		DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8commond>>D_D7)&GetMusk)));
    317a:	8b a5       	ldd	r24, Y+43	; 0x2b
    317c:	98 2f       	mov	r25, r24
    317e:	99 1f       	adc	r25, r25
    3180:	99 27       	eor	r25, r25
    3182:	99 1f       	adc	r25, r25
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	60 e0       	ldi	r22, 0x00	; 0
    3188:	49 2f       	mov	r20, r25
    318a:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8commond>>D_D6)&GetMusk)));
    318e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3190:	82 95       	swap	r24
    3192:	86 95       	lsr	r24
    3194:	86 95       	lsr	r24
    3196:	83 70       	andi	r24, 0x03	; 3
    3198:	98 2f       	mov	r25, r24
    319a:	91 70       	andi	r25, 0x01	; 1
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	63 e0       	ldi	r22, 0x03	; 3
    31a0:	49 2f       	mov	r20, r25
    31a2:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8commond>>D_D5)&GetMusk)));
    31a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    31a8:	82 95       	swap	r24
    31aa:	86 95       	lsr	r24
    31ac:	87 70       	andi	r24, 0x07	; 7
    31ae:	98 2f       	mov	r25, r24
    31b0:	91 70       	andi	r25, 0x01	; 1
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	61 e0       	ldi	r22, 0x01	; 1
    31b6:	49 2f       	mov	r20, r25
    31b8:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8commond>>D_D4)&GetMusk)));
    31bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    31be:	82 95       	swap	r24
    31c0:	8f 70       	andi	r24, 0x0F	; 15
    31c2:	98 2f       	mov	r25, r24
    31c4:	91 70       	andi	r25, 0x01	; 1
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	65 e0       	ldi	r22, 0x05	; 5
    31ca:	49 2f       	mov	r20, r25
    31cc:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	}
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	67 e0       	ldi	r22, 0x07	; 7
    31d4:	41 e0       	ldi	r20, 0x01	; 1
    31d6:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	a0 e2       	ldi	r26, 0x20	; 32
    31e0:	b1 e4       	ldi	r27, 0x41	; 65
    31e2:	89 8f       	std	Y+25, r24	; 0x19
    31e4:	9a 8f       	std	Y+26, r25	; 0x1a
    31e6:	ab 8f       	std	Y+27, r26	; 0x1b
    31e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ea:	69 8d       	ldd	r22, Y+25	; 0x19
    31ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	4a e7       	ldi	r20, 0x7A	; 122
    31f8:	53 e4       	ldi	r21, 0x43	; 67
    31fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	8d 8b       	std	Y+21, r24	; 0x15
    3204:	9e 8b       	std	Y+22, r25	; 0x16
    3206:	af 8b       	std	Y+23, r26	; 0x17
    3208:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    320a:	6d 89       	ldd	r22, Y+21	; 0x15
    320c:	7e 89       	ldd	r23, Y+22	; 0x16
    320e:	8f 89       	ldd	r24, Y+23	; 0x17
    3210:	98 8d       	ldd	r25, Y+24	; 0x18
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e8       	ldi	r20, 0x80	; 128
    3218:	5f e3       	ldi	r21, 0x3F	; 63
    321a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    321e:	88 23       	and	r24, r24
    3220:	2c f4       	brge	.+10     	; 0x322c <LCD_invidSendCommond+0x23c>
		__ticks = 1;
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	9c 8b       	std	Y+20, r25	; 0x14
    3228:	8b 8b       	std	Y+19, r24	; 0x13
    322a:	3f c0       	rjmp	.+126    	; 0x32aa <LCD_invidSendCommond+0x2ba>
	else if (__tmp > 65535)
    322c:	6d 89       	ldd	r22, Y+21	; 0x15
    322e:	7e 89       	ldd	r23, Y+22	; 0x16
    3230:	8f 89       	ldd	r24, Y+23	; 0x17
    3232:	98 8d       	ldd	r25, Y+24	; 0x18
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	3f ef       	ldi	r19, 0xFF	; 255
    3238:	4f e7       	ldi	r20, 0x7F	; 127
    323a:	57 e4       	ldi	r21, 0x47	; 71
    323c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3240:	18 16       	cp	r1, r24
    3242:	4c f5       	brge	.+82     	; 0x3296 <LCD_invidSendCommond+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3244:	69 8d       	ldd	r22, Y+25	; 0x19
    3246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    324a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	40 e2       	ldi	r20, 0x20	; 32
    3252:	51 e4       	ldi	r21, 0x41	; 65
    3254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	bc 01       	movw	r22, r24
    325e:	cd 01       	movw	r24, r26
    3260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	9c 8b       	std	Y+20, r25	; 0x14
    326a:	8b 8b       	std	Y+19, r24	; 0x13
    326c:	0f c0       	rjmp	.+30     	; 0x328c <LCD_invidSendCommond+0x29c>
    326e:	89 e1       	ldi	r24, 0x19	; 25
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	9a 8b       	std	Y+18, r25	; 0x12
    3274:	89 8b       	std	Y+17, r24	; 0x11
    3276:	89 89       	ldd	r24, Y+17	; 0x11
    3278:	9a 89       	ldd	r25, Y+18	; 0x12
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	f1 f7       	brne	.-4      	; 0x327a <LCD_invidSendCommond+0x28a>
    327e:	9a 8b       	std	Y+18, r25	; 0x12
    3280:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3282:	8b 89       	ldd	r24, Y+19	; 0x13
    3284:	9c 89       	ldd	r25, Y+20	; 0x14
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	9c 8b       	std	Y+20, r25	; 0x14
    328a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328c:	8b 89       	ldd	r24, Y+19	; 0x13
    328e:	9c 89       	ldd	r25, Y+20	; 0x14
    3290:	00 97       	sbiw	r24, 0x00	; 0
    3292:	69 f7       	brne	.-38     	; 0x326e <LCD_invidSendCommond+0x27e>
    3294:	14 c0       	rjmp	.+40     	; 0x32be <LCD_invidSendCommond+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3296:	6d 89       	ldd	r22, Y+21	; 0x15
    3298:	7e 89       	ldd	r23, Y+22	; 0x16
    329a:	8f 89       	ldd	r24, Y+23	; 0x17
    329c:	98 8d       	ldd	r25, Y+24	; 0x18
    329e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	9c 8b       	std	Y+20, r25	; 0x14
    32a8:	8b 8b       	std	Y+19, r24	; 0x13
    32aa:	8b 89       	ldd	r24, Y+19	; 0x13
    32ac:	9c 89       	ldd	r25, Y+20	; 0x14
    32ae:	98 8b       	std	Y+16, r25	; 0x10
    32b0:	8f 87       	std	Y+15, r24	; 0x0f
    32b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b4:	98 89       	ldd	r25, Y+16	; 0x10
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	f1 f7       	brne	.-4      	; 0x32b6 <LCD_invidSendCommond+0x2c6>
    32ba:	98 8b       	std	Y+16, r25	; 0x10
    32bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	67 e0       	ldi	r22, 0x07	; 7
    32c2:	40 e0       	ldi	r20, 0x00	; 0
    32c4:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>

	DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8commond>>D_D3)&GetMusk)));
    32c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    32ca:	86 95       	lsr	r24
    32cc:	86 95       	lsr	r24
    32ce:	86 95       	lsr	r24
    32d0:	98 2f       	mov	r25, r24
    32d2:	91 70       	andi	r25, 0x01	; 1
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	60 e0       	ldi	r22, 0x00	; 0
    32d8:	49 2f       	mov	r20, r25
    32da:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8commond>>D_D2)&GetMusk)));
    32de:	8b a5       	ldd	r24, Y+43	; 0x2b
    32e0:	86 95       	lsr	r24
    32e2:	86 95       	lsr	r24
    32e4:	98 2f       	mov	r25, r24
    32e6:	91 70       	andi	r25, 0x01	; 1
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	63 e0       	ldi	r22, 0x03	; 3
    32ec:	49 2f       	mov	r20, r25
    32ee:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8commond>>D_D1)&GetMusk)));
    32f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    32f4:	86 95       	lsr	r24
    32f6:	98 2f       	mov	r25, r24
    32f8:	91 70       	andi	r25, 0x01	; 1
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	61 e0       	ldi	r22, 0x01	; 1
    32fe:	49 2f       	mov	r20, r25
    3300:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8commond>>D_D0)&GetMusk)));
    3304:	8b a5       	ldd	r24, Y+43	; 0x2b
    3306:	98 2f       	mov	r25, r24
    3308:	91 70       	andi	r25, 0x01	; 1
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	65 e0       	ldi	r22, 0x05	; 5
    330e:	49 2f       	mov	r20, r25
    3310:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
#endif
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	67 e0       	ldi	r22, 0x07	; 7
    3318:	41 e0       	ldi	r20, 0x01	; 1
    331a:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	a0 e2       	ldi	r26, 0x20	; 32
    3324:	b1 e4       	ldi	r27, 0x41	; 65
    3326:	8b 87       	std	Y+11, r24	; 0x0b
    3328:	9c 87       	std	Y+12, r25	; 0x0c
    332a:	ad 87       	std	Y+13, r26	; 0x0d
    332c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3330:	7c 85       	ldd	r23, Y+12	; 0x0c
    3332:	8d 85       	ldd	r24, Y+13	; 0x0d
    3334:	9e 85       	ldd	r25, Y+14	; 0x0e
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	4a e7       	ldi	r20, 0x7A	; 122
    333c:	53 e4       	ldi	r21, 0x43	; 67
    333e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	8f 83       	std	Y+7, r24	; 0x07
    3348:	98 87       	std	Y+8, r25	; 0x08
    334a:	a9 87       	std	Y+9, r26	; 0x09
    334c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    334e:	6f 81       	ldd	r22, Y+7	; 0x07
    3350:	78 85       	ldd	r23, Y+8	; 0x08
    3352:	89 85       	ldd	r24, Y+9	; 0x09
    3354:	9a 85       	ldd	r25, Y+10	; 0x0a
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e8       	ldi	r20, 0x80	; 128
    335c:	5f e3       	ldi	r21, 0x3F	; 63
    335e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3362:	88 23       	and	r24, r24
    3364:	2c f4       	brge	.+10     	; 0x3370 <LCD_invidSendCommond+0x380>
		__ticks = 1;
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	9e 83       	std	Y+6, r25	; 0x06
    336c:	8d 83       	std	Y+5, r24	; 0x05
    336e:	3f c0       	rjmp	.+126    	; 0x33ee <LCD_invidSendCommond+0x3fe>
	else if (__tmp > 65535)
    3370:	6f 81       	ldd	r22, Y+7	; 0x07
    3372:	78 85       	ldd	r23, Y+8	; 0x08
    3374:	89 85       	ldd	r24, Y+9	; 0x09
    3376:	9a 85       	ldd	r25, Y+10	; 0x0a
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	3f ef       	ldi	r19, 0xFF	; 255
    337c:	4f e7       	ldi	r20, 0x7F	; 127
    337e:	57 e4       	ldi	r21, 0x47	; 71
    3380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3384:	18 16       	cp	r1, r24
    3386:	4c f5       	brge	.+82     	; 0x33da <LCD_invidSendCommond+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3388:	6b 85       	ldd	r22, Y+11	; 0x0b
    338a:	7c 85       	ldd	r23, Y+12	; 0x0c
    338c:	8d 85       	ldd	r24, Y+13	; 0x0d
    338e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e2       	ldi	r20, 0x20	; 32
    3396:	51 e4       	ldi	r21, 0x41	; 65
    3398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	bc 01       	movw	r22, r24
    33a2:	cd 01       	movw	r24, r26
    33a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	9e 83       	std	Y+6, r25	; 0x06
    33ae:	8d 83       	std	Y+5, r24	; 0x05
    33b0:	0f c0       	rjmp	.+30     	; 0x33d0 <LCD_invidSendCommond+0x3e0>
    33b2:	89 e1       	ldi	r24, 0x19	; 25
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9c 83       	std	Y+4, r25	; 0x04
    33b8:	8b 83       	std	Y+3, r24	; 0x03
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	9c 81       	ldd	r25, Y+4	; 0x04
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	f1 f7       	brne	.-4      	; 0x33be <LCD_invidSendCommond+0x3ce>
    33c2:	9c 83       	std	Y+4, r25	; 0x04
    33c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c6:	8d 81       	ldd	r24, Y+5	; 0x05
    33c8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	9e 83       	std	Y+6, r25	; 0x06
    33ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d0:	8d 81       	ldd	r24, Y+5	; 0x05
    33d2:	9e 81       	ldd	r25, Y+6	; 0x06
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	69 f7       	brne	.-38     	; 0x33b2 <LCD_invidSendCommond+0x3c2>
    33d8:	14 c0       	rjmp	.+40     	; 0x3402 <LCD_invidSendCommond+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33da:	6f 81       	ldd	r22, Y+7	; 0x07
    33dc:	78 85       	ldd	r23, Y+8	; 0x08
    33de:	89 85       	ldd	r24, Y+9	; 0x09
    33e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	9e 83       	std	Y+6, r25	; 0x06
    33ec:	8d 83       	std	Y+5, r24	; 0x05
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	9e 81       	ldd	r25, Y+6	; 0x06
    33f2:	9a 83       	std	Y+2, r25	; 0x02
    33f4:	89 83       	std	Y+1, r24	; 0x01
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	9a 81       	ldd	r25, Y+2	; 0x02
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	f1 f7       	brne	.-4      	; 0x33fa <LCD_invidSendCommond+0x40a>
    33fe:	9a 83       	std	Y+2, r25	; 0x02
    3400:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	67 e0       	ldi	r22, 0x07	; 7
    3406:	40 e0       	ldi	r20, 0x00	; 0
    3408:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
}
    340c:	ab 96       	adiw	r28, 0x2b	; 43
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	08 95       	ret

0000341e <LCD_enuSendString>:

ES_t LCD_enuSendString(const char *Copy_pcString)
{
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	00 d0       	rcall	.+0      	; 0x3424 <LCD_enuSendString+0x6>
    3424:	00 d0       	rcall	.+0      	; 0x3426 <LCD_enuSendString+0x8>
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	9c 83       	std	Y+4, r25	; 0x04
    342c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pcString != NULL)
    3432:	8b 81       	ldd	r24, Y+3	; 0x03
    3434:	9c 81       	ldd	r25, Y+4	; 0x04
    3436:	00 97       	sbiw	r24, 0x00	; 0
    3438:	09 f1       	breq	.+66     	; 0x347c <LCD_enuSendString+0x5e>
	{
		s8 Local_s8_Iter_String=0;
    343a:	19 82       	std	Y+1, r1	; 0x01
    343c:	11 c0       	rjmp	.+34     	; 0x3460 <LCD_enuSendString+0x42>
		while(Copy_pcString[Local_s8_Iter_String]!= 0)
		{
			Local_enuErrorState=LCD_enuDisplayCharacter(Copy_pcString[Local_s8_Iter_String]);
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	28 2f       	mov	r18, r24
    3442:	33 27       	eor	r19, r19
    3444:	27 fd       	sbrc	r18, 7
    3446:	30 95       	com	r19
    3448:	8b 81       	ldd	r24, Y+3	; 0x03
    344a:	9c 81       	ldd	r25, Y+4	; 0x04
    344c:	fc 01       	movw	r30, r24
    344e:	e2 0f       	add	r30, r18
    3450:	f3 1f       	adc	r31, r19
    3452:	80 81       	ld	r24, Z
    3454:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCD_enuDisplayCharacter>
    3458:	8a 83       	std	Y+2, r24	; 0x02
			Local_s8_Iter_String++;
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	8f 5f       	subi	r24, 0xFF	; 255
    345e:	89 83       	std	Y+1, r24	; 0x01
{
	ES_t Local_enuErrorState=ES_NOK;
	if(Copy_pcString != NULL)
	{
		s8 Local_s8_Iter_String=0;
		while(Copy_pcString[Local_s8_Iter_String]!= 0)
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	28 2f       	mov	r18, r24
    3464:	33 27       	eor	r19, r19
    3466:	27 fd       	sbrc	r18, 7
    3468:	30 95       	com	r19
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	9c 81       	ldd	r25, Y+4	; 0x04
    346e:	fc 01       	movw	r30, r24
    3470:	e2 0f       	add	r30, r18
    3472:	f3 1f       	adc	r31, r19
    3474:	80 81       	ld	r24, Z
    3476:	88 23       	and	r24, r24
    3478:	11 f7       	brne	.-60     	; 0x343e <LCD_enuSendString+0x20>
    347a:	02 c0       	rjmp	.+4      	; 0x3480 <LCD_enuSendString+0x62>
			Local_s8_Iter_String++;
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    347c:	82 e0       	ldi	r24, 0x02	; 2
    347e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
    3480:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3482:	0f 90       	pop	r0
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <LCD_voidGotoXY>:
void LCD_voidGotoXY(u8 Copy_u8X_Pos , u8 Copy_u8Y_Pos)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	00 d0       	rcall	.+0      	; 0x3496 <LCD_voidGotoXY+0x6>
    3496:	0f 92       	push	r0
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	8a 83       	std	Y+2, r24	; 0x02
    349e:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Address;
	if(Copy_u8X_Pos == 0)
    34a0:	8a 81       	ldd	r24, Y+2	; 0x02
    34a2:	88 23       	and	r24, r24
    34a4:	19 f4       	brne	.+6      	; 0x34ac <LCD_voidGotoXY+0x1c>
	{
		Local_u8Address=Copy_u8Y_Pos;
    34a6:	8b 81       	ldd	r24, Y+3	; 0x03
    34a8:	89 83       	std	Y+1, r24	; 0x01
    34aa:	06 c0       	rjmp	.+12     	; 0x34b8 <LCD_voidGotoXY+0x28>
	}
	else if(Copy_u8X_Pos == 1)
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	81 30       	cpi	r24, 0x01	; 1
    34b0:	19 f4       	brne	.+6      	; 0x34b8 <LCD_voidGotoXY+0x28>
	{
		Local_u8Address=Copy_u8Y_Pos + 0x40;
    34b2:	8b 81       	ldd	r24, Y+3	; 0x03
    34b4:	80 5c       	subi	r24, 0xC0	; 192
    34b6:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_enuSendCommond(0x80 |Local_u8Address);
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	80 68       	ori	r24, 0x80	; 128
    34bc:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_enuSendCommond>

}
    34c0:	0f 90       	pop	r0
    34c2:	0f 90       	pop	r0
    34c4:	0f 90       	pop	r0
    34c6:	cf 91       	pop	r28
    34c8:	df 91       	pop	r29
    34ca:	08 95       	ret

000034cc <LCD_voidDisplaySpecialCharacter>:
void LCD_voidDisplaySpecialCharacter(u8 *Copy_pau8Array_Data , u8 Copy_u8Block_number ,u8 Copy_u8Xpos , u8 Copy_u8Ypos)
{
    34cc:	df 93       	push	r29
    34ce:	cf 93       	push	r28
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	27 97       	sbiw	r28, 0x07	; 7
    34d6:	0f b6       	in	r0, 0x3f	; 63
    34d8:	f8 94       	cli
    34da:	de bf       	out	0x3e, r29	; 62
    34dc:	0f be       	out	0x3f, r0	; 63
    34de:	cd bf       	out	0x3d, r28	; 61
    34e0:	9c 83       	std	Y+4, r25	; 0x04
    34e2:	8b 83       	std	Y+3, r24	; 0x03
    34e4:	6d 83       	std	Y+5, r22	; 0x05
    34e6:	4e 83       	std	Y+6, r20	; 0x06
    34e8:	2f 83       	std	Y+7, r18	; 0x07
	/*Calculate   CGRAM  Address */
	u8 Local_u8CGRAM_Address=Copy_u8Block_number*8;
    34ea:	8d 81       	ldd	r24, Y+5	; 0x05
    34ec:	88 2f       	mov	r24, r24
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	88 0f       	add	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	8a 83       	std	Y+2, r24	; 0x02

	/* Send address CGROM command to Lcd ,With setting bit 6 , clearing bit 7 */
	LCD_enuSendCommond(Local_u8CGRAM_Address+64);
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	80 5c       	subi	r24, 0xC0	; 192
    3502:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_enuSendCommond>

	/* Counter to block to loop of array character*/
	u8 Local_u8Block_Counter=0;
    3506:	19 82       	std	Y+1, r1	; 0x01

	/* Write the pattern in CGRam*/
	for(Local_u8Block_Counter = 0 ; Local_u8Block_Counter <8 ; Local_u8Block_Counter ++)
    3508:	19 82       	std	Y+1, r1	; 0x01
    350a:	0e c0       	rjmp	.+28     	; 0x3528 <LCD_voidDisplaySpecialCharacter+0x5c>
	{
		LCD_enuDisplayCharacter(Copy_pau8Array_Data[Local_u8Block_Counter]);
    350c:	89 81       	ldd	r24, Y+1	; 0x01
    350e:	28 2f       	mov	r18, r24
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	9c 81       	ldd	r25, Y+4	; 0x04
    3516:	fc 01       	movw	r30, r24
    3518:	e2 0f       	add	r30, r18
    351a:	f3 1f       	adc	r31, r19
    351c:	80 81       	ld	r24, Z
    351e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCD_enuDisplayCharacter>

	/* Counter to block to loop of array character*/
	u8 Local_u8Block_Counter=0;

	/* Write the pattern in CGRam*/
	for(Local_u8Block_Counter = 0 ; Local_u8Block_Counter <8 ; Local_u8Block_Counter ++)
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	8f 5f       	subi	r24, 0xFF	; 255
    3526:	89 83       	std	Y+1, r24	; 0x01
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	88 30       	cpi	r24, 0x08	; 8
    352c:	78 f3       	brcs	.-34     	; 0x350c <LCD_voidDisplaySpecialCharacter+0x40>
	{
		LCD_enuDisplayCharacter(Copy_pau8Array_Data[Local_u8Block_Counter]);
	}

	/*Go to DDRAM to display the pattern */
	LCD_voidGotoXY(Copy_u8Xpos,Copy_u8Ypos);
    352e:	8e 81       	ldd	r24, Y+6	; 0x06
    3530:	6f 81       	ldd	r22, Y+7	; 0x07
    3532:	0e 94 48 1a 	call	0x3490	; 0x3490 <LCD_voidGotoXY>

	/*Display the pattern  Written in CGRam*/
	LCD_enuDisplayCharacter(Copy_u8Block_number);
    3536:	8d 81       	ldd	r24, Y+5	; 0x05
    3538:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCD_enuDisplayCharacter>
}
    353c:	27 96       	adiw	r28, 0x07	; 7
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	de bf       	out	0x3e, r29	; 62
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	cd bf       	out	0x3d, r28	; 61
    3548:	cf 91       	pop	r28
    354a:	df 91       	pop	r29
    354c:	08 95       	ret

0000354e <LCD_voidDisplayIntegerNum>:


void LCD_voidDisplayIntegerNum(s32 Copy_s32Num)
{
    354e:	df 93       	push	r29
    3550:	cf 93       	push	r28
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	a7 97       	sbiw	r28, 0x27	; 39
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	cd bf       	out	0x3d, r28	; 61
    3562:	6c a3       	std	Y+36, r22	; 0x24
    3564:	7d a3       	std	Y+37, r23	; 0x25
    3566:	8e a3       	std	Y+38, r24	; 0x26
    3568:	9f a3       	std	Y+39, r25	; 0x27
	if(Copy_s32Num!=0)
    356a:	8c a1       	ldd	r24, Y+36	; 0x24
    356c:	9d a1       	ldd	r25, Y+37	; 0x25
    356e:	ae a1       	ldd	r26, Y+38	; 0x26
    3570:	bf a1       	ldd	r27, Y+39	; 0x27
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	a1 05       	cpc	r26, r1
    3576:	b1 05       	cpc	r27, r1
    3578:	09 f4       	brne	.+2      	; 0x357c <LCD_voidDisplayIntegerNum+0x2e>
    357a:	61 c0       	rjmp	.+194    	; 0x363e <LCD_voidDisplayIntegerNum+0xf0>
	{
		if(Copy_s32Num<0)
    357c:	8c a1       	ldd	r24, Y+36	; 0x24
    357e:	9d a1       	ldd	r25, Y+37	; 0x25
    3580:	ae a1       	ldd	r26, Y+38	; 0x26
    3582:	bf a1       	ldd	r27, Y+39	; 0x27
    3584:	bb 23       	and	r27, r27
    3586:	94 f4       	brge	.+36     	; 0x35ac <LCD_voidDisplayIntegerNum+0x5e>
		{
			Copy_s32Num*=-1;
    3588:	8c a1       	ldd	r24, Y+36	; 0x24
    358a:	9d a1       	ldd	r25, Y+37	; 0x25
    358c:	ae a1       	ldd	r26, Y+38	; 0x26
    358e:	bf a1       	ldd	r27, Y+39	; 0x27
    3590:	b0 95       	com	r27
    3592:	a0 95       	com	r26
    3594:	90 95       	com	r25
    3596:	81 95       	neg	r24
    3598:	9f 4f       	sbci	r25, 0xFF	; 255
    359a:	af 4f       	sbci	r26, 0xFF	; 255
    359c:	bf 4f       	sbci	r27, 0xFF	; 255
    359e:	8c a3       	std	Y+36, r24	; 0x24
    35a0:	9d a3       	std	Y+37, r25	; 0x25
    35a2:	ae a3       	std	Y+38, r26	; 0x26
    35a4:	bf a3       	std	Y+39, r27	; 0x27
			LCD_enuDisplayCharacter('-');
    35a6:	8d e2       	ldi	r24, 0x2D	; 45
    35a8:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCD_enuDisplayCharacter>

		}
		s8 Local_u8A_numbers[33];
		s8 *Local_u8pa_catchNumber=&Local_u8A_numbers[32];
    35ac:	ce 01       	movw	r24, r28
    35ae:	03 96       	adiw	r24, 0x03	; 3
    35b0:	80 96       	adiw	r24, 0x20	; 32
    35b2:	9a 83       	std	Y+2, r25	; 0x02
    35b4:	89 83       	std	Y+1, r24	; 0x01
		*Local_u8pa_catchNumber='\0';
    35b6:	e9 81       	ldd	r30, Y+1	; 0x01
    35b8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ba:	10 82       	st	Z, r1
		Local_u8pa_catchNumber--;
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	9a 81       	ldd	r25, Y+2	; 0x02
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	9a 83       	std	Y+2, r25	; 0x02
    35c4:	89 83       	std	Y+1, r24	; 0x01
    35c6:	29 c0       	rjmp	.+82     	; 0x361a <LCD_voidDisplayIntegerNum+0xcc>
		while(Copy_s32Num)
		{
			*Local_u8pa_catchNumber=(Copy_s32Num % 10 )+48;/*to convert number to string */
    35c8:	8c a1       	ldd	r24, Y+36	; 0x24
    35ca:	9d a1       	ldd	r25, Y+37	; 0x25
    35cc:	ae a1       	ldd	r26, Y+38	; 0x26
    35ce:	bf a1       	ldd	r27, Y+39	; 0x27
    35d0:	2a e0       	ldi	r18, 0x0A	; 10
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	40 e0       	ldi	r20, 0x00	; 0
    35d6:	50 e0       	ldi	r21, 0x00	; 0
    35d8:	bc 01       	movw	r22, r24
    35da:	cd 01       	movw	r24, r26
    35dc:	0e 94 7f 21 	call	0x42fe	; 0x42fe <__divmodsi4>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	80 5d       	subi	r24, 0xD0	; 208
    35e6:	e9 81       	ldd	r30, Y+1	; 0x01
    35e8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ea:	80 83       	st	Z, r24
			Local_u8pa_catchNumber--;
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	9a 81       	ldd	r25, Y+2	; 0x02
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	9a 83       	std	Y+2, r25	; 0x02
    35f4:	89 83       	std	Y+1, r24	; 0x01
			Copy_s32Num /=10;
    35f6:	8c a1       	ldd	r24, Y+36	; 0x24
    35f8:	9d a1       	ldd	r25, Y+37	; 0x25
    35fa:	ae a1       	ldd	r26, Y+38	; 0x26
    35fc:	bf a1       	ldd	r27, Y+39	; 0x27
    35fe:	2a e0       	ldi	r18, 0x0A	; 10
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e0       	ldi	r20, 0x00	; 0
    3604:	50 e0       	ldi	r21, 0x00	; 0
    3606:	bc 01       	movw	r22, r24
    3608:	cd 01       	movw	r24, r26
    360a:	0e 94 7f 21 	call	0x42fe	; 0x42fe <__divmodsi4>
    360e:	da 01       	movw	r26, r20
    3610:	c9 01       	movw	r24, r18
    3612:	8c a3       	std	Y+36, r24	; 0x24
    3614:	9d a3       	std	Y+37, r25	; 0x25
    3616:	ae a3       	std	Y+38, r26	; 0x26
    3618:	bf a3       	std	Y+39, r27	; 0x27
		}
		s8 Local_u8A_numbers[33];
		s8 *Local_u8pa_catchNumber=&Local_u8A_numbers[32];
		*Local_u8pa_catchNumber='\0';
		Local_u8pa_catchNumber--;
		while(Copy_s32Num)
    361a:	8c a1       	ldd	r24, Y+36	; 0x24
    361c:	9d a1       	ldd	r25, Y+37	; 0x25
    361e:	ae a1       	ldd	r26, Y+38	; 0x26
    3620:	bf a1       	ldd	r27, Y+39	; 0x27
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	a1 05       	cpc	r26, r1
    3626:	b1 05       	cpc	r27, r1
    3628:	79 f6       	brne	.-98     	; 0x35c8 <LCD_voidDisplayIntegerNum+0x7a>
		{
			*Local_u8pa_catchNumber=(Copy_s32Num % 10 )+48;/*to convert number to string */
			Local_u8pa_catchNumber--;
			Copy_s32Num /=10;
		}
		Local_u8pa_catchNumber++;
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	9a 81       	ldd	r25, Y+2	; 0x02
    362e:	01 96       	adiw	r24, 0x01	; 1
    3630:	9a 83       	std	Y+2, r25	; 0x02
    3632:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuSendString(Local_u8pa_catchNumber);
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	9a 81       	ldd	r25, Y+2	; 0x02
    3638:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_enuSendString>
    363c:	04 c0       	rjmp	.+8      	; 0x3646 <LCD_voidDisplayIntegerNum+0xf8>
	}

	else
	{
		LCD_enuSendString("0");
    363e:	80 e6       	ldi	r24, 0x60	; 96
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_enuSendString>
	}
}
    3646:	a7 96       	adiw	r28, 0x27	; 39
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	f8 94       	cli
    364c:	de bf       	out	0x3e, r29	; 62
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	cd bf       	out	0x3d, r28	; 61
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <LCD_voidClearDisplay>:
void LCD_voidClearDisplay(void)
{
    3658:	df 93       	push	r29
    365a:	cf 93       	push	r28
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
	LCD_enuSendCommond(Clear_Display);
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_enuSendCommond>
}
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	08 95       	ret

0000366c <LCD_voidGotoSecondLine>:

void LCD_voidGotoSecondLine(void)
{
    366c:	df 93       	push	r29
    366e:	cf 93       	push	r28
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGotoXY(1,0);
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	60 e0       	ldi	r22, 0x00	; 0
    3678:	0e 94 48 1a 	call	0x3490	; 0x3490 <LCD_voidGotoXY>
}
    367c:	cf 91       	pop	r28
    367e:	df 91       	pop	r29
    3680:	08 95       	ret

00003682 <LCD_voidDisplayNumberIn4Digit>:
void LCD_voidDisplayNumberIn4Digit(u16 Copy_u16Number)
{
    3682:	df 93       	push	r29
    3684:	cf 93       	push	r28
    3686:	00 d0       	rcall	.+0      	; 0x3688 <LCD_voidDisplayNumberIn4Digit+0x6>
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	9a 83       	std	Y+2, r25	; 0x02
    368e:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuDisplayCharacter(((Copy_u16Number%10000)/1000)+'0');
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	9a 81       	ldd	r25, Y+2	; 0x02
    3694:	20 e1       	ldi	r18, 0x10	; 16
    3696:	37 e2       	ldi	r19, 0x27	; 39
    3698:	b9 01       	movw	r22, r18
    369a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__udivmodhi4>
    369e:	28 ee       	ldi	r18, 0xE8	; 232
    36a0:	33 e0       	ldi	r19, 0x03	; 3
    36a2:	b9 01       	movw	r22, r18
    36a4:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__udivmodhi4>
    36a8:	cb 01       	movw	r24, r22
    36aa:	80 5d       	subi	r24, 0xD0	; 208
    36ac:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCD_enuDisplayCharacter>
	LCD_enuDisplayCharacter(((Copy_u16Number%1000)/100)+'0');
    36b0:	89 81       	ldd	r24, Y+1	; 0x01
    36b2:	9a 81       	ldd	r25, Y+2	; 0x02
    36b4:	28 ee       	ldi	r18, 0xE8	; 232
    36b6:	33 e0       	ldi	r19, 0x03	; 3
    36b8:	b9 01       	movw	r22, r18
    36ba:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__udivmodhi4>
    36be:	24 e6       	ldi	r18, 0x64	; 100
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	b9 01       	movw	r22, r18
    36c4:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__udivmodhi4>
    36c8:	cb 01       	movw	r24, r22
    36ca:	80 5d       	subi	r24, 0xD0	; 208
    36cc:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCD_enuDisplayCharacter>
	LCD_enuDisplayCharacter(((Copy_u16Number%100)/10)+'0');
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	9a 81       	ldd	r25, Y+2	; 0x02
    36d4:	24 e6       	ldi	r18, 0x64	; 100
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	b9 01       	movw	r22, r18
    36da:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__udivmodhi4>
    36de:	2a e0       	ldi	r18, 0x0A	; 10
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	b9 01       	movw	r22, r18
    36e4:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__udivmodhi4>
    36e8:	cb 01       	movw	r24, r22
    36ea:	80 5d       	subi	r24, 0xD0	; 208
    36ec:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCD_enuDisplayCharacter>
	LCD_enuDisplayCharacter(((Copy_u16Number%10)/1)+'0');
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	2a e0       	ldi	r18, 0x0A	; 10
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	b9 01       	movw	r22, r18
    36fa:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__udivmodhi4>
    36fe:	80 5d       	subi	r24, 0xD0	; 208
    3700:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCD_enuDisplayCharacter>
}
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <S_Segment_enuInit>:
#include "E:\AVR_Projects\TAsk_Interuupt\MCAL\DIO_int.h"
#include "S_Segment_config.h"
#include "S_Segment_priv.h"

ES_t S_Segment_enuInit(void)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	27 97       	sbiw	r28, 0x07	; 7
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_NOK;
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32Check=0;
    3726:	1a 82       	std	Y+2, r1	; 0x02
    3728:	1b 82       	std	Y+3, r1	; 0x03
    372a:	1c 82       	std	Y+4, r1	; 0x04
    372c:	1d 82       	std	Y+5, r1	; 0x05
	Local_u32Check  =  DIO_enuSet_PinDirection(SEG_APORT , SEG_APIN , DIO_u8OUTPUT);
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	63 e0       	ldi	r22, 0x03	; 3
    3732:	41 e0       	ldi	r20, 0x01	; 1
    3734:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    3738:	88 2f       	mov	r24, r24
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	a0 e0       	ldi	r26, 0x00	; 0
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	8a 83       	std	Y+2, r24	; 0x02
    3742:	9b 83       	std	Y+3, r25	; 0x03
    3744:	ac 83       	std	Y+4, r26	; 0x04
    3746:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSet_PinDirection(SEG_BPORT , SEG_BPIN , DIO_u8OUTPUT)<<3);
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	64 e0       	ldi	r22, 0x04	; 4
    374c:	41 e0       	ldi	r20, 0x01	; 1
    374e:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    3752:	88 2f       	mov	r24, r24
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	88 0f       	add	r24, r24
    3758:	99 1f       	adc	r25, r25
    375a:	88 0f       	add	r24, r24
    375c:	99 1f       	adc	r25, r25
    375e:	88 0f       	add	r24, r24
    3760:	99 1f       	adc	r25, r25
    3762:	9c 01       	movw	r18, r24
    3764:	44 27       	eor	r20, r20
    3766:	37 fd       	sbrc	r19, 7
    3768:	40 95       	com	r20
    376a:	54 2f       	mov	r21, r20
    376c:	8a 81       	ldd	r24, Y+2	; 0x02
    376e:	9b 81       	ldd	r25, Y+3	; 0x03
    3770:	ac 81       	ldd	r26, Y+4	; 0x04
    3772:	bd 81       	ldd	r27, Y+5	; 0x05
    3774:	82 2b       	or	r24, r18
    3776:	93 2b       	or	r25, r19
    3778:	a4 2b       	or	r26, r20
    377a:	b5 2b       	or	r27, r21
    377c:	8a 83       	std	Y+2, r24	; 0x02
    377e:	9b 83       	std	Y+3, r25	; 0x03
    3780:	ac 83       	std	Y+4, r26	; 0x04
    3782:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSet_PinDirection(SEG_CPORT , SEG_CPIN , DIO_u8OUTPUT)<<6);
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	63 e0       	ldi	r22, 0x03	; 3
    3788:	41 e0       	ldi	r20, 0x01	; 1
    378a:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    378e:	88 2f       	mov	r24, r24
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	00 24       	eor	r0, r0
    3794:	96 95       	lsr	r25
    3796:	87 95       	ror	r24
    3798:	07 94       	ror	r0
    379a:	96 95       	lsr	r25
    379c:	87 95       	ror	r24
    379e:	07 94       	ror	r0
    37a0:	98 2f       	mov	r25, r24
    37a2:	80 2d       	mov	r24, r0
    37a4:	9c 01       	movw	r18, r24
    37a6:	44 27       	eor	r20, r20
    37a8:	37 fd       	sbrc	r19, 7
    37aa:	40 95       	com	r20
    37ac:	54 2f       	mov	r21, r20
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	ac 81       	ldd	r26, Y+4	; 0x04
    37b4:	bd 81       	ldd	r27, Y+5	; 0x05
    37b6:	82 2b       	or	r24, r18
    37b8:	93 2b       	or	r25, r19
    37ba:	a4 2b       	or	r26, r20
    37bc:	b5 2b       	or	r27, r21
    37be:	8a 83       	std	Y+2, r24	; 0x02
    37c0:	9b 83       	std	Y+3, r25	; 0x03
    37c2:	ac 83       	std	Y+4, r26	; 0x04
    37c4:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSet_PinDirection(SEG_DPORT , SEG_DPIN , DIO_u8OUTPUT)<<9);
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	64 e0       	ldi	r22, 0x04	; 4
    37ca:	41 e0       	ldi	r20, 0x01	; 1
    37cc:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    37d0:	88 2f       	mov	r24, r24
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	98 2f       	mov	r25, r24
    37d6:	88 27       	eor	r24, r24
    37d8:	99 0f       	add	r25, r25
    37da:	9c 01       	movw	r18, r24
    37dc:	44 27       	eor	r20, r20
    37de:	37 fd       	sbrc	r19, 7
    37e0:	40 95       	com	r20
    37e2:	54 2f       	mov	r21, r20
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	9b 81       	ldd	r25, Y+3	; 0x03
    37e8:	ac 81       	ldd	r26, Y+4	; 0x04
    37ea:	bd 81       	ldd	r27, Y+5	; 0x05
    37ec:	82 2b       	or	r24, r18
    37ee:	93 2b       	or	r25, r19
    37f0:	a4 2b       	or	r26, r20
    37f2:	b5 2b       	or	r27, r21
    37f4:	8a 83       	std	Y+2, r24	; 0x02
    37f6:	9b 83       	std	Y+3, r25	; 0x03
    37f8:	ac 83       	std	Y+4, r26	; 0x04
    37fa:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSet_PinDirection(SEG_EPORT , SEG_EPIN , DIO_u8OUTPUT)<<12);
    37fc:	82 e0       	ldi	r24, 0x02	; 2
    37fe:	62 e0       	ldi	r22, 0x02	; 2
    3800:	41 e0       	ldi	r20, 0x01	; 1
    3802:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    3806:	88 2f       	mov	r24, r24
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	98 2f       	mov	r25, r24
    380c:	88 27       	eor	r24, r24
    380e:	92 95       	swap	r25
    3810:	90 7f       	andi	r25, 0xF0	; 240
    3812:	9c 01       	movw	r18, r24
    3814:	44 27       	eor	r20, r20
    3816:	37 fd       	sbrc	r19, 7
    3818:	40 95       	com	r20
    381a:	54 2f       	mov	r21, r20
    381c:	8a 81       	ldd	r24, Y+2	; 0x02
    381e:	9b 81       	ldd	r25, Y+3	; 0x03
    3820:	ac 81       	ldd	r26, Y+4	; 0x04
    3822:	bd 81       	ldd	r27, Y+5	; 0x05
    3824:	82 2b       	or	r24, r18
    3826:	93 2b       	or	r25, r19
    3828:	a4 2b       	or	r26, r20
    382a:	b5 2b       	or	r27, r21
    382c:	8a 83       	std	Y+2, r24	; 0x02
    382e:	9b 83       	std	Y+3, r25	; 0x03
    3830:	ac 83       	std	Y+4, r26	; 0x04
    3832:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSet_PinDirection(SEG_FPORT , SEG_FPIN , DIO_u8OUTPUT)<<15);
    3834:	82 e0       	ldi	r24, 0x02	; 2
    3836:	63 e0       	ldi	r22, 0x03	; 3
    3838:	41 e0       	ldi	r20, 0x01	; 1
    383a:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    383e:	88 2f       	mov	r24, r24
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	99 27       	eor	r25, r25
    3844:	86 95       	lsr	r24
    3846:	97 95       	ror	r25
    3848:	88 27       	eor	r24, r24
    384a:	9c 01       	movw	r18, r24
    384c:	44 27       	eor	r20, r20
    384e:	37 fd       	sbrc	r19, 7
    3850:	40 95       	com	r20
    3852:	54 2f       	mov	r21, r20
    3854:	8a 81       	ldd	r24, Y+2	; 0x02
    3856:	9b 81       	ldd	r25, Y+3	; 0x03
    3858:	ac 81       	ldd	r26, Y+4	; 0x04
    385a:	bd 81       	ldd	r27, Y+5	; 0x05
    385c:	82 2b       	or	r24, r18
    385e:	93 2b       	or	r25, r19
    3860:	a4 2b       	or	r26, r20
    3862:	b5 2b       	or	r27, r21
    3864:	8a 83       	std	Y+2, r24	; 0x02
    3866:	9b 83       	std	Y+3, r25	; 0x03
    3868:	ac 83       	std	Y+4, r26	; 0x04
    386a:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= ((u8)DIO_enuSet_PinDirection(SEG_GPORT , SEG_GPIN , DIO_u8OUTPUT)<<18);
    386c:	83 e0       	ldi	r24, 0x03	; 3
    386e:	60 e0       	ldi	r22, 0x00	; 0
    3870:	41 e0       	ldi	r20, 0x01	; 1
    3872:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
    3876:	88 2f       	mov	r24, r24
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	99 27       	eor	r25, r25
    387c:	88 27       	eor	r24, r24
    387e:	9c 01       	movw	r18, r24
    3880:	44 27       	eor	r20, r20
    3882:	37 fd       	sbrc	r19, 7
    3884:	40 95       	com	r20
    3886:	54 2f       	mov	r21, r20
    3888:	8a 81       	ldd	r24, Y+2	; 0x02
    388a:	9b 81       	ldd	r25, Y+3	; 0x03
    388c:	ac 81       	ldd	r26, Y+4	; 0x04
    388e:	bd 81       	ldd	r27, Y+5	; 0x05
    3890:	82 2b       	or	r24, r18
    3892:	93 2b       	or	r25, r19
    3894:	a4 2b       	or	r26, r20
    3896:	b5 2b       	or	r27, r21
    3898:	8a 83       	std	Y+2, r24	; 0x02
    389a:	9b 83       	std	Y+3, r25	; 0x03
    389c:	ac 83       	std	Y+4, r26	; 0x04
    389e:	bd 83       	std	Y+5, r27	; 0x05
 u8 Local_u8Ilit=0;
    38a0:	19 82       	std	Y+1, r1	; 0x01
 for(Local_u8Ilit=0 ; Local_u8Ilit < sizeof(Local_u8Ilit)*8 ; Local_u8Ilit+=3)
    38a2:	19 82       	std	Y+1, r1	; 0x01
    38a4:	1e c0       	rjmp	.+60     	; 0x38e2 <S_Segment_enuInit+0x1d4>
 {
	 if( ( ( (Local_u32Check)>>Local_u8Ilit) &7 ) !=ES_OK )
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	28 2f       	mov	r18, r24
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	9b 81       	ldd	r25, Y+3	; 0x03
    38b0:	ac 81       	ldd	r26, Y+4	; 0x04
    38b2:	bd 81       	ldd	r27, Y+5	; 0x05
    38b4:	02 2e       	mov	r0, r18
    38b6:	04 c0       	rjmp	.+8      	; 0x38c0 <S_Segment_enuInit+0x1b2>
    38b8:	b6 95       	lsr	r27
    38ba:	a7 95       	ror	r26
    38bc:	97 95       	ror	r25
    38be:	87 95       	ror	r24
    38c0:	0a 94       	dec	r0
    38c2:	d2 f7       	brpl	.-12     	; 0x38b8 <S_Segment_enuInit+0x1aa>
    38c4:	87 70       	andi	r24, 0x07	; 7
    38c6:	90 70       	andi	r25, 0x00	; 0
    38c8:	a0 70       	andi	r26, 0x00	; 0
    38ca:	b0 70       	andi	r27, 0x00	; 0
    38cc:	00 97       	sbiw	r24, 0x00	; 0
    38ce:	a1 05       	cpc	r26, r1
    38d0:	b1 05       	cpc	r27, r1
    38d2:	19 f0       	breq	.+6      	; 0x38da <S_Segment_enuInit+0x1cc>
	 {
		 return Local_enuErrorState;
    38d4:	8e 81       	ldd	r24, Y+6	; 0x06
    38d6:	8f 83       	std	Y+7, r24	; 0x07
    38d8:	09 c0       	rjmp	.+18     	; 0x38ec <S_Segment_enuInit+0x1de>
	 }
	 else
	 {
		 Local_enuErrorState=ES_OK;
    38da:	1e 82       	std	Y+6, r1	; 0x06
	Local_u32Check |= (DIO_enuSet_PinDirection(SEG_DPORT , SEG_DPIN , DIO_u8OUTPUT)<<9);
	Local_u32Check |= (DIO_enuSet_PinDirection(SEG_EPORT , SEG_EPIN , DIO_u8OUTPUT)<<12);
	Local_u32Check |= (DIO_enuSet_PinDirection(SEG_FPORT , SEG_FPIN , DIO_u8OUTPUT)<<15);
	Local_u32Check |= ((u8)DIO_enuSet_PinDirection(SEG_GPORT , SEG_GPIN , DIO_u8OUTPUT)<<18);
 u8 Local_u8Ilit=0;
 for(Local_u8Ilit=0 ; Local_u8Ilit < sizeof(Local_u8Ilit)*8 ; Local_u8Ilit+=3)
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	8d 5f       	subi	r24, 0xFD	; 253
    38e0:	89 83       	std	Y+1, r24	; 0x01
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	88 30       	cpi	r24, 0x08	; 8
    38e6:	f8 f2       	brcs	.-66     	; 0x38a6 <S_Segment_enuInit+0x198>
#elif SEG_DOT==NOT_CONNECTED || SEG_DOTPORT==NOT_CONNECTED
#else
#error"Your Input Dot Pin is out of Range"
#endif

	return Local_enuErrorState;
    38e8:	8e 81       	ldd	r24, Y+6	; 0x06
    38ea:	8f 83       	std	Y+7, r24	; 0x07
    38ec:	8f 81       	ldd	r24, Y+7	; 0x07
}
    38ee:	27 96       	adiw	r28, 0x07	; 7
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	de bf       	out	0x3e, r29	; 62
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	cd bf       	out	0x3d, r28	; 61
    38fa:	cf 91       	pop	r28
    38fc:	df 91       	pop	r29
    38fe:	08 95       	ret

00003900 <S_Segment_enuDisplayNum>:


ES_t S_Segment_enuDisplayNum(u8 Copy_u8Num)
{
    3900:	df 93       	push	r29
    3902:	cf 93       	push	r28
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
    3908:	28 97       	sbiw	r28, 0x08	; 8
    390a:	0f b6       	in	r0, 0x3f	; 63
    390c:	f8 94       	cli
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	0f be       	out	0x3f, r0	; 63
    3912:	cd bf       	out	0x3d, r28	; 61
    3914:	8f 83       	std	Y+7, r24	; 0x07
	ES_t Local_enuErrorState=ES_NOK;
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32Check=0;
    391a:	1a 82       	std	Y+2, r1	; 0x02
    391c:	1b 82       	std	Y+3, r1	; 0x03
    391e:	1c 82       	std	Y+4, r1	; 0x04
    3920:	1d 82       	std	Y+5, r1	; 0x05
	if(Copy_u8Num<10)
    3922:	8f 81       	ldd	r24, Y+7	; 0x07
    3924:	8a 30       	cpi	r24, 0x0A	; 10
    3926:	08 f0       	brcs	.+2      	; 0x392a <S_Segment_enuDisplayNum+0x2a>
    3928:	fd c0       	rjmp	.+506    	; 0x3b24 <S_Segment_enuDisplayNum+0x224>
	{
#if SEG_TYPE==COMMON_CATHODE
		Local_u32Check  =DIO_enuSet_PinValue(SEG_APORT , SEG_APIN , ((SEG_Au8DiaplayNum[Copy_u8Num]>>Pin0 ) &Get_State_Num));
    392a:	8f 81       	ldd	r24, Y+7	; 0x07
    392c:	88 2f       	mov	r24, r24
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	fc 01       	movw	r30, r24
    3932:	e1 54       	subi	r30, 0x41	; 65
    3934:	ff 4f       	sbci	r31, 0xFF	; 255
    3936:	80 81       	ld	r24, Z
    3938:	98 2f       	mov	r25, r24
    393a:	91 70       	andi	r25, 0x01	; 1
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	63 e0       	ldi	r22, 0x03	; 3
    3940:	49 2f       	mov	r20, r25
    3942:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3946:	88 2f       	mov	r24, r24
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	a0 e0       	ldi	r26, 0x00	; 0
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	8a 83       	std	Y+2, r24	; 0x02
    3950:	9b 83       	std	Y+3, r25	; 0x03
    3952:	ac 83       	std	Y+4, r26	; 0x04
    3954:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |=DIO_enuSet_PinValue(SEG_BPORT , SEG_BPIN , ((SEG_Au8DiaplayNum[Copy_u8Num]>>Pin1 ) &Get_State_Num));
    3956:	8f 81       	ldd	r24, Y+7	; 0x07
    3958:	88 2f       	mov	r24, r24
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	fc 01       	movw	r30, r24
    395e:	e1 54       	subi	r30, 0x41	; 65
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	80 81       	ld	r24, Z
    3964:	86 95       	lsr	r24
    3966:	98 2f       	mov	r25, r24
    3968:	91 70       	andi	r25, 0x01	; 1
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	64 e0       	ldi	r22, 0x04	; 4
    396e:	49 2f       	mov	r20, r25
    3970:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3974:	28 2f       	mov	r18, r24
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	40 e0       	ldi	r20, 0x00	; 0
    397a:	50 e0       	ldi	r21, 0x00	; 0
    397c:	8a 81       	ldd	r24, Y+2	; 0x02
    397e:	9b 81       	ldd	r25, Y+3	; 0x03
    3980:	ac 81       	ldd	r26, Y+4	; 0x04
    3982:	bd 81       	ldd	r27, Y+5	; 0x05
    3984:	82 2b       	or	r24, r18
    3986:	93 2b       	or	r25, r19
    3988:	a4 2b       	or	r26, r20
    398a:	b5 2b       	or	r27, r21
    398c:	8a 83       	std	Y+2, r24	; 0x02
    398e:	9b 83       	std	Y+3, r25	; 0x03
    3990:	ac 83       	std	Y+4, r26	; 0x04
    3992:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |=DIO_enuSet_PinValue(SEG_CPORT , SEG_CPIN , ((SEG_Au8DiaplayNum[Copy_u8Num]>>Pin2 ) &Get_State_Num));
    3994:	8f 81       	ldd	r24, Y+7	; 0x07
    3996:	88 2f       	mov	r24, r24
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	fc 01       	movw	r30, r24
    399c:	e1 54       	subi	r30, 0x41	; 65
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	80 81       	ld	r24, Z
    39a2:	86 95       	lsr	r24
    39a4:	86 95       	lsr	r24
    39a6:	98 2f       	mov	r25, r24
    39a8:	91 70       	andi	r25, 0x01	; 1
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	63 e0       	ldi	r22, 0x03	; 3
    39ae:	49 2f       	mov	r20, r25
    39b0:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    39b4:	28 2f       	mov	r18, r24
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	40 e0       	ldi	r20, 0x00	; 0
    39ba:	50 e0       	ldi	r21, 0x00	; 0
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	9b 81       	ldd	r25, Y+3	; 0x03
    39c0:	ac 81       	ldd	r26, Y+4	; 0x04
    39c2:	bd 81       	ldd	r27, Y+5	; 0x05
    39c4:	82 2b       	or	r24, r18
    39c6:	93 2b       	or	r25, r19
    39c8:	a4 2b       	or	r26, r20
    39ca:	b5 2b       	or	r27, r21
    39cc:	8a 83       	std	Y+2, r24	; 0x02
    39ce:	9b 83       	std	Y+3, r25	; 0x03
    39d0:	ac 83       	std	Y+4, r26	; 0x04
    39d2:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |=DIO_enuSet_PinValue(SEG_DPORT , SEG_DPIN , ((SEG_Au8DiaplayNum[Copy_u8Num]>>Pin3 ) &Get_State_Num));
    39d4:	8f 81       	ldd	r24, Y+7	; 0x07
    39d6:	88 2f       	mov	r24, r24
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	fc 01       	movw	r30, r24
    39dc:	e1 54       	subi	r30, 0x41	; 65
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	80 81       	ld	r24, Z
    39e2:	86 95       	lsr	r24
    39e4:	86 95       	lsr	r24
    39e6:	86 95       	lsr	r24
    39e8:	98 2f       	mov	r25, r24
    39ea:	91 70       	andi	r25, 0x01	; 1
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	64 e0       	ldi	r22, 0x04	; 4
    39f0:	49 2f       	mov	r20, r25
    39f2:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    39f6:	28 2f       	mov	r18, r24
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 e0       	ldi	r20, 0x00	; 0
    39fc:	50 e0       	ldi	r21, 0x00	; 0
    39fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3a00:	9b 81       	ldd	r25, Y+3	; 0x03
    3a02:	ac 81       	ldd	r26, Y+4	; 0x04
    3a04:	bd 81       	ldd	r27, Y+5	; 0x05
    3a06:	82 2b       	or	r24, r18
    3a08:	93 2b       	or	r25, r19
    3a0a:	a4 2b       	or	r26, r20
    3a0c:	b5 2b       	or	r27, r21
    3a0e:	8a 83       	std	Y+2, r24	; 0x02
    3a10:	9b 83       	std	Y+3, r25	; 0x03
    3a12:	ac 83       	std	Y+4, r26	; 0x04
    3a14:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |=DIO_enuSet_PinValue(SEG_EPORT , SEG_EPIN , ((SEG_Au8DiaplayNum[Copy_u8Num]>>Pin4 ) &Get_State_Num));
    3a16:	8f 81       	ldd	r24, Y+7	; 0x07
    3a18:	88 2f       	mov	r24, r24
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	e1 54       	subi	r30, 0x41	; 65
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	80 81       	ld	r24, Z
    3a24:	82 95       	swap	r24
    3a26:	8f 70       	andi	r24, 0x0F	; 15
    3a28:	98 2f       	mov	r25, r24
    3a2a:	91 70       	andi	r25, 0x01	; 1
    3a2c:	82 e0       	ldi	r24, 0x02	; 2
    3a2e:	62 e0       	ldi	r22, 0x02	; 2
    3a30:	49 2f       	mov	r20, r25
    3a32:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3a36:	28 2f       	mov	r18, r24
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e0       	ldi	r20, 0x00	; 0
    3a3c:	50 e0       	ldi	r21, 0x00	; 0
    3a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a40:	9b 81       	ldd	r25, Y+3	; 0x03
    3a42:	ac 81       	ldd	r26, Y+4	; 0x04
    3a44:	bd 81       	ldd	r27, Y+5	; 0x05
    3a46:	82 2b       	or	r24, r18
    3a48:	93 2b       	or	r25, r19
    3a4a:	a4 2b       	or	r26, r20
    3a4c:	b5 2b       	or	r27, r21
    3a4e:	8a 83       	std	Y+2, r24	; 0x02
    3a50:	9b 83       	std	Y+3, r25	; 0x03
    3a52:	ac 83       	std	Y+4, r26	; 0x04
    3a54:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |=DIO_enuSet_PinValue(SEG_FPORT , SEG_FPIN , ((SEG_Au8DiaplayNum[Copy_u8Num]>>Pin5 ) &Get_State_Num));
    3a56:	8f 81       	ldd	r24, Y+7	; 0x07
    3a58:	88 2f       	mov	r24, r24
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	e1 54       	subi	r30, 0x41	; 65
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	80 81       	ld	r24, Z
    3a64:	82 95       	swap	r24
    3a66:	86 95       	lsr	r24
    3a68:	87 70       	andi	r24, 0x07	; 7
    3a6a:	98 2f       	mov	r25, r24
    3a6c:	91 70       	andi	r25, 0x01	; 1
    3a6e:	82 e0       	ldi	r24, 0x02	; 2
    3a70:	63 e0       	ldi	r22, 0x03	; 3
    3a72:	49 2f       	mov	r20, r25
    3a74:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3a78:	28 2f       	mov	r18, r24
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e0       	ldi	r20, 0x00	; 0
    3a7e:	50 e0       	ldi	r21, 0x00	; 0
    3a80:	8a 81       	ldd	r24, Y+2	; 0x02
    3a82:	9b 81       	ldd	r25, Y+3	; 0x03
    3a84:	ac 81       	ldd	r26, Y+4	; 0x04
    3a86:	bd 81       	ldd	r27, Y+5	; 0x05
    3a88:	82 2b       	or	r24, r18
    3a8a:	93 2b       	or	r25, r19
    3a8c:	a4 2b       	or	r26, r20
    3a8e:	b5 2b       	or	r27, r21
    3a90:	8a 83       	std	Y+2, r24	; 0x02
    3a92:	9b 83       	std	Y+3, r25	; 0x03
    3a94:	ac 83       	std	Y+4, r26	; 0x04
    3a96:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |=DIO_enuSet_PinValue(SEG_GPORT , SEG_GPIN , ((SEG_Au8DiaplayNum[Copy_u8Num]>>Pin6 ) &Get_State_Num));
    3a98:	8f 81       	ldd	r24, Y+7	; 0x07
    3a9a:	88 2f       	mov	r24, r24
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	e1 54       	subi	r30, 0x41	; 65
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	80 81       	ld	r24, Z
    3aa6:	82 95       	swap	r24
    3aa8:	86 95       	lsr	r24
    3aaa:	86 95       	lsr	r24
    3aac:	83 70       	andi	r24, 0x03	; 3
    3aae:	98 2f       	mov	r25, r24
    3ab0:	91 70       	andi	r25, 0x01	; 1
    3ab2:	83 e0       	ldi	r24, 0x03	; 3
    3ab4:	60 e0       	ldi	r22, 0x00	; 0
    3ab6:	49 2f       	mov	r20, r25
    3ab8:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3abc:	28 2f       	mov	r18, r24
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	40 e0       	ldi	r20, 0x00	; 0
    3ac2:	50 e0       	ldi	r21, 0x00	; 0
    3ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac8:	ac 81       	ldd	r26, Y+4	; 0x04
    3aca:	bd 81       	ldd	r27, Y+5	; 0x05
    3acc:	82 2b       	or	r24, r18
    3ace:	93 2b       	or	r25, r19
    3ad0:	a4 2b       	or	r26, r20
    3ad2:	b5 2b       	or	r27, r21
    3ad4:	8a 83       	std	Y+2, r24	; 0x02
    3ad6:	9b 83       	std	Y+3, r25	; 0x03
    3ad8:	ac 83       	std	Y+4, r26	; 0x04
    3ada:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |=DIO_enuSet_PinValue(SEG_FPORT , SEG_FPIN , !((SEG_Au8DiaplayNum[Copy_u8Num]>>Pin5 ) &Get_State_Num));
		Local_u32Check |=DIO_enuSet_PinValue(SEG_GPORT , SEG_GPIN , !((SEG_Au8DiaplayNum[Copy_u8Num]>>Pin6 ) &Get_State_Num));
#else
#error "SEG TYPE NOT AVALILABLE !!"
#endif
		u8 Local_u8Ilit=0;
    3adc:	19 82       	std	Y+1, r1	; 0x01
		 for(Local_u8Ilit=0 ; Local_u8Ilit < sizeof(Local_u8Ilit)*8 ; Local_u8Ilit+=3)
    3ade:	19 82       	std	Y+1, r1	; 0x01
    3ae0:	1e c0       	rjmp	.+60     	; 0x3b1e <S_Segment_enuDisplayNum+0x21e>
		 {
			 if( ( ( (Local_u32Check)>>Local_u8Ilit) &7 ) !=ES_OK )
    3ae2:	89 81       	ldd	r24, Y+1	; 0x01
    3ae4:	28 2f       	mov	r18, r24
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aea:	9b 81       	ldd	r25, Y+3	; 0x03
    3aec:	ac 81       	ldd	r26, Y+4	; 0x04
    3aee:	bd 81       	ldd	r27, Y+5	; 0x05
    3af0:	02 2e       	mov	r0, r18
    3af2:	04 c0       	rjmp	.+8      	; 0x3afc <S_Segment_enuDisplayNum+0x1fc>
    3af4:	b6 95       	lsr	r27
    3af6:	a7 95       	ror	r26
    3af8:	97 95       	ror	r25
    3afa:	87 95       	ror	r24
    3afc:	0a 94       	dec	r0
    3afe:	d2 f7       	brpl	.-12     	; 0x3af4 <S_Segment_enuDisplayNum+0x1f4>
    3b00:	87 70       	andi	r24, 0x07	; 7
    3b02:	90 70       	andi	r25, 0x00	; 0
    3b04:	a0 70       	andi	r26, 0x00	; 0
    3b06:	b0 70       	andi	r27, 0x00	; 0
    3b08:	00 97       	sbiw	r24, 0x00	; 0
    3b0a:	a1 05       	cpc	r26, r1
    3b0c:	b1 05       	cpc	r27, r1
    3b0e:	19 f0       	breq	.+6      	; 0x3b16 <S_Segment_enuDisplayNum+0x216>
			 {
				 return Local_enuErrorState;
    3b10:	8e 81       	ldd	r24, Y+6	; 0x06
    3b12:	88 87       	std	Y+8, r24	; 0x08
    3b14:	09 c0       	rjmp	.+18     	; 0x3b28 <S_Segment_enuDisplayNum+0x228>
			 }
			 else
			 {
				 Local_enuErrorState=ES_OK;
    3b16:	1e 82       	std	Y+6, r1	; 0x06
		Local_u32Check |=DIO_enuSet_PinValue(SEG_GPORT , SEG_GPIN , !((SEG_Au8DiaplayNum[Copy_u8Num]>>Pin6 ) &Get_State_Num));
#else
#error "SEG TYPE NOT AVALILABLE !!"
#endif
		u8 Local_u8Ilit=0;
		 for(Local_u8Ilit=0 ; Local_u8Ilit < sizeof(Local_u8Ilit)*8 ; Local_u8Ilit+=3)
    3b18:	89 81       	ldd	r24, Y+1	; 0x01
    3b1a:	8d 5f       	subi	r24, 0xFD	; 253
    3b1c:	89 83       	std	Y+1, r24	; 0x01
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	88 30       	cpi	r24, 0x08	; 8
    3b22:	f8 f2       	brcs	.-66     	; 0x3ae2 <S_Segment_enuDisplayNum+0x1e2>
				 Local_enuErrorState=ES_OK;
			 }
		 }

	}
	return Local_enuErrorState;
    3b24:	8e 81       	ldd	r24, Y+6	; 0x06
    3b26:	88 87       	std	Y+8, r24	; 0x08
    3b28:	88 85       	ldd	r24, Y+8	; 0x08
}
    3b2a:	28 96       	adiw	r28, 0x08	; 8
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	cd bf       	out	0x3d, r28	; 61
    3b36:	cf 91       	pop	r28
    3b38:	df 91       	pop	r29
    3b3a:	08 95       	ret

00003b3c <S_Segment_enuEnableCommon>:



ES_t S_Segment_enuEnableCommon(void)
{
    3b3c:	df 93       	push	r29
    3b3e:	cf 93       	push	r28
    3b40:	0f 92       	push	r0
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	89 83       	std	Y+1, r24	; 0x01
	#endif
#elif SEG_CMN==NOT_CONNECTED || SEG_CMNPORT==NOT_CONNECTED
#else
#error"Your Input Common Pin is out of Range"
#endif
	return Local_enuErrorState;
    3b4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b4c:	0f 90       	pop	r0
    3b4e:	cf 91       	pop	r28
    3b50:	df 91       	pop	r29
    3b52:	08 95       	ret

00003b54 <S_Segment_enudisableCommon>:

ES_t S_Segment_enudisableCommon(void)
{
    3b54:	df 93       	push	r29
    3b56:	cf 93       	push	r28
    3b58:	0f 92       	push	r0
    3b5a:	cd b7       	in	r28, 0x3d	; 61
    3b5c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	89 83       	std	Y+1, r24	; 0x01
	#endif
#elif SEG_CMN==NOT_CONNECTED || SEG_CMNPORT==NOT_CONNECTED
#else
#error"Your Input Common Pin is out of Range"
#endif
	return Local_enuErrorState;
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b64:	0f 90       	pop	r0
    3b66:	cf 91       	pop	r28
    3b68:	df 91       	pop	r29
    3b6a:	08 95       	ret

00003b6c <S_Segment_enuEnableDot>:

ES_t S_Segment_enuEnableDot(void)
{
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	0f 92       	push	r0
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	89 83       	std	Y+1, r24	; 0x01
	#endif
#elif SEG_CMN==NOT_CONNECTED || SEG_CMNPORT==NOT_CONNECTED
#else
#error"Your Input DOT Pin is out of Range"
#endif
	return Local_enuErrorState;
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b7c:	0f 90       	pop	r0
    3b7e:	cf 91       	pop	r28
    3b80:	df 91       	pop	r29
    3b82:	08 95       	ret

00003b84 <S_Segment_enuDisableDot>:

ES_t S_Segment_enuDisableDot(void)
{
    3b84:	df 93       	push	r29
    3b86:	cf 93       	push	r28
    3b88:	0f 92       	push	r0
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	89 83       	std	Y+1, r24	; 0x01
	#endif
#elif SEG_CMN==NOT_CONNECTED || SEG_CMNPORT==NOT_CONNECTED
#else
#error"Your Input Common Pin is out of Range"
#endif
	return Local_enuErrorState;
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b94:	0f 90       	pop	r0
    3b96:	cf 91       	pop	r28
    3b98:	df 91       	pop	r29
    3b9a:	08 95       	ret

00003b9c <S_Segmet_enuClearDisplay>:

ES_t S_Segmet_enuClearDisplay(void)
{
    3b9c:	df 93       	push	r29
    3b9e:	cf 93       	push	r28
    3ba0:	cd b7       	in	r28, 0x3d	; 61
    3ba2:	de b7       	in	r29, 0x3e	; 62
    3ba4:	27 97       	sbiw	r28, 0x07	; 7
    3ba6:	0f b6       	in	r0, 0x3f	; 63
    3ba8:	f8 94       	cli
    3baa:	de bf       	out	0x3e, r29	; 62
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_NOK;
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32Check=0;
    3bb4:	1a 82       	std	Y+2, r1	; 0x02
    3bb6:	1b 82       	std	Y+3, r1	; 0x03
    3bb8:	1c 82       	std	Y+4, r1	; 0x04
    3bba:	1d 82       	std	Y+5, r1	; 0x05


	#if SEG_TYPE==COMMON_CATHODE
			Local_u32Check  =DIO_enuSet_PinValue(SEG_APORT , SEG_APIN , DIO_u8LOW);
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	63 e0       	ldi	r22, 0x03	; 3
    3bc0:	40 e0       	ldi	r20, 0x00	; 0
    3bc2:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3bc6:	88 2f       	mov	r24, r24
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	a0 e0       	ldi	r26, 0x00	; 0
    3bcc:	b0 e0       	ldi	r27, 0x00	; 0
    3bce:	8a 83       	std	Y+2, r24	; 0x02
    3bd0:	9b 83       	std	Y+3, r25	; 0x03
    3bd2:	ac 83       	std	Y+4, r26	; 0x04
    3bd4:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |=DIO_enuSet_PinValue(SEG_BPORT , SEG_BPIN , DIO_u8LOW);
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	64 e0       	ldi	r22, 0x04	; 4
    3bda:	40 e0       	ldi	r20, 0x00	; 0
    3bdc:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3be0:	28 2f       	mov	r18, r24
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	40 e0       	ldi	r20, 0x00	; 0
    3be6:	50 e0       	ldi	r21, 0x00	; 0
    3be8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bea:	9b 81       	ldd	r25, Y+3	; 0x03
    3bec:	ac 81       	ldd	r26, Y+4	; 0x04
    3bee:	bd 81       	ldd	r27, Y+5	; 0x05
    3bf0:	82 2b       	or	r24, r18
    3bf2:	93 2b       	or	r25, r19
    3bf4:	a4 2b       	or	r26, r20
    3bf6:	b5 2b       	or	r27, r21
    3bf8:	8a 83       	std	Y+2, r24	; 0x02
    3bfa:	9b 83       	std	Y+3, r25	; 0x03
    3bfc:	ac 83       	std	Y+4, r26	; 0x04
    3bfe:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |=DIO_enuSet_PinValue(SEG_CPORT , SEG_CPIN , DIO_u8LOW);
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	63 e0       	ldi	r22, 0x03	; 3
    3c04:	40 e0       	ldi	r20, 0x00	; 0
    3c06:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3c0a:	28 2f       	mov	r18, r24
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	40 e0       	ldi	r20, 0x00	; 0
    3c10:	50 e0       	ldi	r21, 0x00	; 0
    3c12:	8a 81       	ldd	r24, Y+2	; 0x02
    3c14:	9b 81       	ldd	r25, Y+3	; 0x03
    3c16:	ac 81       	ldd	r26, Y+4	; 0x04
    3c18:	bd 81       	ldd	r27, Y+5	; 0x05
    3c1a:	82 2b       	or	r24, r18
    3c1c:	93 2b       	or	r25, r19
    3c1e:	a4 2b       	or	r26, r20
    3c20:	b5 2b       	or	r27, r21
    3c22:	8a 83       	std	Y+2, r24	; 0x02
    3c24:	9b 83       	std	Y+3, r25	; 0x03
    3c26:	ac 83       	std	Y+4, r26	; 0x04
    3c28:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |=DIO_enuSet_PinValue(SEG_DPORT , SEG_DPIN , DIO_u8LOW);
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	64 e0       	ldi	r22, 0x04	; 4
    3c2e:	40 e0       	ldi	r20, 0x00	; 0
    3c30:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3c34:	28 2f       	mov	r18, r24
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e0       	ldi	r20, 0x00	; 0
    3c3a:	50 e0       	ldi	r21, 0x00	; 0
    3c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c40:	ac 81       	ldd	r26, Y+4	; 0x04
    3c42:	bd 81       	ldd	r27, Y+5	; 0x05
    3c44:	82 2b       	or	r24, r18
    3c46:	93 2b       	or	r25, r19
    3c48:	a4 2b       	or	r26, r20
    3c4a:	b5 2b       	or	r27, r21
    3c4c:	8a 83       	std	Y+2, r24	; 0x02
    3c4e:	9b 83       	std	Y+3, r25	; 0x03
    3c50:	ac 83       	std	Y+4, r26	; 0x04
    3c52:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |=DIO_enuSet_PinValue(SEG_EPORT , SEG_EPIN , DIO_u8LOW);
    3c54:	82 e0       	ldi	r24, 0x02	; 2
    3c56:	62 e0       	ldi	r22, 0x02	; 2
    3c58:	40 e0       	ldi	r20, 0x00	; 0
    3c5a:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3c5e:	28 2f       	mov	r18, r24
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e0       	ldi	r20, 0x00	; 0
    3c64:	50 e0       	ldi	r21, 0x00	; 0
    3c66:	8a 81       	ldd	r24, Y+2	; 0x02
    3c68:	9b 81       	ldd	r25, Y+3	; 0x03
    3c6a:	ac 81       	ldd	r26, Y+4	; 0x04
    3c6c:	bd 81       	ldd	r27, Y+5	; 0x05
    3c6e:	82 2b       	or	r24, r18
    3c70:	93 2b       	or	r25, r19
    3c72:	a4 2b       	or	r26, r20
    3c74:	b5 2b       	or	r27, r21
    3c76:	8a 83       	std	Y+2, r24	; 0x02
    3c78:	9b 83       	std	Y+3, r25	; 0x03
    3c7a:	ac 83       	std	Y+4, r26	; 0x04
    3c7c:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |=DIO_enuSet_PinValue(SEG_FPORT , SEG_FPIN , DIO_u8LOW);
    3c7e:	82 e0       	ldi	r24, 0x02	; 2
    3c80:	63 e0       	ldi	r22, 0x03	; 3
    3c82:	40 e0       	ldi	r20, 0x00	; 0
    3c84:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3c88:	28 2f       	mov	r18, r24
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	40 e0       	ldi	r20, 0x00	; 0
    3c8e:	50 e0       	ldi	r21, 0x00	; 0
    3c90:	8a 81       	ldd	r24, Y+2	; 0x02
    3c92:	9b 81       	ldd	r25, Y+3	; 0x03
    3c94:	ac 81       	ldd	r26, Y+4	; 0x04
    3c96:	bd 81       	ldd	r27, Y+5	; 0x05
    3c98:	82 2b       	or	r24, r18
    3c9a:	93 2b       	or	r25, r19
    3c9c:	a4 2b       	or	r26, r20
    3c9e:	b5 2b       	or	r27, r21
    3ca0:	8a 83       	std	Y+2, r24	; 0x02
    3ca2:	9b 83       	std	Y+3, r25	; 0x03
    3ca4:	ac 83       	std	Y+4, r26	; 0x04
    3ca6:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |=DIO_enuSet_PinValue(SEG_GPORT , SEG_GPIN , DIO_u8LOW);
    3ca8:	83 e0       	ldi	r24, 0x03	; 3
    3caa:	60 e0       	ldi	r22, 0x00	; 0
    3cac:	40 e0       	ldi	r20, 0x00	; 0
    3cae:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_enuSet_PinValue>
    3cb2:	28 2f       	mov	r18, r24
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	40 e0       	ldi	r20, 0x00	; 0
    3cb8:	50 e0       	ldi	r21, 0x00	; 0
    3cba:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cbe:	ac 81       	ldd	r26, Y+4	; 0x04
    3cc0:	bd 81       	ldd	r27, Y+5	; 0x05
    3cc2:	82 2b       	or	r24, r18
    3cc4:	93 2b       	or	r25, r19
    3cc6:	a4 2b       	or	r26, r20
    3cc8:	b5 2b       	or	r27, r21
    3cca:	8a 83       	std	Y+2, r24	; 0x02
    3ccc:	9b 83       	std	Y+3, r25	; 0x03
    3cce:	ac 83       	std	Y+4, r26	; 0x04
    3cd0:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |=DIO_enuSet_PinValue(SEG_FPORT , SEG_FPIN , DIO_u8HIGH);
			Local_u32Check |=DIO_enuSet_PinValue(SEG_GPORT , SEG_GPIN , DIO_u8HIGH);
	#else
	#error "SEG TYPE NOT AVALILABLE !!"
	#endif
			u8 Local_u8Ilit=0;
    3cd2:	19 82       	std	Y+1, r1	; 0x01
			 for(Local_u8Ilit=0 ; Local_u8Ilit < sizeof(Local_u8Ilit)*8 ; Local_u8Ilit+=3)
    3cd4:	19 82       	std	Y+1, r1	; 0x01
    3cd6:	1e c0       	rjmp	.+60     	; 0x3d14 <S_Segmet_enuClearDisplay+0x178>
			 {
				 if( ( ( (Local_u32Check)>>Local_u8Ilit) &7 ) !=ES_OK )
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	28 2f       	mov	r18, r24
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce2:	ac 81       	ldd	r26, Y+4	; 0x04
    3ce4:	bd 81       	ldd	r27, Y+5	; 0x05
    3ce6:	02 2e       	mov	r0, r18
    3ce8:	04 c0       	rjmp	.+8      	; 0x3cf2 <S_Segmet_enuClearDisplay+0x156>
    3cea:	b6 95       	lsr	r27
    3cec:	a7 95       	ror	r26
    3cee:	97 95       	ror	r25
    3cf0:	87 95       	ror	r24
    3cf2:	0a 94       	dec	r0
    3cf4:	d2 f7       	brpl	.-12     	; 0x3cea <S_Segmet_enuClearDisplay+0x14e>
    3cf6:	87 70       	andi	r24, 0x07	; 7
    3cf8:	90 70       	andi	r25, 0x00	; 0
    3cfa:	a0 70       	andi	r26, 0x00	; 0
    3cfc:	b0 70       	andi	r27, 0x00	; 0
    3cfe:	00 97       	sbiw	r24, 0x00	; 0
    3d00:	a1 05       	cpc	r26, r1
    3d02:	b1 05       	cpc	r27, r1
    3d04:	19 f0       	breq	.+6      	; 0x3d0c <S_Segmet_enuClearDisplay+0x170>
				 {
					 return Local_enuErrorState;
    3d06:	8e 81       	ldd	r24, Y+6	; 0x06
    3d08:	8f 83       	std	Y+7, r24	; 0x07
    3d0a:	09 c0       	rjmp	.+18     	; 0x3d1e <S_Segmet_enuClearDisplay+0x182>
				 }
				 else
				 {
					 Local_enuErrorState=ES_OK;
    3d0c:	1e 82       	std	Y+6, r1	; 0x06
			Local_u32Check |=DIO_enuSet_PinValue(SEG_GPORT , SEG_GPIN , DIO_u8HIGH);
	#else
	#error "SEG TYPE NOT AVALILABLE !!"
	#endif
			u8 Local_u8Ilit=0;
			 for(Local_u8Ilit=0 ; Local_u8Ilit < sizeof(Local_u8Ilit)*8 ; Local_u8Ilit+=3)
    3d0e:	89 81       	ldd	r24, Y+1	; 0x01
    3d10:	8d 5f       	subi	r24, 0xFD	; 253
    3d12:	89 83       	std	Y+1, r24	; 0x01
    3d14:	89 81       	ldd	r24, Y+1	; 0x01
    3d16:	88 30       	cpi	r24, 0x08	; 8
    3d18:	f8 f2       	brcs	.-66     	; 0x3cd8 <S_Segmet_enuClearDisplay+0x13c>
					 Local_enuErrorState=ES_OK;
				 }
			 }


	return Local_enuErrorState;
    3d1a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d1c:	8f 83       	std	Y+7, r24	; 0x07
    3d1e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3d20:	27 96       	adiw	r28, 0x07	; 7
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	f8 94       	cli
    3d26:	de bf       	out	0x3e, r29	; 62
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	cd bf       	out	0x3d, r28	; 61
    3d2c:	cf 91       	pop	r28
    3d2e:	df 91       	pop	r29
    3d30:	08 95       	ret

00003d32 <Backword>:
#include "APP.h"
#include<util/delay.h>
int pos = 0;
u8 dis=0;
void Backword(void)
{
    3d32:	df 93       	push	r29
    3d34:	cf 93       	push	r28
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
    3d3a:	6c 97       	sbiw	r28, 0x1c	; 28
    3d3c:	0f b6       	in	r0, 0x3f	; 63
    3d3e:	f8 94       	cli
    3d40:	de bf       	out	0x3e, r29	; 62
    3d42:	0f be       	out	0x3f, r0	; 63
    3d44:	cd bf       	out	0x3d, r28	; 61
	dis =0;
    3d46:	10 92 d2 00 	sts	0x00D2, r1
    3d4a:	fb c0       	rjmp	.+502    	; 0x3f42 <Backword+0x210>
	for ( ; pos >=0  ; pos--)
	{
		LCD_voidGotoXY(0 , pos);
    3d4c:	80 91 d0 00 	lds	r24, 0x00D0
    3d50:	90 91 d1 00 	lds	r25, 0x00D1
    3d54:	98 2f       	mov	r25, r24
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	69 2f       	mov	r22, r25
    3d5a:	0e 94 48 1a 	call	0x3490	; 0x3490 <LCD_voidGotoXY>
		LCD_enuDisplayCharacter(0x6F);
    3d5e:	8f e6       	ldi	r24, 0x6F	; 111
    3d60:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCD_enuDisplayCharacter>
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	a0 e7       	ldi	r26, 0x70	; 112
    3d6a:	b1 e4       	ldi	r27, 0x41	; 65
    3d6c:	89 8f       	std	Y+25, r24	; 0x19
    3d6e:	9a 8f       	std	Y+26, r25	; 0x1a
    3d70:	ab 8f       	std	Y+27, r26	; 0x1b
    3d72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d74:	69 8d       	ldd	r22, Y+25	; 0x19
    3d76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	4a e7       	ldi	r20, 0x7A	; 122
    3d82:	53 e4       	ldi	r21, 0x43	; 67
    3d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	8d 8b       	std	Y+21, r24	; 0x15
    3d8e:	9e 8b       	std	Y+22, r25	; 0x16
    3d90:	af 8b       	std	Y+23, r26	; 0x17
    3d92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d94:	6d 89       	ldd	r22, Y+21	; 0x15
    3d96:	7e 89       	ldd	r23, Y+22	; 0x16
    3d98:	8f 89       	ldd	r24, Y+23	; 0x17
    3d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	40 e8       	ldi	r20, 0x80	; 128
    3da2:	5f e3       	ldi	r21, 0x3F	; 63
    3da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3da8:	88 23       	and	r24, r24
    3daa:	2c f4       	brge	.+10     	; 0x3db6 <Backword+0x84>
		__ticks = 1;
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	9c 8b       	std	Y+20, r25	; 0x14
    3db2:	8b 8b       	std	Y+19, r24	; 0x13
    3db4:	3f c0       	rjmp	.+126    	; 0x3e34 <Backword+0x102>
	else if (__tmp > 65535)
    3db6:	6d 89       	ldd	r22, Y+21	; 0x15
    3db8:	7e 89       	ldd	r23, Y+22	; 0x16
    3dba:	8f 89       	ldd	r24, Y+23	; 0x17
    3dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	3f ef       	ldi	r19, 0xFF	; 255
    3dc2:	4f e7       	ldi	r20, 0x7F	; 127
    3dc4:	57 e4       	ldi	r21, 0x47	; 71
    3dc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dca:	18 16       	cp	r1, r24
    3dcc:	4c f5       	brge	.+82     	; 0x3e20 <Backword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dce:	69 8d       	ldd	r22, Y+25	; 0x19
    3dd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dd6:	20 e0       	ldi	r18, 0x00	; 0
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	40 e2       	ldi	r20, 0x20	; 32
    3ddc:	51 e4       	ldi	r21, 0x41	; 65
    3dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de2:	dc 01       	movw	r26, r24
    3de4:	cb 01       	movw	r24, r22
    3de6:	bc 01       	movw	r22, r24
    3de8:	cd 01       	movw	r24, r26
    3dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	9c 8b       	std	Y+20, r25	; 0x14
    3df4:	8b 8b       	std	Y+19, r24	; 0x13
    3df6:	0f c0       	rjmp	.+30     	; 0x3e16 <Backword+0xe4>
    3df8:	89 e1       	ldi	r24, 0x19	; 25
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	9a 8b       	std	Y+18, r25	; 0x12
    3dfe:	89 8b       	std	Y+17, r24	; 0x11
    3e00:	89 89       	ldd	r24, Y+17	; 0x11
    3e02:	9a 89       	ldd	r25, Y+18	; 0x12
    3e04:	01 97       	sbiw	r24, 0x01	; 1
    3e06:	f1 f7       	brne	.-4      	; 0x3e04 <Backword+0xd2>
    3e08:	9a 8b       	std	Y+18, r25	; 0x12
    3e0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e10:	01 97       	sbiw	r24, 0x01	; 1
    3e12:	9c 8b       	std	Y+20, r25	; 0x14
    3e14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e16:	8b 89       	ldd	r24, Y+19	; 0x13
    3e18:	9c 89       	ldd	r25, Y+20	; 0x14
    3e1a:	00 97       	sbiw	r24, 0x00	; 0
    3e1c:	69 f7       	brne	.-38     	; 0x3df8 <Backword+0xc6>
    3e1e:	14 c0       	rjmp	.+40     	; 0x3e48 <Backword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e20:	6d 89       	ldd	r22, Y+21	; 0x15
    3e22:	7e 89       	ldd	r23, Y+22	; 0x16
    3e24:	8f 89       	ldd	r24, Y+23	; 0x17
    3e26:	98 8d       	ldd	r25, Y+24	; 0x18
    3e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	9c 8b       	std	Y+20, r25	; 0x14
    3e32:	8b 8b       	std	Y+19, r24	; 0x13
    3e34:	8b 89       	ldd	r24, Y+19	; 0x13
    3e36:	9c 89       	ldd	r25, Y+20	; 0x14
    3e38:	98 8b       	std	Y+16, r25	; 0x10
    3e3a:	8f 87       	std	Y+15, r24	; 0x0f
    3e3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e3e:	98 89       	ldd	r25, Y+16	; 0x10
    3e40:	01 97       	sbiw	r24, 0x01	; 1
    3e42:	f1 f7       	brne	.-4      	; 0x3e40 <Backword+0x10e>
    3e44:	98 8b       	std	Y+16, r25	; 0x10
    3e46:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(15);

		LCD_voidClearDisplay();
    3e48:	0e 94 2c 1b 	call	0x3658	; 0x3658 <LCD_voidClearDisplay>
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	a0 ea       	ldi	r26, 0xA0	; 160
    3e52:	b0 e4       	ldi	r27, 0x40	; 64
    3e54:	8b 87       	std	Y+11, r24	; 0x0b
    3e56:	9c 87       	std	Y+12, r25	; 0x0c
    3e58:	ad 87       	std	Y+13, r26	; 0x0d
    3e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	4a e7       	ldi	r20, 0x7A	; 122
    3e6a:	53 e4       	ldi	r21, 0x43	; 67
    3e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	8f 83       	std	Y+7, r24	; 0x07
    3e76:	98 87       	std	Y+8, r25	; 0x08
    3e78:	a9 87       	std	Y+9, r26	; 0x09
    3e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7e:	78 85       	ldd	r23, Y+8	; 0x08
    3e80:	89 85       	ldd	r24, Y+9	; 0x09
    3e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	40 e8       	ldi	r20, 0x80	; 128
    3e8a:	5f e3       	ldi	r21, 0x3F	; 63
    3e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e90:	88 23       	and	r24, r24
    3e92:	2c f4       	brge	.+10     	; 0x3e9e <Backword+0x16c>
		__ticks = 1;
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	9e 83       	std	Y+6, r25	; 0x06
    3e9a:	8d 83       	std	Y+5, r24	; 0x05
    3e9c:	3f c0       	rjmp	.+126    	; 0x3f1c <Backword+0x1ea>
	else if (__tmp > 65535)
    3e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    3ea0:	78 85       	ldd	r23, Y+8	; 0x08
    3ea2:	89 85       	ldd	r24, Y+9	; 0x09
    3ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	3f ef       	ldi	r19, 0xFF	; 255
    3eaa:	4f e7       	ldi	r20, 0x7F	; 127
    3eac:	57 e4       	ldi	r21, 0x47	; 71
    3eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eb2:	18 16       	cp	r1, r24
    3eb4:	4c f5       	brge	.+82     	; 0x3f08 <Backword+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	40 e2       	ldi	r20, 0x20	; 32
    3ec4:	51 e4       	ldi	r21, 0x41	; 65
    3ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eca:	dc 01       	movw	r26, r24
    3ecc:	cb 01       	movw	r24, r22
    3ece:	bc 01       	movw	r22, r24
    3ed0:	cd 01       	movw	r24, r26
    3ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	cb 01       	movw	r24, r22
    3eda:	9e 83       	std	Y+6, r25	; 0x06
    3edc:	8d 83       	std	Y+5, r24	; 0x05
    3ede:	0f c0       	rjmp	.+30     	; 0x3efe <Backword+0x1cc>
    3ee0:	89 e1       	ldi	r24, 0x19	; 25
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	9c 83       	std	Y+4, r25	; 0x04
    3ee6:	8b 83       	std	Y+3, r24	; 0x03
    3ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eea:	9c 81       	ldd	r25, Y+4	; 0x04
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <Backword+0x1ba>
    3ef0:	9c 83       	std	Y+4, r25	; 0x04
    3ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef8:	01 97       	sbiw	r24, 0x01	; 1
    3efa:	9e 83       	std	Y+6, r25	; 0x06
    3efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3efe:	8d 81       	ldd	r24, Y+5	; 0x05
    3f00:	9e 81       	ldd	r25, Y+6	; 0x06
    3f02:	00 97       	sbiw	r24, 0x00	; 0
    3f04:	69 f7       	brne	.-38     	; 0x3ee0 <Backword+0x1ae>
    3f06:	14 c0       	rjmp	.+40     	; 0x3f30 <Backword+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f08:	6f 81       	ldd	r22, Y+7	; 0x07
    3f0a:	78 85       	ldd	r23, Y+8	; 0x08
    3f0c:	89 85       	ldd	r24, Y+9	; 0x09
    3f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	9e 83       	std	Y+6, r25	; 0x06
    3f1a:	8d 83       	std	Y+5, r24	; 0x05
    3f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f20:	9a 83       	std	Y+2, r25	; 0x02
    3f22:	89 83       	std	Y+1, r24	; 0x01
    3f24:	89 81       	ldd	r24, Y+1	; 0x01
    3f26:	9a 81       	ldd	r25, Y+2	; 0x02
    3f28:	01 97       	sbiw	r24, 0x01	; 1
    3f2a:	f1 f7       	brne	.-4      	; 0x3f28 <Backword+0x1f6>
    3f2c:	9a 83       	std	Y+2, r25	; 0x02
    3f2e:	89 83       	std	Y+1, r24	; 0x01
int pos = 0;
u8 dis=0;
void Backword(void)
{
	dis =0;
	for ( ; pos >=0  ; pos--)
    3f30:	80 91 d0 00 	lds	r24, 0x00D0
    3f34:	90 91 d1 00 	lds	r25, 0x00D1
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	90 93 d1 00 	sts	0x00D1, r25
    3f3e:	80 93 d0 00 	sts	0x00D0, r24
    3f42:	80 91 d0 00 	lds	r24, 0x00D0
    3f46:	90 91 d1 00 	lds	r25, 0x00D1
    3f4a:	99 23       	and	r25, r25
    3f4c:	0c f0       	brlt	.+2      	; 0x3f50 <Backword+0x21e>
    3f4e:	fe ce       	rjmp	.-516    	; 0x3d4c <Backword+0x1a>
		_delay_ms(15);

		LCD_voidClearDisplay();
		_delay_ms(5);
	}
}
    3f50:	6c 96       	adiw	r28, 0x1c	; 28
    3f52:	0f b6       	in	r0, 0x3f	; 63
    3f54:	f8 94       	cli
    3f56:	de bf       	out	0x3e, r29	; 62
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	cd bf       	out	0x3d, r28	; 61
    3f5c:	cf 91       	pop	r28
    3f5e:	df 91       	pop	r29
    3f60:	08 95       	ret

00003f62 <Forward>:
void Forward(void)
{
    3f62:	df 93       	push	r29
    3f64:	cf 93       	push	r28
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	6c 97       	sbiw	r28, 0x1c	; 28
    3f6c:	0f b6       	in	r0, 0x3f	; 63
    3f6e:	f8 94       	cli
    3f70:	de bf       	out	0x3e, r29	; 62
    3f72:	0f be       	out	0x3f, r0	; 63
    3f74:	cd bf       	out	0x3d, r28	; 61
	dis =0;
    3f76:	10 92 d2 00 	sts	0x00D2, r1
    3f7a:	fb c0       	rjmp	.+502    	; 0x4172 <Forward+0x210>
	for (; pos <= 15 ; pos++)
	{
		LCD_voidGotoXY(0 , pos);
    3f7c:	80 91 d0 00 	lds	r24, 0x00D0
    3f80:	90 91 d1 00 	lds	r25, 0x00D1
    3f84:	98 2f       	mov	r25, r24
    3f86:	80 e0       	ldi	r24, 0x00	; 0
    3f88:	69 2f       	mov	r22, r25
    3f8a:	0e 94 48 1a 	call	0x3490	; 0x3490 <LCD_voidGotoXY>
		LCD_enuDisplayCharacter(0x6F);
    3f8e:	8f e6       	ldi	r24, 0x6F	; 111
    3f90:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCD_enuDisplayCharacter>
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	a0 e7       	ldi	r26, 0x70	; 112
    3f9a:	b1 e4       	ldi	r27, 0x41	; 65
    3f9c:	89 8f       	std	Y+25, r24	; 0x19
    3f9e:	9a 8f       	std	Y+26, r25	; 0x1a
    3fa0:	ab 8f       	std	Y+27, r26	; 0x1b
    3fa2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    3fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	4a e7       	ldi	r20, 0x7A	; 122
    3fb2:	53 e4       	ldi	r21, 0x43	; 67
    3fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	8d 8b       	std	Y+21, r24	; 0x15
    3fbe:	9e 8b       	std	Y+22, r25	; 0x16
    3fc0:	af 8b       	std	Y+23, r26	; 0x17
    3fc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    3fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    3fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    3fca:	98 8d       	ldd	r25, Y+24	; 0x18
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	40 e8       	ldi	r20, 0x80	; 128
    3fd2:	5f e3       	ldi	r21, 0x3F	; 63
    3fd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fd8:	88 23       	and	r24, r24
    3fda:	2c f4       	brge	.+10     	; 0x3fe6 <Forward+0x84>
		__ticks = 1;
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	9c 8b       	std	Y+20, r25	; 0x14
    3fe2:	8b 8b       	std	Y+19, r24	; 0x13
    3fe4:	3f c0       	rjmp	.+126    	; 0x4064 <Forward+0x102>
	else if (__tmp > 65535)
    3fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    3fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    3fea:	8f 89       	ldd	r24, Y+23	; 0x17
    3fec:	98 8d       	ldd	r25, Y+24	; 0x18
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	3f ef       	ldi	r19, 0xFF	; 255
    3ff2:	4f e7       	ldi	r20, 0x7F	; 127
    3ff4:	57 e4       	ldi	r21, 0x47	; 71
    3ff6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ffa:	18 16       	cp	r1, r24
    3ffc:	4c f5       	brge	.+82     	; 0x4050 <Forward+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    4000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	40 e2       	ldi	r20, 0x20	; 32
    400c:	51 e4       	ldi	r21, 0x41	; 65
    400e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4012:	dc 01       	movw	r26, r24
    4014:	cb 01       	movw	r24, r22
    4016:	bc 01       	movw	r22, r24
    4018:	cd 01       	movw	r24, r26
    401a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	9c 8b       	std	Y+20, r25	; 0x14
    4024:	8b 8b       	std	Y+19, r24	; 0x13
    4026:	0f c0       	rjmp	.+30     	; 0x4046 <Forward+0xe4>
    4028:	89 e1       	ldi	r24, 0x19	; 25
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	9a 8b       	std	Y+18, r25	; 0x12
    402e:	89 8b       	std	Y+17, r24	; 0x11
    4030:	89 89       	ldd	r24, Y+17	; 0x11
    4032:	9a 89       	ldd	r25, Y+18	; 0x12
    4034:	01 97       	sbiw	r24, 0x01	; 1
    4036:	f1 f7       	brne	.-4      	; 0x4034 <Forward+0xd2>
    4038:	9a 8b       	std	Y+18, r25	; 0x12
    403a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    403c:	8b 89       	ldd	r24, Y+19	; 0x13
    403e:	9c 89       	ldd	r25, Y+20	; 0x14
    4040:	01 97       	sbiw	r24, 0x01	; 1
    4042:	9c 8b       	std	Y+20, r25	; 0x14
    4044:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4046:	8b 89       	ldd	r24, Y+19	; 0x13
    4048:	9c 89       	ldd	r25, Y+20	; 0x14
    404a:	00 97       	sbiw	r24, 0x00	; 0
    404c:	69 f7       	brne	.-38     	; 0x4028 <Forward+0xc6>
    404e:	14 c0       	rjmp	.+40     	; 0x4078 <Forward+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4050:	6d 89       	ldd	r22, Y+21	; 0x15
    4052:	7e 89       	ldd	r23, Y+22	; 0x16
    4054:	8f 89       	ldd	r24, Y+23	; 0x17
    4056:	98 8d       	ldd	r25, Y+24	; 0x18
    4058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	9c 8b       	std	Y+20, r25	; 0x14
    4062:	8b 8b       	std	Y+19, r24	; 0x13
    4064:	8b 89       	ldd	r24, Y+19	; 0x13
    4066:	9c 89       	ldd	r25, Y+20	; 0x14
    4068:	98 8b       	std	Y+16, r25	; 0x10
    406a:	8f 87       	std	Y+15, r24	; 0x0f
    406c:	8f 85       	ldd	r24, Y+15	; 0x0f
    406e:	98 89       	ldd	r25, Y+16	; 0x10
    4070:	01 97       	sbiw	r24, 0x01	; 1
    4072:	f1 f7       	brne	.-4      	; 0x4070 <Forward+0x10e>
    4074:	98 8b       	std	Y+16, r25	; 0x10
    4076:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(15);

		LCD_voidClearDisplay();
    4078:	0e 94 2c 1b 	call	0x3658	; 0x3658 <LCD_voidClearDisplay>
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	a0 ea       	ldi	r26, 0xA0	; 160
    4082:	b0 e4       	ldi	r27, 0x40	; 64
    4084:	8b 87       	std	Y+11, r24	; 0x0b
    4086:	9c 87       	std	Y+12, r25	; 0x0c
    4088:	ad 87       	std	Y+13, r26	; 0x0d
    408a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    408c:	6b 85       	ldd	r22, Y+11	; 0x0b
    408e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4090:	8d 85       	ldd	r24, Y+13	; 0x0d
    4092:	9e 85       	ldd	r25, Y+14	; 0x0e
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	4a e7       	ldi	r20, 0x7A	; 122
    409a:	53 e4       	ldi	r21, 0x43	; 67
    409c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	8f 83       	std	Y+7, r24	; 0x07
    40a6:	98 87       	std	Y+8, r25	; 0x08
    40a8:	a9 87       	std	Y+9, r26	; 0x09
    40aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40ac:	6f 81       	ldd	r22, Y+7	; 0x07
    40ae:	78 85       	ldd	r23, Y+8	; 0x08
    40b0:	89 85       	ldd	r24, Y+9	; 0x09
    40b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b4:	20 e0       	ldi	r18, 0x00	; 0
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	40 e8       	ldi	r20, 0x80	; 128
    40ba:	5f e3       	ldi	r21, 0x3F	; 63
    40bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40c0:	88 23       	and	r24, r24
    40c2:	2c f4       	brge	.+10     	; 0x40ce <Forward+0x16c>
		__ticks = 1;
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	9e 83       	std	Y+6, r25	; 0x06
    40ca:	8d 83       	std	Y+5, r24	; 0x05
    40cc:	3f c0       	rjmp	.+126    	; 0x414c <Forward+0x1ea>
	else if (__tmp > 65535)
    40ce:	6f 81       	ldd	r22, Y+7	; 0x07
    40d0:	78 85       	ldd	r23, Y+8	; 0x08
    40d2:	89 85       	ldd	r24, Y+9	; 0x09
    40d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	3f ef       	ldi	r19, 0xFF	; 255
    40da:	4f e7       	ldi	r20, 0x7F	; 127
    40dc:	57 e4       	ldi	r21, 0x47	; 71
    40de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40e2:	18 16       	cp	r1, r24
    40e4:	4c f5       	brge	.+82     	; 0x4138 <Forward+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    40e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    40ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	40 e2       	ldi	r20, 0x20	; 32
    40f4:	51 e4       	ldi	r21, 0x41	; 65
    40f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	bc 01       	movw	r22, r24
    4100:	cd 01       	movw	r24, r26
    4102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	9e 83       	std	Y+6, r25	; 0x06
    410c:	8d 83       	std	Y+5, r24	; 0x05
    410e:	0f c0       	rjmp	.+30     	; 0x412e <Forward+0x1cc>
    4110:	89 e1       	ldi	r24, 0x19	; 25
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	9c 83       	std	Y+4, r25	; 0x04
    4116:	8b 83       	std	Y+3, r24	; 0x03
    4118:	8b 81       	ldd	r24, Y+3	; 0x03
    411a:	9c 81       	ldd	r25, Y+4	; 0x04
    411c:	01 97       	sbiw	r24, 0x01	; 1
    411e:	f1 f7       	brne	.-4      	; 0x411c <Forward+0x1ba>
    4120:	9c 83       	std	Y+4, r25	; 0x04
    4122:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4124:	8d 81       	ldd	r24, Y+5	; 0x05
    4126:	9e 81       	ldd	r25, Y+6	; 0x06
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	9e 83       	std	Y+6, r25	; 0x06
    412c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    412e:	8d 81       	ldd	r24, Y+5	; 0x05
    4130:	9e 81       	ldd	r25, Y+6	; 0x06
    4132:	00 97       	sbiw	r24, 0x00	; 0
    4134:	69 f7       	brne	.-38     	; 0x4110 <Forward+0x1ae>
    4136:	14 c0       	rjmp	.+40     	; 0x4160 <Forward+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4138:	6f 81       	ldd	r22, Y+7	; 0x07
    413a:	78 85       	ldd	r23, Y+8	; 0x08
    413c:	89 85       	ldd	r24, Y+9	; 0x09
    413e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4144:	dc 01       	movw	r26, r24
    4146:	cb 01       	movw	r24, r22
    4148:	9e 83       	std	Y+6, r25	; 0x06
    414a:	8d 83       	std	Y+5, r24	; 0x05
    414c:	8d 81       	ldd	r24, Y+5	; 0x05
    414e:	9e 81       	ldd	r25, Y+6	; 0x06
    4150:	9a 83       	std	Y+2, r25	; 0x02
    4152:	89 83       	std	Y+1, r24	; 0x01
    4154:	89 81       	ldd	r24, Y+1	; 0x01
    4156:	9a 81       	ldd	r25, Y+2	; 0x02
    4158:	01 97       	sbiw	r24, 0x01	; 1
    415a:	f1 f7       	brne	.-4      	; 0x4158 <Forward+0x1f6>
    415c:	9a 83       	std	Y+2, r25	; 0x02
    415e:	89 83       	std	Y+1, r24	; 0x01
	}
}
void Forward(void)
{
	dis =0;
	for (; pos <= 15 ; pos++)
    4160:	80 91 d0 00 	lds	r24, 0x00D0
    4164:	90 91 d1 00 	lds	r25, 0x00D1
    4168:	01 96       	adiw	r24, 0x01	; 1
    416a:	90 93 d1 00 	sts	0x00D1, r25
    416e:	80 93 d0 00 	sts	0x00D0, r24
    4172:	80 91 d0 00 	lds	r24, 0x00D0
    4176:	90 91 d1 00 	lds	r25, 0x00D1
    417a:	80 31       	cpi	r24, 0x10	; 16
    417c:	91 05       	cpc	r25, r1
    417e:	0c f4       	brge	.+2      	; 0x4182 <Forward+0x220>
    4180:	fd ce       	rjmp	.-518    	; 0x3f7c <Forward+0x1a>

		LCD_voidClearDisplay();
		_delay_ms(5);
	}

}
    4182:	6c 96       	adiw	r28, 0x1c	; 28
    4184:	0f b6       	in	r0, 0x3f	; 63
    4186:	f8 94       	cli
    4188:	de bf       	out	0x3e, r29	; 62
    418a:	0f be       	out	0x3f, r0	; 63
    418c:	cd bf       	out	0x3d, r28	; 61
    418e:	cf 91       	pop	r28
    4190:	df 91       	pop	r29
    4192:	08 95       	ret

00004194 <main>:
extern u8 dis;
u8 Pl_1=0;
u8 Pl_2 =0;

int main()
{
    4194:	df 93       	push	r29
    4196:	cf 93       	push	r28
    4198:	cd b7       	in	r28, 0x3d	; 61
    419a:	de b7       	in	r29, 0x3e	; 62

	DIO_enuInit();
    419c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuInit>
	LCD_enuInit();
    41a0:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LCD_enuInit>
	EXTI_enuInit(EXTI_TArrStrInterrt_config);
    41a4:	89 e9       	ldi	r24, 0x99	; 153
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	0e 94 24 0a 	call	0x1448	; 0x1448 <EXTI_enuInit>
	DIO_enuSet_PinDirection(DIO_u8PORTD , DIO_u8PIN2 , DIO_u8INPUT);
    41ac:	83 e0       	ldi	r24, 0x03	; 3
    41ae:	62 e0       	ldi	r22, 0x02	; 2
    41b0:	40 e0       	ldi	r20, 0x00	; 0
    41b2:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(DIO_u8PORTD , DIO_u8PIN3 , DIO_u8INPUT);
    41b6:	83 e0       	ldi	r24, 0x03	; 3
    41b8:	63 e0       	ldi	r22, 0x03	; 3
    41ba:	40 e0       	ldi	r20, 0x00	; 0
    41bc:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_enuSet_PinDirection>
	EXTI_enuCall_Back(Forward , 1);
    41c0:	81 eb       	ldi	r24, 0xB1	; 177
    41c2:	9f e1       	ldi	r25, 0x1F	; 31
    41c4:	61 e0       	ldi	r22, 0x01	; 1
    41c6:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <EXTI_enuCall_Back>
	EXTI_enuCall_Back(Backword , 2 );
    41ca:	89 e9       	ldi	r24, 0x99	; 153
    41cc:	9e e1       	ldi	r25, 0x1E	; 30
    41ce:	62 e0       	ldi	r22, 0x02	; 2
    41d0:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <EXTI_enuCall_Back>
	GIE_enuEnable();
    41d4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <GIE_enuEnable>

	while (1)
	{
		if(pos <= 0)
    41d8:	80 91 d0 00 	lds	r24, 0x00D0
    41dc:	90 91 d1 00 	lds	r25, 0x00D1
    41e0:	18 16       	cp	r1, r24
    41e2:	19 06       	cpc	r1, r25
    41e4:	ac f0       	brlt	.+42     	; 0x4210 <main+0x7c>
    41e6:	10 c0       	rjmp	.+32     	; 0x4208 <main+0x74>
		{

			while(dis ==0){
				Pl_2++;
    41e8:	80 91 d4 00 	lds	r24, 0x00D4
    41ec:	8f 5f       	subi	r24, 0xFF	; 255
    41ee:	80 93 d4 00 	sts	0x00D4, r24
				LCD_voidClearDisplay();
    41f2:	0e 94 2c 1b 	call	0x3658	; 0x3658 <LCD_voidClearDisplay>
				LCD_enuSendString("Player 2 Win");
    41f6:	82 e6       	ldi	r24, 0x62	; 98
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_enuSendString>
				dis++;
    41fe:	80 91 d2 00 	lds	r24, 0x00D2
    4202:	8f 5f       	subi	r24, 0xFF	; 255
    4204:	80 93 d2 00 	sts	0x00D2, r24
	while (1)
	{
		if(pos <= 0)
		{

			while(dis ==0){
    4208:	80 91 d2 00 	lds	r24, 0x00D2
    420c:	88 23       	and	r24, r24
    420e:	61 f3       	breq	.-40     	; 0x41e8 <main+0x54>
				LCD_voidClearDisplay();
				LCD_enuSendString("Player 2 Win");
				dis++;
			}
		}
		if(pos >= 15)
    4210:	80 91 d0 00 	lds	r24, 0x00D0
    4214:	90 91 d1 00 	lds	r25, 0x00D1
    4218:	8f 30       	cpi	r24, 0x0F	; 15
    421a:	91 05       	cpc	r25, r1
    421c:	ac f0       	brlt	.+42     	; 0x4248 <main+0xb4>
    421e:	10 c0       	rjmp	.+32     	; 0x4240 <main+0xac>
		{

			while(dis ==0){
				Pl_1++;
    4220:	80 91 d3 00 	lds	r24, 0x00D3
    4224:	8f 5f       	subi	r24, 0xFF	; 255
    4226:	80 93 d3 00 	sts	0x00D3, r24
				LCD_voidClearDisplay();
    422a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <LCD_voidClearDisplay>
				LCD_enuSendString("Player 1 Win");
    422e:	8f e6       	ldi	r24, 0x6F	; 111
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_enuSendString>
				dis++;
    4236:	80 91 d2 00 	lds	r24, 0x00D2
    423a:	8f 5f       	subi	r24, 0xFF	; 255
    423c:	80 93 d2 00 	sts	0x00D2, r24
			}
		}
		if(pos >= 15)
		{

			while(dis ==0){
    4240:	80 91 d2 00 	lds	r24, 0x00D2
    4244:	88 23       	and	r24, r24
    4246:	61 f3       	breq	.-40     	; 0x4220 <main+0x8c>
				LCD_voidClearDisplay();
				LCD_enuSendString("Player 1 Win");
				dis++;
			}
		}
		if((Pl_1 == N_goals || Pl_2 == N_goals) && dis == 1)
    4248:	80 91 d3 00 	lds	r24, 0x00D3
    424c:	83 30       	cpi	r24, 0x03	; 3
    424e:	29 f0       	breq	.+10     	; 0x425a <main+0xc6>
    4250:	80 91 d4 00 	lds	r24, 0x00D4
    4254:	83 30       	cpi	r24, 0x03	; 3
    4256:	09 f0       	breq	.+2      	; 0x425a <main+0xc6>
    4258:	bf cf       	rjmp	.-130    	; 0x41d8 <main+0x44>
    425a:	80 91 d2 00 	lds	r24, 0x00D2
    425e:	81 30       	cpi	r24, 0x01	; 1
    4260:	09 f0       	breq	.+2      	; 0x4264 <main+0xd0>
    4262:	ba cf       	rjmp	.-140    	; 0x41d8 <main+0x44>
		{
			LCD_voidClearDisplay();
    4264:	0e 94 2c 1b 	call	0x3658	; 0x3658 <LCD_voidClearDisplay>
			LCD_enuSendString( "Match Ended ");
    4268:	8c e7       	ldi	r24, 0x7C	; 124
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_enuSendString>
			LCD_voidClearDisplay();
    4270:	0e 94 2c 1b 	call	0x3658	; 0x3658 <LCD_voidClearDisplay>
			LCD_voidGotoXY(0 , 6);
    4274:	80 e0       	ldi	r24, 0x00	; 0
    4276:	66 e0       	ldi	r22, 0x06	; 6
    4278:	0e 94 48 1a 	call	0x3490	; 0x3490 <LCD_voidGotoXY>
			LCD_enuSendString( "Result ");
    427c:	89 e8       	ldi	r24, 0x89	; 137
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_enuSendString>
			LCD_voidGotoXY(1 ,6);
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	66 e0       	ldi	r22, 0x06	; 6
    4288:	0e 94 48 1a 	call	0x3490	; 0x3490 <LCD_voidGotoXY>
			LCD_voidDisplayIntegerNum(Pl_1);
    428c:	80 91 d3 00 	lds	r24, 0x00D3
    4290:	88 2f       	mov	r24, r24
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	a0 e0       	ldi	r26, 0x00	; 0
    4296:	b0 e0       	ldi	r27, 0x00	; 0
    4298:	bc 01       	movw	r22, r24
    429a:	cd 01       	movw	r24, r26
    429c:	0e 94 a7 1a 	call	0x354e	; 0x354e <LCD_voidDisplayIntegerNum>
			LCD_voidGotoXY(1 ,8);
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	68 e0       	ldi	r22, 0x08	; 8
    42a4:	0e 94 48 1a 	call	0x3490	; 0x3490 <LCD_voidGotoXY>
			LCD_enuDisplayCharacter(':');
    42a8:	8a e3       	ldi	r24, 0x3A	; 58
    42aa:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCD_enuDisplayCharacter>
			LCD_voidGotoXY(1 ,10);
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	6a e0       	ldi	r22, 0x0A	; 10
    42b2:	0e 94 48 1a 	call	0x3490	; 0x3490 <LCD_voidGotoXY>
			LCD_voidDisplayIntegerNum(Pl_2);
    42b6:	80 91 d4 00 	lds	r24, 0x00D4
    42ba:	88 2f       	mov	r24, r24
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	a0 e0       	ldi	r26, 0x00	; 0
    42c0:	b0 e0       	ldi	r27, 0x00	; 0
    42c2:	bc 01       	movw	r22, r24
    42c4:	cd 01       	movw	r24, r26
    42c6:	0e 94 a7 1a 	call	0x354e	; 0x354e <LCD_voidDisplayIntegerNum>
			dis++;
    42ca:	80 91 d2 00 	lds	r24, 0x00D2
    42ce:	8f 5f       	subi	r24, 0xFF	; 255
    42d0:	80 93 d2 00 	sts	0x00D2, r24
    42d4:	81 cf       	rjmp	.-254    	; 0x41d8 <main+0x44>

000042d6 <__udivmodhi4>:
    42d6:	aa 1b       	sub	r26, r26
    42d8:	bb 1b       	sub	r27, r27
    42da:	51 e1       	ldi	r21, 0x11	; 17
    42dc:	07 c0       	rjmp	.+14     	; 0x42ec <__udivmodhi4_ep>

000042de <__udivmodhi4_loop>:
    42de:	aa 1f       	adc	r26, r26
    42e0:	bb 1f       	adc	r27, r27
    42e2:	a6 17       	cp	r26, r22
    42e4:	b7 07       	cpc	r27, r23
    42e6:	10 f0       	brcs	.+4      	; 0x42ec <__udivmodhi4_ep>
    42e8:	a6 1b       	sub	r26, r22
    42ea:	b7 0b       	sbc	r27, r23

000042ec <__udivmodhi4_ep>:
    42ec:	88 1f       	adc	r24, r24
    42ee:	99 1f       	adc	r25, r25
    42f0:	5a 95       	dec	r21
    42f2:	a9 f7       	brne	.-22     	; 0x42de <__udivmodhi4_loop>
    42f4:	80 95       	com	r24
    42f6:	90 95       	com	r25
    42f8:	bc 01       	movw	r22, r24
    42fa:	cd 01       	movw	r24, r26
    42fc:	08 95       	ret

000042fe <__divmodsi4>:
    42fe:	97 fb       	bst	r25, 7
    4300:	09 2e       	mov	r0, r25
    4302:	05 26       	eor	r0, r21
    4304:	0e d0       	rcall	.+28     	; 0x4322 <__divmodsi4_neg1>
    4306:	57 fd       	sbrc	r21, 7
    4308:	04 d0       	rcall	.+8      	; 0x4312 <__divmodsi4_neg2>
    430a:	14 d0       	rcall	.+40     	; 0x4334 <__udivmodsi4>
    430c:	0a d0       	rcall	.+20     	; 0x4322 <__divmodsi4_neg1>
    430e:	00 1c       	adc	r0, r0
    4310:	38 f4       	brcc	.+14     	; 0x4320 <__divmodsi4_exit>

00004312 <__divmodsi4_neg2>:
    4312:	50 95       	com	r21
    4314:	40 95       	com	r20
    4316:	30 95       	com	r19
    4318:	21 95       	neg	r18
    431a:	3f 4f       	sbci	r19, 0xFF	; 255
    431c:	4f 4f       	sbci	r20, 0xFF	; 255
    431e:	5f 4f       	sbci	r21, 0xFF	; 255

00004320 <__divmodsi4_exit>:
    4320:	08 95       	ret

00004322 <__divmodsi4_neg1>:
    4322:	f6 f7       	brtc	.-4      	; 0x4320 <__divmodsi4_exit>
    4324:	90 95       	com	r25
    4326:	80 95       	com	r24
    4328:	70 95       	com	r23
    432a:	61 95       	neg	r22
    432c:	7f 4f       	sbci	r23, 0xFF	; 255
    432e:	8f 4f       	sbci	r24, 0xFF	; 255
    4330:	9f 4f       	sbci	r25, 0xFF	; 255
    4332:	08 95       	ret

00004334 <__udivmodsi4>:
    4334:	a1 e2       	ldi	r26, 0x21	; 33
    4336:	1a 2e       	mov	r1, r26
    4338:	aa 1b       	sub	r26, r26
    433a:	bb 1b       	sub	r27, r27
    433c:	fd 01       	movw	r30, r26
    433e:	0d c0       	rjmp	.+26     	; 0x435a <__udivmodsi4_ep>

00004340 <__udivmodsi4_loop>:
    4340:	aa 1f       	adc	r26, r26
    4342:	bb 1f       	adc	r27, r27
    4344:	ee 1f       	adc	r30, r30
    4346:	ff 1f       	adc	r31, r31
    4348:	a2 17       	cp	r26, r18
    434a:	b3 07       	cpc	r27, r19
    434c:	e4 07       	cpc	r30, r20
    434e:	f5 07       	cpc	r31, r21
    4350:	20 f0       	brcs	.+8      	; 0x435a <__udivmodsi4_ep>
    4352:	a2 1b       	sub	r26, r18
    4354:	b3 0b       	sbc	r27, r19
    4356:	e4 0b       	sbc	r30, r20
    4358:	f5 0b       	sbc	r31, r21

0000435a <__udivmodsi4_ep>:
    435a:	66 1f       	adc	r22, r22
    435c:	77 1f       	adc	r23, r23
    435e:	88 1f       	adc	r24, r24
    4360:	99 1f       	adc	r25, r25
    4362:	1a 94       	dec	r1
    4364:	69 f7       	brne	.-38     	; 0x4340 <__udivmodsi4_loop>
    4366:	60 95       	com	r22
    4368:	70 95       	com	r23
    436a:	80 95       	com	r24
    436c:	90 95       	com	r25
    436e:	9b 01       	movw	r18, r22
    4370:	ac 01       	movw	r20, r24
    4372:	bd 01       	movw	r22, r26
    4374:	cf 01       	movw	r24, r30
    4376:	08 95       	ret

00004378 <__prologue_saves__>:
    4378:	2f 92       	push	r2
    437a:	3f 92       	push	r3
    437c:	4f 92       	push	r4
    437e:	5f 92       	push	r5
    4380:	6f 92       	push	r6
    4382:	7f 92       	push	r7
    4384:	8f 92       	push	r8
    4386:	9f 92       	push	r9
    4388:	af 92       	push	r10
    438a:	bf 92       	push	r11
    438c:	cf 92       	push	r12
    438e:	df 92       	push	r13
    4390:	ef 92       	push	r14
    4392:	ff 92       	push	r15
    4394:	0f 93       	push	r16
    4396:	1f 93       	push	r17
    4398:	cf 93       	push	r28
    439a:	df 93       	push	r29
    439c:	cd b7       	in	r28, 0x3d	; 61
    439e:	de b7       	in	r29, 0x3e	; 62
    43a0:	ca 1b       	sub	r28, r26
    43a2:	db 0b       	sbc	r29, r27
    43a4:	0f b6       	in	r0, 0x3f	; 63
    43a6:	f8 94       	cli
    43a8:	de bf       	out	0x3e, r29	; 62
    43aa:	0f be       	out	0x3f, r0	; 63
    43ac:	cd bf       	out	0x3d, r28	; 61
    43ae:	09 94       	ijmp

000043b0 <__epilogue_restores__>:
    43b0:	2a 88       	ldd	r2, Y+18	; 0x12
    43b2:	39 88       	ldd	r3, Y+17	; 0x11
    43b4:	48 88       	ldd	r4, Y+16	; 0x10
    43b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    43b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    43ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    43bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    43be:	9b 84       	ldd	r9, Y+11	; 0x0b
    43c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    43c2:	b9 84       	ldd	r11, Y+9	; 0x09
    43c4:	c8 84       	ldd	r12, Y+8	; 0x08
    43c6:	df 80       	ldd	r13, Y+7	; 0x07
    43c8:	ee 80       	ldd	r14, Y+6	; 0x06
    43ca:	fd 80       	ldd	r15, Y+5	; 0x05
    43cc:	0c 81       	ldd	r16, Y+4	; 0x04
    43ce:	1b 81       	ldd	r17, Y+3	; 0x03
    43d0:	aa 81       	ldd	r26, Y+2	; 0x02
    43d2:	b9 81       	ldd	r27, Y+1	; 0x01
    43d4:	ce 0f       	add	r28, r30
    43d6:	d1 1d       	adc	r29, r1
    43d8:	0f b6       	in	r0, 0x3f	; 63
    43da:	f8 94       	cli
    43dc:	de bf       	out	0x3e, r29	; 62
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	cd bf       	out	0x3d, r28	; 61
    43e2:	ed 01       	movw	r28, r26
    43e4:	08 95       	ret

000043e6 <_exit>:
    43e6:	f8 94       	cli

000043e8 <__stop_program>:
    43e8:	ff cf       	rjmp	.-2      	; 0x43e8 <__stop_program>
